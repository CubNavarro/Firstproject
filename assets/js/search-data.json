{
  
    
        "post0": {
            "title": "Week 1 Questions",
            "content": "import getpass, sys questions = 3 correct = 0 def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg def question_and_answer(prompt): print(&quot;Question: &quot; + prompt) msg = input() print(&quot;Answer: &quot; + msg) question_and_answer(&quot;what is your favorite class in school?&quot;) question_and_answer(&quot;Do you like this class?&quot;) question_and_answer(&quot;How has your day been?&quot;) print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_and_answer(&quot;Are you ready for some questions?&quot;) rsp = question_with_response(&quot;Who is the creator of Apple?&quot;) if rsp == &quot;Steve Jobs&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;what is 10+40?&quot;) if rsp == &quot;50&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Is Toby leeder the hotest of them all?&quot;) if rsp == &quot;yes&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Question: what is your favorite class in school? Answer: Math Question: Do you like this class? Answer: yes Question: How has your day been? Answer: good Hello, Caleb running c: Users Caleb AppData Local Programs Python Python310 python.exe You will be asked 3 questions. Question: Are you ready for some questions? Answer: good Question: Who is the creator of Apple? Your mom is incorrect! Question: what is 10+40? your mom is incorrect! Question: Is Toby leeder the hotest of them all? 69 is incorrect! Caleb you scored 0/3 .",
            "url": "https://cubnavarro.github.io/Firstproject/newcode/week%201/2023/06/04/_questions.html",
            "relUrl": "/newcode/week%201/2023/06/04/_questions.html",
            "date": " • Jun 4, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "First Notebook",
            "content": "About . This is my first page. . #collapse-show hello this is a secert message ohohhohohohohohoh . .",
            "url": "https://cubnavarro.github.io/Firstproject/newcode/week%200/2023/06/04/_Notebook.html",
            "relUrl": "/newcode/week%200/2023/06/04/_Notebook.html",
            "date": " • Jun 4, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Lists and Dictionary",
            "content": "My list and dictionary . I switched it up and made some lists and dictionaries . These are just the Questions . questions = [ &quot;What is your first name?&quot;, &quot;How Old are you?&quot;, &quot;What is your favorite food?&quot;, &quot;What is your favorite color?&quot;, &quot;What is your favorite place?&quot;, &quot;who are your friends&quot;, ] print(questions) . [&#39;What is your first name?&#39;, &#39;how Old are you?&#39;, &#39;What is your favorite food?&#39;, &#39;What is your favorite color?&#39;, &#39;What is your favorite place?&#39;, &#39;who are your friends&#39;] . Questions with Answers . These questiona are the ones with answers . print(&quot;What is your first name?&quot;) name = &quot;Big Man Nathan&quot; print(name) print(&quot;How old are you?&quot;) age = &quot;16&quot; print(age) # variable of type integer print(&quot;What is your favorite Food&quot;) food = &quot;Pizza&quot; print(food) print(&quot;How old are you?&quot;) color = &quot;Hot pink&quot; print(color) # variable of type float print(&quot;What is your favoirte place&quot;) place = &quot;Europe&quot; print(place) # variable of type list (many values in one variable) print(&quot;Who are your friends&quot;) friends = &quot;The leader of the friend group, Gene, Caleb&quot; print(friends) # variable of type dictionary (a group of keys and values) print(&quot;Is this you?&quot;) person = { &quot;Your Name&quot;: name, &quot;Your Age&quot;: age, &quot;Favorite Food&quot;: food, &quot;Favorite Place&quot;: place, &quot;Your Friends&quot;: friends } print(person) . What is your first name? Big Man Nathan How old are you? 16 What is your favorite Food Pizza How old are you? Hot pink What is your favoirte place Europe Who are your friends The leader of the friend group, Gene, Caleb Is this you? {&#39;Your Name&#39;: &#39;Big Man Nathan&#39;, &#39;Your Age&#39;: &#39;16&#39;, &#39;Favorite Food&#39;: &#39;Pizza&#39;, &#39;Favorite Place&#39;: &#39;Europe&#39;, &#39;Your Friends&#39;: &#39;The leader of the friend group, Gene, Caleb&#39;} . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Caleb&quot;, &quot;LastName&quot;: &quot;Navarro&quot;, &quot;age&quot;: &quot;16&quot;, &quot;DOB&quot;: &quot;April 14&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;caleb.evan.navarro@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;Bugatti La Voiture Noire&quot;, &quot;Audi A4&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Billy&quot;, &quot;LastName&quot;: &quot;Bob&quot;, &quot;age&quot;: &quot;21&quot;, &quot;DOB&quot;: &quot;December 21&quot;, &quot;Residence&quot;: &quot;Europe&quot;, &quot;Email&quot;: &quot;bigboybilly@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;Tesla&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Nathan&quot;, &quot;LastName&quot;: &quot;Capule&quot;, &quot;age&quot;: &quot;16&quot;, &quot;DOB&quot;: &quot;July 8&quot;, &quot;Residence&quot;: &quot;Star Killer Base&quot;, &quot;Email&quot;: &quot;plrttapotty@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;2019 Lamborghini Huracan Performante, Gerald R. Ford-class aircraft carrier, Starship&quot;] }) # Print the data structure print(InfoDb) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;age:&quot;, d_rec[&quot;age&quot;]) print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop algorithm iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . [{&#39;FirstName&#39;: &#39;Caleb&#39;, &#39;LastName&#39;: &#39;Navarro&#39;, &#39;age&#39;: &#39;16&#39;, &#39;DOB&#39;: &#39;April 14&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;caleb.evan.navarro@gmail.com&#39;, &#39;Owns_Cars&#39;: [&#39;Bugatti La Voiture Noire&#39;, &#39;Audi A4&#39;]}, {&#39;FirstName&#39;: &#39;Billy&#39;, &#39;LastName&#39;: &#39;Bob&#39;, &#39;age&#39;: &#39;21&#39;, &#39;DOB&#39;: &#39;December 21&#39;, &#39;Residence&#39;: &#39;Europe&#39;, &#39;Email&#39;: &#39;bigboybilly@gmail.com&#39;, &#39;Owns_Cars&#39;: [&#39;Tesla&#39;]}, {&#39;FirstName&#39;: &#39;Nathan&#39;, &#39;LastName&#39;: &#39;Capule&#39;, &#39;age&#39;: &#39;16&#39;, &#39;DOB&#39;: &#39;July 8&#39;, &#39;Residence&#39;: &#39;Star Killer Base&#39;, &#39;Email&#39;: &#39;plrttapotty@gmail.com&#39;, &#39;Owns_Cars&#39;: [&#39;2019 Lamborghini Huracan Performante, Gerald R. Ford-class aircraft carrier, Starship&#39;]}] For loop output Caleb Navarro age: 16 Residence: San Diego Birth Day: April 14 Cars: Bugatti La Voiture Noire, Audi A4 Billy Bob age: 21 Residence: Europe Birth Day: December 21 Cars: Tesla Nathan Capule age: 16 Residence: Star Killer Base Birth Day: July 8 Cars: 2019 Lamborghini Huracan Performante, Gerald R. Ford-class aircraft carrier, Starship . import getpass, sys questions = 3 correct = 0 def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg def question_and_answer(prompt): print(&quot;Question: &quot; + prompt) msg = input() print(&quot;Answer: &quot; + msg) question_and_answer(&quot;How has your day been today?&quot;) question_and_answer(&quot;Do you have friends?&quot;) question_and_answer(&quot;Do you like ice cream&quot;) print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_and_answer(&quot;Are you ready for some questions?&quot;) rsp = question_with_response(&quot;what is 10+6?&quot;) if rsp == &quot;16&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What many tacos should you eat a day?&quot;) if rsp == &quot;42,069&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;From 1 to 10 how hot is toby?&quot;) if rsp == &quot;69&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Question: How has your day been today? Answer: Question: Do you have friends? Answer: Question: Do you like ice cream Answer: Hello, Caleb running c: Users Caleb AppData Local Programs Python Python310 python.exe You will be asked 3 questions. Question: Are you ready for some questions? Answer: Question: what is 10+6? is incorrect! Question: What many tacos should you eat a day? is incorrect! Question: From 1 to 10 how hot is toby? is incorrect! Caleb you scored 0/3 .",
            "url": "https://cubnavarro.github.io/Firstproject/newcode/week%202/2023/06/04/_Lists.html",
            "relUrl": "/newcode/week%202/2023/06/04/_Lists.html",
            "date": " • Jun 4, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "My Bash And Tools Setup",
            "content": "echo &quot;Using conditional statement to create a project directory and project&quot; # Variable section export project_dir=$HOME/vscode # change vscode to different name to test git clone export project=$project_dir/APCSP # change APCSP to name of project from git clone export project_repo=&quot;https://github.com/nighthawkcoders/APCSP.git&quot; # change to project of choice cd ~ # start in home directory # Conditional block to make a project directory if [ ! -d $project_dir ] then echo &quot;Directory $project_dir does not exists... makinng directory $project_dir&quot; mkdir -p $project_dir fi echo &quot;Directory $project_dir exists.&quot; # Conditional block to git clone a project from project_repo if [ ! -d $project ] then echo &quot;Directory $project does not exists... cloning $project_repo&quot; cd $project_dir git clone $project_repo cd ~ fi echo &quot;Directory $project exists.&quot; . The kernel failed to start as a dll could not be loaded. Click &lt;a href=&#39;https://aka.ms/kernelFailuresDllLoad&#39;&gt;here&lt;/a&gt; for more info. . echo &quot;Navigate to project, then navigate to area wwhere files were cloned&quot; cd $project pwd echo &quot;&quot; echo &quot;list top level or root of files with project pulled from github&quot; ls echo &quot;&quot; echo &quot;list again with hidden files pulled from github&quot; ls -a # hidden files flag, many shell commands have flags echo &quot;&quot; echo &quot;list all files in long format&quot; ls -al # all files and long listing . echo &quot;Look for posts&quot; export posts=$project/_posts # _posts inside project cd $posts # this should exist per fastpages pwd # present working directory ls -l # list posts . The kernel failed to start as a dll could not be loaded. Click &lt;a href=&#39;https://aka.ms/kernelFailuresDllLoad&#39;&gt;here&lt;/a&gt; for more info. . echo &quot;Look for notebooks&quot; export notebooks=$project/_notebooks # _notebooks is inside project cd $notebooks # this should exist per fastpages pwd # present working directory ls -l # list notebooks . The kernel failed to start as a dll could not be loaded. Click &lt;a href=&#39;https://aka.ms/kernelFailuresDllLoad&#39;&gt;here&lt;/a&gt; for more info. . echo &quot;Look for images in notebooks, print working directory, list files&quot; cd $notebooks/images # this should exist per fastpages pwd ls -l . The kernel failed to start as a dll could not be loaded. Click &lt;a href=&#39;https://aka.ms/kernelFailuresDllLoad&#39;&gt;here&lt;/a&gt; for more info. . echo &quot;Navigate to project, then navigate to area wwhere files were cloned&quot; cd $project echo &quot;show the contents of README.md&quot; echo &quot;&quot; cat README.md # show contents of file, in this case markdown echo &quot;&quot; echo &quot;end of README.md&quot; . The kernel failed to start as a dll could not be loaded. Click &lt;a href=&#39;https://aka.ms/kernelFailuresDllLoad&#39;&gt;here&lt;/a&gt; for more info. . echo &quot;Show the shell environment variables, key on left of equal value on right&quot; echo &quot;&quot; env . The kernel failed to start as a dll could not be loaded. Click &lt;a href=&#39;https://aka.ms/kernelFailuresDllLoad&#39;&gt;here&lt;/a&gt; for more info. . cd $project echo &quot;&quot; echo &quot;show the secrets of .git&quot; cd .git ls -l echo &quot;&quot; echo &quot;look at config file&quot; cat config . The kernel failed to start as a dll could not be loaded. Click &lt;a href=&#39;https://aka.ms/kernelFailuresDllLoad&#39;&gt;here&lt;/a&gt; for more info. . python --version python2 --version . The kernel failed to start as a dll could not be loaded. Click &lt;a href=&#39;https://aka.ms/kernelFailuresDllLoad&#39;&gt;here&lt;/a&gt; for more info. . conda list . The kernel failed to start as a dll could not be loaded. Click &lt;a href=&#39;https://aka.ms/kernelFailuresDllLoad&#39;&gt;here&lt;/a&gt; for more info. . echo Conda Check # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . The kernel failed to start as a dll could not be loaded. Click &lt;a href=&#39;https://aka.ms/kernelFailuresDllLoad&#39;&gt;here&lt;/a&gt; for more info. . jupyter --version jupyter kernelspec list . The kernel failed to start as a dll could not be loaded. Click &lt;a href=&#39;https://aka.ms/kernelFailuresDllLoad&#39;&gt;here&lt;/a&gt; for more info. . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . The kernel failed to start as a dll could not be loaded. Click &lt;a href=&#39;https://aka.ms/kernelFailuresDllLoad&#39;&gt;here&lt;/a&gt; for more info. .",
            "url": "https://cubnavarro.github.io/Firstproject/techtalk/bash",
            "relUrl": "/techtalk/bash",
            "date": " • Jun 4, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Grimsley Pc1 Spring 2022 Calendar",
            "content": "Trig Graph Paper . Unit 1 . 1 March 7 . Minimum Day! . Intro to class! . HW . ☐Attitude &amp; Interest Survey . ☐Get a graph paper notebook! :) . 8 . A1 . Radians- Define &amp; Identify . Learning Goal: I will be able to evaluate with radians. . Class Slides . A1 HW . ☐#1-6 Answers . ☐Attitude &amp; Interest Survey . ☐ Print Trig Graph Paper . 9 . A2 . Radians- Evaluate &amp; Graph . Learning Goal: I will be able to evaluate and graph in radians. . Class Slides . A2 HW . ☐ #1-10 Answers . 10 . A3 . Solve with Radians . Learning Goal: I will be able to solve with radians. . Class Slides . Around the World . A3 HW . ☐ #1-9 Answers . 11 . A4 . Reciprocal Functions &amp; Radian Wrap Up . Learning Goal: I will be able to evaluate with reciprocal functions. . Class Slides . Stations . A4 HW . ☐ #1-10 Answers . . 2 | 14 . A5 . Pythagorean Identities . Learning Goal: I will be able to discover and use the pythagorean identities. . Class Slides . A5 HW . ☐ Trig… foundation #1, 5, 9,..,37 Answers . | 15 . A6 . Pythagorean Identities . Learning Goal: I will be able to use the pythagorean identities to simplify. . Class Slides . A6 HW . ☐ Take home radians ‘quiz’ - take it as if it were a real quiz!! Must bring tomorrow . | 16 . A7 . Prep for Quiz 1! . Learning Goal: I will be able to use the pythagorean identities to simplify. . Class Slides . A7 HW . ☐ #1(all), #3(all), #5(b &amp; c), #9-17 odds . Answers . | 17 . A8 . Quiz 1! . Study Guide . Then Sum &amp; Difference Identities :-) . Learning Goal: I will demonstrate my learning thus far. &amp; I will know why we need Sum &amp; Difference Identities! . Class Slides . A8 HW . ☐Pick 5 problems: . Iconic Identities 1 Answers . | 18 . A9 . Sum &amp; Difference Identities . Learning Goal: I will be able to use the sum and difference identities to evaluate trig functions. . Class Slides . Rally Coach Key . A9 HW . ☐ Trig… foundation #4, 12, 14, 20, 22, 28, 30, 36, 38 . Answers . | . 3 | 21 . A10 . Double Angle Identities . Learning Goal: I will be able to use double angle identities. . Class Slides . A10 HW . ☐page 321 #21 . Answers . page 383 #5, 13, 17 . Answers . | 22 . A11 . Solving with csc/sec/cot . Learning Goal: I will be able to solve with secant, cosecant, and cotangent. . Class Slides . A11 HW . ☐ Pick 5 problems: . Iconic Identities 1 Answers . | 23 . A12 . Radians &amp; Identities Practice . Learning Goal: I will be able to use radians and trig identities to simplify. . Class Slides . A12 HW . ☐#1-7 Answers . Skip #2!! . | 24 . A13 . Graphing csc/sec/cot . Learning Goal: I will be able to graph csc, sec, and cot. . Class Slides . A13 HW . ☐ Pick 10 problems: . 6 Trig Functions (don’t do #15-20) Answers . | 25 . A14 . Practice . (Make this the last day with your identity reference sheet!) . Classwork will be collected Monday! Full credit for correct answers with all work shown. . Resource Page . Resource Page Key . A14 HW . ☐ Finish classwork . | . 4 | 28 . A15 . Formative ‘Quiz’- Free Chance to Make Mistakes . (not for points- don’t stress) . Learning Goal: I will know what I need to study for Test 1. . Blank FCTMM . Key . Class Slides . A15 HW . ☐ Trig Identities Wkst #2-8 evens, 22-34 evens . ☐Study identities! . | 29 . A16 . Review for Test 1 . (no identities reference sheet!) . Learning Goal: I will review what I have learned in Unit A. . Class Slides . A16 HW . ☐ Pick 5 problems: . Iconic Identities 1 Answers . ☐ Study identities &amp; for Test 1! . | 30 . B1 . Last Day to Submit A Unit Late Work! . Graphing Double Angles . Learning Goal: I will be able to graph sine, cosine, and tangent involving double angles. . Class Slides . B1 HW . ☐ Study for Test 1! . | 31 . Test 1! . (no identities reference sheet!) . Test 1 Study Guide . | April 1 . B2 . Graphing Triple Angles . Learning Goal: I will be able to graph, sine, cosine, and tangent involving double and triple angles. . Class Slides . B2 HW . ☐ Test 1 Reflection . ☐Test key (so you can see how you did!) . ☐ Have a great weekend :) . | . Unit 2 . 5 4 . B3 . Solving Trig Equations with Algebra . Learning Goal: I will be able to solve trig equations with algebra. . Class Slides . B3 HW . ☐Extreme…Trig Style #5, 7, 11, 17, 24, 26 . Answers . 5 . B4 . Solving with Trig Identities . Learning Goal: I will be able to solve trig equations using trig identities. . Class Slides . Four Corners Key . B4 HW . ☐ Double &amp; Triple Angles . GRAPH ONLY: #2, 4, 7 &amp; 8 . Answers . 6 . B5 . Solving Double Angles &amp; Triple Angles . Learning Goal: I will be able to solve trig equations with double and triple angles. . Class Slides . Resource Page Key . B5 HW . ☐ Double &amp; Triple Angles . SOLVE #2, 4, 7 &amp; 8 . GRAPH #1 and 5 . Answers . 7 . B6 . Modeling with Trig Functions . Learning Goal: I will be able to use trig functions to model real world scenarios. . Class Slides . Resource Page Key . B6 HW . ☐ Simplifying vs. Solving ‘Quiz’ . ☐ Test 1 Corrections due Wed. April 20 . 8 . B7 . Solving Review . Learning Goal: I will be able to solve trig equations using a variety of methods. . Quizizz &amp; Key . B7 HW . ☐ none . Have a great spring break :) . . | 11 . Spring Break . Woo hoo! . | 12 | 13 | 14 | 15 | . 6 | 18 . B8 . Formative ‘Quiz’- Free Chance to Make Mistakes . Learning Goal: I will show myself what I know and what I need to study for Test 2. . FCTMM &amp; Key . B8 HW . ☐ Simplifying Practice Makes Perfect #9, 13, 15, 17 Answers . Extreme…Trig Style #4, 8, 10 Answers . ☐Test 1 Corrections due Wed. April 20 . | 19 . B9 . Test 2 Review . Learning Goal: I will know what I need to study for Test 2. . Class Slides (with word scramble problems &amp; key) . B9 HW . ☐ Study for Test 2! (we recommended to re-do problems from test 1, quizzes, and HW!) . | 20 . Test 2 . Part 1! . Test 2 Study Guide . (no identities reference sheet!) . Last Day to Submit Unit B latework!! . C1 . Right Triangles in the Coordinate Plane . Learning Goal: I will be able to use right triangles and given trig info to find missing trig info . Class Slides . C1 HW . ☐ Study for Test 2! . | 21 . Test 2 . Part 2! . Test 2 Study Guide . (no identities reference sheet!) . | 22 . C2 . Solving Over Different Domains . Learning Goal: I will be able to solve trig functions over different domains. . Resource Page . Key . C2 HW . ☐ Trig Love Triangles part 1 . Answers . ☐Trig Identities Wskt #37 Answers . due tuesday . | . Unit 3 . 7 25 . C3 . Even &amp; Odd Vocab . Learning Goal: I will be able to determine if a function is even or odd. . Resource Page . Key . C3 HW . ☐ Trig Love Triangles part 1 . Answers . ☐Trig Identities Wskt #37 Answers . Due tomorrow . 26 . C4 . Defining Inverse Trig Functions . Learning Goal: I will be able to define and graph inverse trig functions. . Class Slides . C4 HW . ☐ Iconic Identities part 2 #13-16, 30-35 . 27 . C5 . Evaluating Inverse Trig Functions . Learning Goal: I will be able to evaluate with inverse trig functions. . Resource Page . RP key . C5 HW . ☐ Evaluate #1-8 . Solve/Simplify #9-10 . Answers . 28 . C6 . Describing Graphs . Learning Goal: I will be able to completely describe trig graphs using appropriate vocabulary. . Desmos . C6 HW . ☐ Vocabulary with Trig Functions (page 2) . Answers . 29 . C7 . Simplifying Monomials . Learning Goal: I will be able to simplify monomials. . Class Slides . C7 HW . ☐ Solving Over Different Domain . Answers . . 8 | May 2 . C8 . Simplifying Binomials &amp; Polynomials . Learning Goal: I will be able to simplify binomials &amp; polynomials. . Class Slides . C8 HW . ☐Page 178 #1a&amp;b, 3a&amp;b, 5a&amp;b, 7-13 odds, 17-27 odds . Answers . ☐ Test 2 Corrections due Friday . | 3 . C9 . Simplifying Complex Rational Expressions . Learning Goal: I will be able to simplify complex rational expressions. . Class Slides . C9 HW . ☐Simplifying...Expert Level #1-5, 35-40 . Answers . ☐ Test 2 Corrections due Friday . | 4 . C10 . Simplifying Roots with Absolute Value . Learning Goal: I will be able to simplify expressions using laws related to roots. . Class Slides . Card Sort . Card Sort Answers . C10 HW . ☐Solving…Trig Style #4-9 . ☐ Test 2 Corrections due Friday . | 5 . C11 . Team Quiz . Topics . C11 HW . ☐ Test 2 Corrections due tomorrow! . | 6 . C12 . Calculus Readiness Check! . Learning Goal: I will refine my algebra skills that are prerequisites for calculus. . Class Slides . Desmos Per 1 . Desmos Per 2 . Key . C12 HW . ☐ Finish desmos activity in your notebook! . (will check it Tues. morning, but you will also have HW mon night so budget time :)) . | . 9 | 9 . C13 . Factoring with Fractional Exponents . Learning Goal: I will be able to factor expressions with fractional exponents. . Class Slides . C13 HW . ☐Simplifying...Expert Level #6-12, 50-52 . Answers . ☐ Finish Desmos from Fri, 5/6 . ☐ Team Quiz Corrections due tomorrow . | 10 . C14 . Solving by Factoring . Learning Goal: I will be able to solve equations using factoring techniques. . Class Slides . C14 HW . ☐ Simplifying Identities... #4-10 . Answers . | 11 . C15 . Solving with Exponents . Learning Goal: I will be able to solve with rational exponents. . Class Slides . C15 HW . ☐ Solving...Expert Level #1-10 . Answers . | 12 . C16 . Solving with e and ln . Learning Goal: I will be able to solve equations using e and ln. . Class Slides . C16 HW . ☐ Page 196 #36b, 37b, 38b, 40b . Page 200 #30a&amp;b, 32b, 33b, 34b . Answers . | 13 . C17 . Application of e . Learning Goal: I will be able to apply e to a real world scenario. . Class Slides . C17 HW . ☐Simplifying...Expert Level #13-16, 21-24 . Answers . | . Unit 4 . 10 16 . C18 . FCTMM Bingo . Learning Goal: I will self assess my readiness for Test 3. . FCTMM . Key . C18 HW . REQUIRED: . ☐ Solving...Expert Level #12-19 (Pick 4) . Answers . ☐Correct FCTMM in a different color pen &amp; write reflection!! . STRONGLY RECOMMENDED: . ☐Solving..Expert ^^ #12-19 ALL . ☐ Modeling Practice . 17 . C19 . Last Day to Submit Unit C late work!! . Test 3 Review . Learning Goal: I will know what I need to study for Test 3. . Resource Page . RP Key . Modeling Practice . Modeling Key . C19 HW . ☐ Study for Test 3 . Use past tests, FCTMMs, quizzes, team quiz, CW, HW, etc. !!! . 18 . Test 3 . Part 1! . No calc . Test 3 Topics . 19 . Test 3 . Part 2! . Calc OK . Test 3 Topics . 20 . D1 . Solving Systems . Learning Goal: I will be able to solve systems of equations algebraically and graphically. . Class Slides . Resource Page . Key . D1 HW . ☐ Solving...Expert Level #11-20 Answers . Due tuesday :-) . . 11 | 23 . D2 . Solving Systems . Learning Goal: I will be able to solve systems of equations algebraically and graphically. . Resource Page . Key . D2 HW . ☐ Solving...Expert Level #22-32 . | 24 . D3 . Symmetry &amp; Even Functions . Learning Goal: I will be able to apply transformations to a function, f(x), and determine if a function has symmetry. . Class Slides . Resource Page . Key . D3 HW . ☐More Algebra Review choose 10 from #1-12, 19-30 . Answers . Due Thursday :) . | 25 . D4 . More Transformations &amp; Symmetry . Learning Goal: I will be able to perform more challenging transformations, &amp; justify algebraically if there is symmetry. . Class Slides . Resource Page . Key . D4 HW . ☐ Start Test 3 Corrections due Tuesday 5/31! . | 26 . D5 . Piecewise Graphs . Learning Goal: I will be able to graph piecewise functions . Class Slides . Resource Page . Key . D5 HW . ☐ Piecewise Functions pick 5 . Answers . ☐ Test 3 Corrections due Wed, 6/1! . | 27 . D6 . Algebra Review . Learning Goal: I will be able to simplify complex expressions. . Class Slides . D6 HW . ☐ Fractional and Negative Exponents . #5-10, 13, 14, 17, 25, 31 . ☐ Test 3 Corrections due Wed, 6/1! . | . 12 | 30 . Memorial Day . No School . | 31 . D7 . Graphing Review . Learning Goal: I will reflect on my abilities to describe and transform graphs. . Class Slides . Resource Page . Key . D7 HW . ☐ Test Corrections due 6/1 . ☐ Ex. Cr. due on Canvas Thursday @11:59pm . | June 1 . D8 . Algebra Review . Learning Goal: I will reflect on my abilities to simplify, factor, and solve algebraic expressions. . Class Slides . D8 HW . ☐Simplifying...Expert Level pick 5 . Solving...Expert Level pick 5 . ☐ Ex. Cr. due tomorrow . | 2 . D9 . Trig Review . Learning Goal: I will reflect on my abilities to evaluate, simplify, and solve with trig. . Class Slides . Stations . D9 HW . ☐ Study for your final . ☐ Optional Ex. Cr. due on Canvas tonight @11:59pm . | 3 . D10 . Final, Final Review . Learning Goal: I will practice a variety of skills for my final. . Class Slides . D10 HW . ☐Study for your final . | . 13 | 6 . Final Part 1 . Test 4 Topics . | 7 . Finals Week . (period 5) . Test 4 Topics . Classwork: . Class Survey . AP Calc Info . Fun Option: . Escape Room . | 8 . Finals Week . (periods 1-2) . Test 4 Topics . | 9 . Finals Week . (periods 3-4) . Test 4 Topics . | Happy Summer :) | .",
            "url": "https://cubnavarro.github.io/Firstproject/2023/06/04/Grimsley-PC1-Spring-2022-Calendar.html",
            "relUrl": "/2023/06/04/Grimsley-PC1-Spring-2022-Calendar.html",
            "date": " • Jun 4, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "Food Guessing Game",
            "content": "import random foods = [ {&quot;name&quot;: &quot;Pizza&quot;, &quot;description&quot;: &quot;A baked dish made of dough, tomato sauce, and toppings such as cheese and meat.&quot;}, {&quot;name&quot;: &quot;Sushi&quot;, &quot;description&quot;: &quot;A Japanese dish consisting of small balls or rolls of vinegar-flavored cold cooked rice served with a garnish of vegetables, egg, or raw seafood.&quot;}, {&quot;name&quot;: &quot;Burger&quot;, &quot;description&quot;: &quot;A sandwich consisting of a grilled beef patty served on a bun, often with cheese, lettuce, tomato, and other toppings.&quot;}, {&quot;name&quot;: &quot;Taco&quot;, &quot;description&quot;: &quot;A traditional Mexican dish consisting of a corn or wheat tortilla filled with meat, beans, cheese, and vegetables.&quot;}, {&quot;name&quot;: &quot;Pad Thai&quot;, &quot;description&quot;: &quot;A stir-fried noodle dish commonly served as a street food and in casual restaurants in Thailand.&quot;}, {&quot;name&quot;: &quot;Fish and Chips&quot;, &quot;description&quot;: &quot;A British dish consisting of battered fish and deep-fried chips (French fries).&quot;} ] points = 0 for i in range(len(foods)): food = random.choice(foods) print(&quot;What food item is described as follows?&quot;) print(food[&quot;description&quot;]) guess = input(&quot;Guess the name of the food item: &quot;) if guess.lower() == food[&quot;name&quot;].lower(): print(&quot;Correct! You earned 10 points.&quot;) points += 10 else: print(&quot;Incorrect. The correct answer is&quot;, food[&quot;name&quot;], &quot;. You lost 5 points.&quot;) points -= 5 foods.remove(food) print(&quot;Game over. Your final score is&quot;, points) . Another Version of the Food game . This version Makes it so that you have 2 options to choose from and this was the next section that I wanted to complete and improve. Next version has only one round instead of asking multiple times. . import random foods = [ {&quot;name&quot;: &quot;Pizza&quot;, &quot;description&quot;: &quot;A baked dish made of dough, tomato sauce, and toppings such as cheese and meat.&quot;}, {&quot;name&quot;: &quot;Sushi&quot;, &quot;description&quot;: &quot;A Japanese dish consisting of small balls or rolls of vinegar-flavored cold cooked rice served with a garnish of vegetables, egg, or raw seafood.&quot;}, {&quot;name&quot;: &quot;Burger&quot;, &quot;description&quot;: &quot;A sandwich consisting of a grilled beef patty served on a bun, often with cheese, lettuce, tomato, and other toppings.&quot;}, {&quot;name&quot;: &quot;Taco&quot;, &quot;description&quot;: &quot;A traditional Mexican dish consisting of a corn or wheat tortilla filled with meat, beans, cheese, and vegetables.&quot;}, {&quot;name&quot;: &quot;Pad Thai&quot;, &quot;description&quot;: &quot;A stir-fried noodle dish commonly served as a street food and in casual restaurants in Thailand.&quot;}, {&quot;name&quot;: &quot;Fish and Chips&quot;, &quot;description&quot;: &quot;A British dish consisting of battered fish and deep-fried chips (French fries).&quot;}] points = 0 rounds = 5 for i in range(rounds): # Select two random foods from the list food1, food2 = random.sample(foods, 2) print(&quot;Which of the following foods is described as follows?&quot;) print(&quot;1. &quot; + food1[&quot;description&quot;]) print(&quot;2. &quot; + food2[&quot;description&quot;]) guess = int(input(&quot;Enter 1 or 2 to guess: &quot;)) if guess == 1 and food1[&quot;name&quot;].lower() == input(&quot;Guess the name of the first food item: &quot;).lower(): print(&quot;Correct! You earned 10 points.&quot;) points += 10 elif guess == 2 and food2[&quot;name&quot;].lower() == input(&quot;Guess the name of the second food item: &quot;).lower(): print(&quot;Correct! You earned 10 points.&quot;) points += 10 else: print(&quot;Incorrect. The correct answer is&quot;, food1[&quot;name&quot;] + &quot; or &quot; + food2[&quot;name&quot;], &quot;. You lost 5 points.&quot;) points -= 5 print(&quot;Game over. Your final score is&quot;, points) . Getting the Answer correct . This is the version when you get the answer correct . import random foods = [ {&quot;name&quot;: &quot;Pizza&quot;, &quot;description&quot;: &quot;A baked dish made of dough, tomato sauce, and toppings such as cheese and meat.&quot;}, {&quot;name&quot;: &quot;Sushi&quot;, &quot;description&quot;: &quot;A Japanese dish consisting of small balls or rolls of vinegar-flavored cold cooked rice served with a garnish of vegetables, egg, or raw seafood.&quot;}, {&quot;name&quot;: &quot;Burger&quot;, &quot;description&quot;: &quot;A sandwich consisting of a grilled beef patty served on a bun, often with cheese, lettuce, tomato, and other toppings.&quot;}, {&quot;name&quot;: &quot;Taco&quot;, &quot;description&quot;: &quot;A traditional Mexican dish consisting of a corn or wheat tortilla filled with meat, beans, cheese, and vegetables.&quot;}, {&quot;name&quot;: &quot;Pad Thai&quot;, &quot;description&quot;: &quot;A stir-fried noodle dish commonly served as a street food and in casual restaurants in Thailand.&quot;}, {&quot;name&quot;: &quot;Fish and Chips&quot;, &quot;description&quot;: &quot;A British dish consisting of battered fish and deep-fried chips (French fries).&quot;} ] # Select two random foods from the list food1, food2 = random.sample(foods, 2) print(&quot;Which of the following foods is described as follows?&quot;) print(&quot;1. &quot; + food1[&quot;description&quot;]) print(&quot;2. &quot; + food2[&quot;description&quot;]) guess = int(input(&quot;Enter 1 or 2 to guess: &quot;)) if guess == 1 and food1[&quot;name&quot;].lower() == input(&quot;Guess the name of the first food item: &quot;).lower(): print(&quot;Correct! You guessed the food item correctly.&quot;) elif guess == 2 and food2[&quot;name&quot;].lower() == input(&quot;Guess the name of the second food item: &quot;).lower(): print(&quot;Correct! You guessed the food item correctly.&quot;) else: print(&quot;Incorrect. The correct answer for Question 1 is&quot;, food1[&quot;name&quot;] + &quot; and the answer for the Question 2 is&quot; + food2[&quot;name&quot;]) print(&quot;Thanks For Playing the Game.&quot;) . Which of the following foods is described as follows? 1. A stir-fried noodle dish commonly served as a street food and in casual restaurants in Thailand. 2. A British dish consisting of battered fish and deep-fried chips (French fries). Incorrect. The correct answer for Question 1 is Pad Thai and the answer for the Question 2 isFish and Chips Thanks For Playing the Game. . Getting the Answer Wrong . This is the Final version of the game . import random foods = [ {&quot;name&quot;: &quot;Pizza&quot;, &quot;description&quot;: &quot;A baked dish made of dough, tomato sauce, and toppings such as cheese and meat.&quot;}, {&quot;name&quot;: &quot;Sushi&quot;, &quot;description&quot;: &quot;A Japanese dish consisting of small balls or rolls of vinegar-flavored cold cooked rice served with a garnish of vegetables, egg, or raw seafood.&quot;}, {&quot;name&quot;: &quot;Burger&quot;, &quot;description&quot;: &quot;A sandwich consisting of a grilled beef patty served on a bun, often with cheese, lettuce, tomato, and other toppings.&quot;}, {&quot;name&quot;: &quot;Taco&quot;, &quot;description&quot;: &quot;A traditional Mexican dish consisting of a corn or wheat tortilla filled with meat, beans, cheese, and vegetables.&quot;}, {&quot;name&quot;: &quot;Pad Thai&quot;, &quot;description&quot;: &quot;A stir-fried noodle dish commonly served as a street food and in casual restaurants in Thailand.&quot;}, {&quot;name&quot;: &quot;Fish and Chips&quot;, &quot;description&quot;: &quot;A British dish consisting of battered fish and deep-fried chips (French fries).&quot;} ] # Select two random foods from the list food1, food2 = random.sample(foods, 2) print(&quot;Which of the following foods is described as follows?&quot;) print(&quot;1. &quot; + food1[&quot;description&quot;]) print(&quot;2. &quot; + food2[&quot;description&quot;]) guess = int(input(&quot;Enter 1 or 2 to guess: &quot;)) if guess == 1 and food1[&quot;name&quot;].lower() == input(&quot;Guess the name of the first food item: &quot;).lower(): print(&quot;Correct! You guessed the food item correctly.&quot;) elif guess == 2 and food2[&quot;name&quot;].lower() == input(&quot;Guess the name of the second food item: &quot;).lower(): print(&quot;Correct! You guessed the food item correctly.&quot;) else: print(&quot;Incorrect. The correct answer for Question 1 is&quot;, food1[&quot;name&quot;] + &quot; and the answer for the Question 2 is&quot; + food2[&quot;name&quot;]) print(&quot;Thanks For Playing the Game.&quot;) . Which of the following foods is described as follows? 1. A British dish consisting of battered fish and deep-fried chips (French fries). 2. A traditional Mexican dish consisting of a corn or wheat tortilla filled with meat, beans, cheese, and vegetables. Incorrect. The correct answer for Question 1 is Fish and Chips and the answer for the Question 2 isTaco Thanks For Playing the Game. .",
            "url": "https://cubnavarro.github.io/Firstproject/2023/06/04/CPTproject.html",
            "relUrl": "/2023/06/04/CPTproject.html",
            "date": " • Jun 4, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "Python 2D Iteration and Animation",
            "content": "2D Programming and Resources . There are lots of applications for 2D data. Common terms in 2D are tabular data, row/columns, matrix, etc. Nested iterative loops are often used to find or discover each cell in a 2D array. . 2D samples and challenges in Jupyter. wget link:https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/2023-05-16-DS-arrays_lab.ipynb- Mario animations in JS, these are markdown code examples. Assets metadata yml, wget and place in _data directory; sprite, download and place in images directory | Code to interact with Sprite Animations runtime, wget code | Game starters runtime, wget imperative code, wget oop code | . | . Python 2D array . Example of pre-populating 2D array and printing using 3 different styles . Candy Challenge:print a christmas tree and trunk | . def test_matrices(): # setup some text matrices keypad = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [&quot; &quot;, 0, &quot; &quot;]] keyboard = [[&quot;`&quot;, 1, &quot; &quot;, 2, &quot; &quot;,3, &quot; &quot;, 4, &quot; &quot;, 5, &quot; &quot;, 6, &quot; &quot;, 7, &quot; &quot;, 8, &quot; &quot;, 9, &quot; &quot;, 0, &quot; &quot;, &quot;-&quot;,&quot; &quot;, &quot;=&quot;], [&quot; &quot;, &quot; &quot;, &quot;Q&quot;, &quot; &quot;, &quot;W&quot;, &quot; &quot;, &quot;E&quot;, &quot; &quot;, &quot;R&quot;, &quot; &quot;, &quot;T&quot;, &quot; &quot;, &quot;Y&quot;, &quot; &quot;, &quot;U&quot;, &quot; &quot;, &quot;I&quot;, &quot; &quot;, &quot; &quot;, &quot;O&quot;, &quot; &quot;, &quot;P&quot;, &quot; &quot;, &quot;[&quot;, &quot; &quot;, &quot;]&quot;, &quot; &quot;, &quot; &quot;], [&quot; &quot;, &quot; &quot;, &quot; &quot;, &quot;A&quot;, &quot; &quot;, &quot;S&quot;, &quot; &quot;, &quot;D&quot;, &quot; &quot;, &quot;F&quot;, &quot; &quot;, &quot;G&quot;, &quot; &quot;, &quot;H&quot;, &quot; &quot;, &quot;J&quot;, &quot; &quot;, &quot;K&quot;, &quot; &quot;, &quot;L&quot;, &quot; &quot;, &quot;;&quot;, &quot; &quot;, &quot;&#39;&quot;], [&quot; &quot;, &quot; &quot;, &quot; &quot;, &quot; &quot;, &quot;Z&quot;, &quot; &quot;, &quot;X&quot;, &quot; &quot;, &quot;C&quot;, &quot; &quot;, &quot;V&quot;, &quot; &quot;, &quot;B&quot;, &quot; &quot;, &quot;N&quot;, &quot; &quot;, &quot;M&quot;, &quot; &quot;, &quot;,&quot;, &quot; &quot;, &quot;.&quot;, &quot; &quot;, &quot;/&quot;]] numbers = [ [0, 1], # binary [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], # decimal [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, &quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;] # hexadecimal ] # New: Christmas Tree tree = [ [&quot; &quot;, &quot; &quot;, &quot; &quot;, &quot;*&quot;, &quot; &quot;, &quot; &quot;, &quot; &quot;], [&quot; &quot;, &quot; &quot;, &quot;*&quot;, &quot;*&quot;, &quot;*&quot;, &quot; &quot;, &quot; &quot;], [&quot; &quot;, &quot;*&quot;, &quot;*&quot;, &quot;*&quot;, &quot;*&quot;, &quot;*&quot;, &quot; &quot;], [&quot;*&quot;, &quot;*&quot;, &quot;*&quot;, &quot;*&quot;, &quot;*&quot;, &quot;*&quot;, &quot;*&quot;], [&quot; &quot;, &quot; &quot;, &quot;*&quot;, &quot;*&quot;, &quot;*&quot;, &quot; &quot;, &quot; &quot;], [&quot; &quot;, &quot; &quot;, &quot;*&quot;, &quot;*&quot;, &quot;*&quot;, &quot; &quot;, &quot; &quot;], [&quot; &quot;, &quot; &quot;, &quot;*&quot;, &quot;*&quot;, &quot;*&quot;, &quot; &quot;, &quot; &quot;] ] # New: Trunk trunk = [ [&quot; &quot;, &quot; &quot;, &quot; &quot;, &quot;|&quot;, &quot; &quot;, &quot; &quot;, &quot; &quot;], [&quot; &quot;, &quot; &quot;, &quot; &quot;, &quot;|&quot;, &quot; &quot;, &quot; &quot;, &quot; &quot;], [&quot; &quot;, &quot; &quot;, &quot; &quot;, &quot;|&quot;, &quot; &quot;, &quot; &quot;, &quot; &quot;], [&quot; &quot;, &quot; &quot;, &quot; &quot;, &quot;|&quot;, &quot; &quot;, &quot; &quot;, &quot; &quot;], [&quot; &quot;, &quot; &quot;, &quot; &quot;, &quot;|&quot;, &quot; &quot;, &quot; &quot;, &quot; &quot;], ] # pack into a list of matrices with titles matrices = [ [&quot;Keypad&quot;, keypad], [&quot;Keyboard&quot;, keyboard], [&quot;Number Systems&quot;, numbers], [&quot;Christmas Tree&quot;, tree], # Add the new matrices [&quot;Trunk&quot;, trunk] ] # loop 2D matrix with returning list in [key, value] arrangement for title, matrix in matrices: print(title, len(matrix), &quot;x&quot;, &quot;~&quot; + str(len(matrix[0]))) print_matrix1(matrix) print_matrix2(matrix) print_matrix3(matrix) print() if __name__ == &quot;__main__&quot;: # Call the function or execute code here test_matrices() . Keypad 4 x ~3 Classic nested loops using ij indexes 1 2 3 4 5 6 7 8 9 0 Enhanced nested for loops 1 2 3 4 5 6 7 8 9 0 For loop with shortcut (*) row expansion 1 2 3 4 5 6 7 8 9 0 Keyboard 4 x ~24 Classic nested loops using ij indexes ` 1 2 3 4 5 6 7 8 9 0 - = Q W E R T Y U I O P [ ] A S D F G H J K L ; &#39; Z X C V B N M , . / Enhanced nested for loops ` 1 2 3 4 5 6 7 8 9 0 - = Q W E R T Y U I O P [ ] A S D F G H J K L ; &#39; Z X C V B N M , . / For loop with shortcut (*) row expansion ` 1 2 3 4 5 6 7 8 9 0 - = Q W E R T Y U I O P [ ] A S D F G H J K L ; &#39; Z X C V B N M , . / Number Systems 3 x ~2 Classic nested loops using ij indexes 0 1 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 A B C D E F Enhanced nested for loops 0 1 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 A B C D E F For loop with shortcut (*) row expansion 0 1 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 A B C D E F Christmas Tree 7 x ~7 Classic nested loops using ij indexes * * * * * * * * * * * * * * * * * * * * * * * * * Enhanced nested for loops * * * * * * * * * * * * * * * * * * * * * * * * * For loop with shortcut (*) row expansion * * * * * * * * * * * * * * * * * * * * * * * * * Trunk 5 x ~7 Classic nested loops using ij indexes | | | | | Enhanced nested for loops | | | | | For loop with shortcut (*) row expansion | | | | | . JavaScript 2D array . Example below populate a 2D array. Key concepts are ij loop and assignments. Observe the object that is created in console. Learn the basics of iteration through 2D array in JavaScript. . Candy challenge:Work of pairs. Create one of the Python examples (christmas tree, keyboard, ...). Use the element.append to output within the notebook. As you work on JavaScript make sure your development enviornment is setup like JavaScript programmer. | . def print_christmas_tree(): tree_height = 7 for i in range(tree_height): spaces = tree_height - i - 1 stars = 2 * i + 1 print(&quot; &quot; * spaces + &quot;*&quot; * stars) trunk_width = tree_height // 3 trunk_height = tree_height // 2 for _ in range(trunk_height): print(&quot; &quot; * (tree_height - trunk_width) + &quot;|&quot; * trunk_width) # Call the function to print the Christmas tree print_christmas_tree() . * *** ***** ******* ********* *********** ************* || || || . Monkey Jumpers Poem . Here are some of the key parts of these arrays . Build ASCII monkeys, 5 different monkeys using ASCII Art for the &quot;Monkey Jumpers&quot; countdown poem | ANSII Color codes are added to each Monkey | Candy Challenge:Print monkeys horizontally versus vertically. | . &quot;&quot;&quot; * Creator: Nighthawk Coding Society * Mini Lab Name: Hello Series, featuring Monkey Jumpers Poem &quot;&quot;&quot; import time # used for delay from IPython.display import clear_output # jupyter specific clear def main(): # ANSI Color Codes Red = &quot; u001b[31m&quot; Green = &quot; u001b[32m&quot; Yellow = &quot; u001b[33m&quot; Blue = &quot; u001b[34m&quot; Magenta = &quot; u001b[35m&quot; &quot;&quot;&quot; 2D array data assignment &quot;&quot;&quot; monkeys = [ [ Red, &quot;ʕง ͠° ͟ل͜ ͡°)ʔ &quot;, # [0][0] eyes &quot; _⏄_/ &quot;, # [0][1] chin &quot; --0-- &quot;, # [0][2] body &quot; ⎛ ⎞ &quot; # [0][3] legs ], [ Green, &quot; ʕ༼ ◕_◕ ༽ʔ &quot;, # [1][0] &quot; _⎏_/ &quot;, &quot; ++1++ &quot;, &quot; ⌋ ⌊ &quot; ], [ Yellow, &quot; ʕ(▀ ⍡ ▀)ʔ&quot;, # [2][0] &quot; _⎐_/ &quot;, &quot; &lt;-2-&gt; &quot;, &quot; 〈 〉 &quot; ], [ Blue, &quot;ʕ ͡° ͜ʖ ° ͡ʔ&quot;, # [3][0] &quot; _⍾_/ &quot;, &quot; ==3== &quot;, &quot; _/ _ &quot; ], [ Magenta, &quot; (◕‿◕✿) &quot;, # [4][0] &quot; _⍾_/ &quot;, # [4][1] &quot; ==4== &quot;, # [4][2] &quot; _/ _ &quot; # [4][3] ] ] &quot;&quot;&quot; 2D array program logic &quot;&quot;&quot; # cycles through 2D array backwards for i in range(len(monkeys), -1, -1): clear_output(wait=True) print(&quot;Nursery Rhyme&quot;) # identification message # this print statement shows current count of Monkeys # concatenation (+) of the loop variable and string to form a countdown message print(str(i) + &quot; little monkeys jumping on the bed...&quot;) # cycle through monkeys that are left in poem countdown for row in range(i - 1, -1, -1): # cycles through remaining monkeys in countdown # cycles through monkey part by part for col in range(len(monkeys[row])): # prints specific part of the monkey from the 2D cell print(monkeys[row][col] + &quot; &quot;) # this new line gives separation between stanza of poem print(&quot; u001b[0m&quot;) # reset color time.sleep(2) # out of all the loops, prints finishing messages clear_output(wait=True) print(&quot;No more monkeys jumping on the bed&quot;) print(&quot;0000000000000000000000000000000000&quot;) print(&quot; THE END &quot;) if __name__ == &quot;__main__&quot;: main() . No more monkeys jumping on the bed 0000000000000000000000000000000000 THE END . Animation, the Energetic versus Lazy Programmer methods . Animation is done like the old Disney films, lots of little images put togehter. In these examples we eliminate using a 2D array, but simulate int with a sequence of print statements. . This 1st sequence is a lot of lines of code. | The 2nd takes the lazy programmer method to do the same. | Candy challenge:Make you own ASCII art animation. | . &quot;&quot;&quot; * Creator: Nighthawk Coding Society Sailing Ship Animation (long method) &quot;&quot;&quot; import time # used for delay from IPython.display import clear_output # jupyter specific clear # ANSI Color Codes Color34 = &quot; u001b[34m&quot; Color37 = &quot; u001b[37m&quot; # As you can see, its not very optimal def ship1(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship2(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship3(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship4(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship5(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship6(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship7(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship8(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship9(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship10(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship11(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship12(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship13(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship14(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship15(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship16(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship17(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship18(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship19(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship20(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) clear_output(wait=True) time.sleep(.1) ship1() time.sleep(.5) clear_output(wait=True) ship2() time.sleep(.5) clear_output(wait=True) ship3() time.sleep(.5) clear_output(wait=True) ship4() time.sleep(.5) clear_output(wait=True) ship5() time.sleep(.5) clear_output(wait=True) ship6() time.sleep(.5) clear_output(wait=True) ship7() time.sleep(.5) clear_output(wait=True) ship8() time.sleep(.5) clear_output(wait=True) ship9() time.sleep(.5) clear_output(wait=True) ship10() time.sleep(.5) clear_output(wait=True) ship11() time.sleep(.5) clear_output(wait=True) ship12() time.sleep(.5) clear_output(wait=True) ship13() time.sleep(.5) clear_output(wait=True) ship14() time.sleep(.5) clear_output(wait=True) ship15() time.sleep(.5) clear_output(wait=True) ship16() time.sleep(.5) clear_output(wait=True) ship17() time.sleep(.5) clear_output(wait=True) ship18() time.sleep(.5) clear_output(wait=True) ship19() time.sleep(.5) clear_output(wait=True) ship20() time.sleep(.5) . | |/ __ |__/ ____/ -- . &quot;&quot;&quot; * Creator: Nighthawk Coding Society Sailing Ship Animation (programatic method) &quot;&quot;&quot; import time # used for delay from IPython.display import clear_output # jupyter specific clear # ANSI Color Codes OCEAN_COLOR = u&quot; u001B[34m u001B[2D&quot; SHIP_COLOR = u&quot; u001B[35m u001B[2D&quot; RESET_COLOR = u&quot; u001B[0m u001B[2D&quot; def ship_print(position): # print ship with colors and leading spaces according to position clear_output(wait=True) print(RESET_COLOR) sp = &quot; &quot; * position print(sp + &quot; | &quot;) print(sp + &quot; |/ &quot;) print(SHIP_COLOR, end=&quot;&quot;) print(sp + &quot; __ |__/ &quot;) print(sp + &quot; ____/ &quot;) print(OCEAN_COLOR + &quot;--&quot;*32 + RESET_COLOR) def ship(): # ship function, loop/controller for animation speed and times # loop control variables start = 0 # start at zero distance = 60 # how many times to repeat step = 2 # count by 2 # loop purpose is to animate ship sailing for position in range(start, distance, step): ship_print(position) # call to function with parameter time.sleep(.2) ship() # activate/call ship function . | |/ __ |__/ ____/ - . &quot;&quot;&quot; * Creator: Nighthawk Coding Society Sailing Ship Animation (programatic method) &quot;&quot;&quot; import time # used for delay from IPython.display import clear_output # jupyter specific clear # ANSI Color Codes GROUND_COLOR = u&quot; u001b[31m&quot; SHIP_COLOR = u&quot; u001B[35m u001B[2D&quot; RESET_COLOR = u&quot; u001B[0m u001B[2D&quot; def ship_print(position): # print ship with colors and leading spaces according to position clear_output(wait=True) print(RESET_COLOR) sp = &quot; &quot; * position print(sp + &quot; | /| /| /| &quot;) print(sp + &quot; . . . . . . . &quot;) print(SHIP_COLOR, end=&quot;&quot;) print(sp + &quot; ^ ^ ^ ^ ^ ^ ^ ^ &quot;) print(sp + &quot; TT TT TT TT TT TT TT &quot;) print(GROUND_COLOR + &quot;--&quot;*32 + RESET_COLOR) def ship(): # ship function, loop/controller for animation speed and times # loop control variables start = 0 # start at zero distance = 60 # how many times to repeat step = 2 # count by 2 # loop purpose is to animate ship sailing for position in range(start, distance, step): ship_print(position) # call to function with parameter time.sleep(.2) ship() # activate/call ship function . | /| /| /| . . . . . . . ^ ^ ^ ^ ^ ^ ^ ^ TT TT TT TT TT TT TT - .",
            "url": "https://cubnavarro.github.io/Firstproject/1.d/2.b/3.b/c3.1/2023/05/16/DS-arrays_lab.html",
            "relUrl": "/1.d/2.b/3.b/c3.1/2023/05/16/DS-arrays_lab.html",
            "date": " • May 16, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "2020 Practice Test Corrections",
            "content": "Overview of the Test . The test was not to bad overall and I didn’t have that bad of a time doing the test. After i did the test I looked over some of the questions that I got wrong and some of them were not reading the whole answer and simple mistake but others were actual mistakes and didn’t understand/know what or how to do the question. The whole test took me about 1 hour and allowed me to really get an understnanding of what I need to learn and know for the Ap test . My Final test Score . . Question 26 . . This question I messed up on and this was a very simple mistake that I did and I really guessed for this question because I really didn’t know how to find the answer for this and will have to look at more of these and kinda study this question to make sure I get it correct on the AP test . Question 29 . . This question i went though it way to fast and read the question wrong and this one was also pretty simple but I did get this one wrong and I need to make sure i don’t make mistakes in the future and I did though the test and this one was super easy looking back at the question and I am kinda mad at myself that I didn’t do better and get the answer correct because this was a very short sequence and not that complex. . Question 31 . . This question was pretty hard for me and I had a challenging time with this question, it probally took me around 10 minutes to try and understand this question and what was happening and I though that I got itcorrect and figured it out but it wasn’t correct and I got it wrong and It looked easy but when I really though about it it was complex and relized how it worked. . Question 32 . . This question was not hard for me and I really understood how to do it I just made a simple mistake and feel really stupid because the robot questions are really easy for me and I have a good understanding of this question I just need to slow down and take my time in order to read the question correct and get the right answer .",
            "url": "https://cubnavarro.github.io/Firstproject/week%2028/2023/05/01/2020PracticeExam.html",
            "relUrl": "/week%2028/2023/05/01/2020PracticeExam.html",
            "date": " • May 1, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "SASS Hacks",
            "content": "Hacks . What are 5 basic UI Elements? . Color | Font | Layout | Size | Accessibility | In your own words, explain what SASS does? . a frontend styling extension that aids in minimizing the CSS language’s complexity. . What are some benefits to SASS? . built-in functions, more variables, less complexity, and ease of usage . Describe/Explain one of the more “advanced” SASS properties below in detail? . Advanced sass is crucial since the user will be happier and it will work with a wide range of gadgets. Keyframes are referred to as fade-in. Keyframes access various informational components at various moments. Specific animation properties like duration, iteration, delay, direction, and more can be specified. . How does the number guesser game work? . A random number is produced first. The user input is then referred to and contrasted with the previously generated number using documentGetElementByID. Depending on whether the guess is higher, lower, or accurate, the actual number is compared to the guess, and several outcomes are generated. . Explain how SASS can be used to make the number guesser game look more visually appealing? . The SASS component makes the software more visually appealing by switching the background from red to green when the number is accurately predicted. Additionally, the UI is made lively and amusing by the typeface and color choices, which promotes user involvement. . Theme Changer . link . Favicon . I changed my favicon to my friend becuase i din’t know what else to change it too . . Number guessing Game . .",
            "url": "https://cubnavarro.github.io/Firstproject/week%2028/2023/04/27/SASShacks.html",
            "relUrl": "/week%2028/2023/04/27/SASShacks.html",
            "date": " • Apr 27, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "Dev Ops Hacks",
            "content": "KASM Hacks . Users can access and use distant computer resources, such as operating systems and apps, from any device with internet connection thanks to a technology called virtual desktops. A specific virtual desktop environment called KASM (Kali Application Streaming Manager) was created for cybersecurity education. It offers a secure setting in which to learn and practice cybersecurity techniques, especially when using the Kali Linux operating system. Virtual desktops like KASM can be used in an AP CSP (Advanced Placement Computer Science Principles) environment to give students practical exposure with cybersecurity ideas and abilities without the need for costly hardware or running the risk of harming actual systems. In a safe and secure setting, students can learn and practice cybersecurity strategies to hone their skills. . | My screenshots . | . . AWS Database Hacks . Quiz 1 . C | A | C | Quiz 2 . C | D | C | . In order to access websites using domain names rather than IP addresses, DNS is required. DuckDNS is a free dynamic DNS solution that gives devices with changing IP addresses a reliable domain name. It is easy to set up and adaptable for a variety of purposes. Self-hosted services, remote access to home networks, and Internet of Things (IoT) projects can all use DuckDNS. Register for a free account, set up your router so that it updates your IP address with DuckDNS, and test your domain name to make sure it is functioning properly to set up DuckDNS. Overall, DuckDNS is a practical and cost-free choice for remote device access or hosting services at home. . | It’s critical to keep up with the most recent Nginx/Docker releases and to be aware of any deprecated functionality or modifications to the deployment procedure. Understanding the underlying technologies and industry standards for configuring and protecting your server is also beneficial. . | . Hack 6 . . Certbot Hacks . . Two well-known open-source cryptography libraries used to implement SSL/TLS protocols in diverse applications estionsare OpenSSL and LibreSSL. Although they are similar, their security characteristics differ in some ways. . Since it has a wider codebase, OpenSSL has previously been subject to a number of high-profile security flaws, including Heartbleed (CVE-2014-0160) and DROWN (CVE-2016-0800), which were serious flaws that allowed for remote code execution and data leakage, respectively. . On the other side, LibreSSL is a fork of OpenSSL that was developed with the intention of offering a more up-to-date and secure implementation. It has a smaller codebase and places special emphasis on getting rid of obsolete and legacy code to minimize the attack surface. LibreSSL seeks to offer a safer alternative to OpenSSL as a result. . Both LibreSSL and OpenSSL have responsive security teams that quickly fix flaws through consistent updates and patches. In order to reduce risks, it is essential to keep both libraries updated to the most recent versions and adhere to best practices for safe implementation and configuration. This is because no program is fully impervious to vulnerabilities. .",
            "url": "https://cubnavarro.github.io/Firstproject/week%2028/2023/04/26/Devopshacks.html",
            "relUrl": "/week%2028/2023/04/26/Devopshacks.html",
            "date": " • Apr 26, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "Test#4 Corrections",
            "content": "Overview of the Test . The test was not to bad overall and I didn’t have that bad of a time doing the test. After i did the test I looked over some of the questions that I got wrong and some of them were not reading the whole answer and simple mistake but others were actual mistakes and didn’t understand/know what or how to do the question. The whole test took me about 1 hour and allowed me to really get an understnanding of what I need to learn and know for the Ap test . My Final test Score . I got a 62 out of 66 . . Question 17 . . This question I messed up on and this was a very simple mistake that I did and I really guessed for this question because I really didn’t know how to find the answer for this and will have to look at more of these and kinda study this question to make sure I get it correct on the AP test . Question 23 . . This question i went though it way to fast and read the question wrong and this one was also pretty simple but I did get this one wrong and I need to make sure i don’t make mistakes in the future and I did though the test and this one was super easy looking back at the question and I am kinda mad at myself that I didn’t do better and get the answer correct because this was a very short sequence and not that complex. . Question 47 . . This question was pretty hard for me and I had a challenging time with this question, it probally took me around 10 minutes to try and understand this question and what was happening and I though that I got itcorrect and figured it out but it wasn’t correct and I got it wrong and It looked easy but when I really though about it it was complex and relized how it worked. . Question 64 . . This question was not hard for me and I really understood how to do it I just made a simple mistake and feel really stupid because the robot questions are really easy for me and I have a good understanding of this question I just need to slow down and take my time in order to read the question correct and get the right answer .",
            "url": "https://cubnavarro.github.io/Firstproject/week%2028/2023/04/20/2018Practicetest.html",
            "relUrl": "/week%2028/2023/04/20/2018Practicetest.html",
            "date": " • Apr 20, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "Test#4 Corrections",
            "content": "Overview of the Test . The test was not to bad overall and I didn’t have that bad of a time doing the test. After i did the test I looked over some of the questions that I got wrong and some of them were not reading the whole answer and simple mistake but others were actual mistakes and didn’t understand/know what or how to do the question. The whole test took me about 1 hour and allowed me to really get an understnanding of what I need to learn and know for the Ap test . My Final test Score . . Question 26 . . This question I messed up on and this was a very simple mistake that I did and I really guessed for this question because I really didn’t know how to find the answer for this and will have to look at more of these and kinda study this question to make sure I get it correct on the AP test . Question 29 . . This question i went though it way to fast and read the question wrong and this one was also pretty simple but I did get this one wrong and I need to make sure i don’t make mistakes in the future and I did though the test and this one was super easy looking back at the question and I am kinda mad at myself that I didn’t do better and get the answer correct because this was a very short sequence and not that complex. . Question 31 . . This question was pretty hard for me and I had a challenging time with this question, it probally took me around 10 minutes to try and understand this question and what was happening and I though that I got itcorrect and figured it out but it wasn’t correct and I got it wrong and It looked easy but when I really though about it it was complex and relized how it worked. . Question 32 . . This question was not hard for me and I really understood how to do it I just made a simple mistake and feel really stupid because the robot questions are really easy for me and I have a good understanding of this question I just need to slow down and take my time in order to read the question correct and get the right answer .",
            "url": "https://cubnavarro.github.io/Firstproject/week%2028/2023/04/03/Test-4Corrections.html",
            "relUrl": "/week%2028/2023/04/03/Test-4Corrections.html",
            "date": " • Apr 3, 2023"
        }
        
    
  
    
        ,"post12": {
            "title": "Extra Credit Notes",
            "content": "Notes . Ashley . likes the school | first generation student | failed some classes like Calc and Physics | She made it so her failers didn’t defin her and kept pushing thought and | trying to follow her dream and achieve her final goal | Cal state open oppurtunies for her | . John . Started at palomar collage | A computer science degree | At Cal state for three | Computer science is an important skill and is used in a lot of jobs | . Cal State . From Cal state | Got tons of programs to help you | They have a new cyber secrity program | Smaller campus change ciriculum | allows for easy change | helps you get to know you professors more | . | . THINGS TO DO . Check emails | be socal | . CSTEM departments . Physics | Chem and Bio chem | Math | Computer science | Software Engineering | Electrical Enginnering | . Clubs . Join clubs | Robotics | 3D printing | Women in Stem | . Interships . Ton of Interships that help intergrat you into the school | Mario Cart day | Apply for an intership the worst thing they can do is say no | google internship in the area or in diffenret collages | alot of programs offered | Get paid and unpaid interships | Email the facility members for more inforamtion | Apply even if you are under qualified | . Programs . Get paid programs to learn about the feild you are in and get experence | very enjoyable and fun | Some of 10 week Summer programs | 6k for a full time job and 3K for part time | Play a sport | . Paying for Collage . Scollarships and grants | grant are from te govermwent | Scolarships are usally from private companies | You can get scholarships for many different things | 2 type of Loans Unsubtidezed loans helped by the goverment so you don’t stay in debt and keep going into dept | Interest rates are higher | . | Subtitized loan not backed by the goverment and less interest | . | . | Think smart for when you take out loans and when you are doing anything like that | . Life after CSUSM . They help you get ito different feilds | They go get jobs or more interships | some people get masters degrees or further education | Some collages pay for you to get higher education and put more effort and work in | If you get a PHD you shouldn’t pay a dime | . Events at CSUSM . There is upcoming events at CSUSM if you have any question | They have the events for people that are admitted | .",
            "url": "https://cubnavarro.github.io/Firstproject/week%2014/2023/03/28/extracradit.html",
            "relUrl": "/week%2014/2023/03/28/extracradit.html",
            "date": " • Mar 28, 2023"
        }
        
    
  
    
        ,"post13": {
            "title": "Collage Board Big Idea 2 Reflection",
            "content": "Overview of the Test . I got a 19 out of 25 on the Big Idea Quiz and this quiz took me about half of the period. This quiz was not that bad as I understood most of the information because some of the question were select all that apply and I got 1 out of the two correct and knew the information just not all. I did ask for help on some of the questions to my group members and they helped me solve the problem and get the correct answer on some of the questions . Final Score . . Question 9 . . This was a simple mistake that I made when doing the test and after looking back over the question and see the answer I understand how to do it and why thats the answer . Question 12 . . This question was pretty hard for me and I didn’t really understand the question. For this Question I really guessed on the question because I didn’t know and when I asked my group for this question they didn’t know too . Question 15 . . This question was a hard question for me too and I didn’t understand it to well and it took me much longer to answer than the other questions . Question 18 . . Again this question was hard for me but I though I got this one right and was fairly confident on the answer and thinking i knew what the answer was . Question 20 . . To be stright I had no clue what to do for this question . Question 21 . . This was a simple mistake I made and I am kinda mad I got this one wrong .",
            "url": "https://cubnavarro.github.io/Firstproject/week%2026/2023/03/20/BigIdea2.html",
            "relUrl": "/week%2026/2023/03/20/BigIdea2.html",
            "date": " • Mar 20, 2023"
        }
        
    
  
    
        ,"post14": {
            "title": "Unit 2.4a Using Programs with Data, SQLAlchemy",
            "content": "Database and SQLAlchemy . In this blog we will explore using programs with data, focused on Databases. We will use SQLite Database to learn more about using Programs with Data. . College Board talks about ideas like . Program Usage. &quot;iterative and interactive way when processing information&quot; | Managing Data. &quot;classifying data are part of the process in using programs&quot;, &quot;data files in a Table&quot; | Insight &quot;insight and knowledge can be obtained from ... digitally represented information&quot; | Filter systems. &#39;tools for finding information and recognizing patterns&quot; | Application. &quot;the preserve has two databases&quot;, &quot;an employee wants to count the number of book&quot; | . | PBL, Databases, Iterative/OOP . Iterative. Refers to a sequence of instructions or code being repeated until a specific end result is achieved | OOP. A computer programming model that organizes software design around data, or objects, rather than functions and logic | SQL. Structured Query Language, abbreviated as SQL, is a language used in programming, managing, and structuring data | . | . Imports and Flask Objects . Defines and key object creations . Comment on where you have observed these working? | . Flask app object | SQLAlchemy object | &quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///files/sqlite.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . ModuleNotFoundError Traceback (most recent call last) c: Users Caleb vscode Firstproject _notebooks 2023-03-13-AP-unit2-4a.ipynb Cell 4 in &lt;cell line: 6&gt;() &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/Caleb/vscode/Firstproject/_notebooks/2023-03-13-AP-unit2-4a.ipynb#W3sZmlsZQ%3D%3D?line=0&#39;&gt;1&lt;/a&gt; &#34;&#34;&#34; &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/Caleb/vscode/Firstproject/_notebooks/2023-03-13-AP-unit2-4a.ipynb#W3sZmlsZQ%3D%3D?line=1&#39;&gt;2&lt;/a&gt; These imports define the key objects &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/Caleb/vscode/Firstproject/_notebooks/2023-03-13-AP-unit2-4a.ipynb#W3sZmlsZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; &#34;&#34;&#34; &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/Caleb/vscode/Firstproject/_notebooks/2023-03-13-AP-unit2-4a.ipynb#W3sZmlsZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; from flask import Flask -&gt; &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/Caleb/vscode/Firstproject/_notebooks/2023-03-13-AP-unit2-4a.ipynb#W3sZmlsZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; from flask_sqlalchemy import SQLAlchemy &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/Caleb/vscode/Firstproject/_notebooks/2023-03-13-AP-unit2-4a.ipynb#W3sZmlsZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; &#34;&#34;&#34; &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/Caleb/vscode/Firstproject/_notebooks/2023-03-13-AP-unit2-4a.ipynb#W3sZmlsZQ%3D%3D?line=8&#39;&gt;9&lt;/a&gt; These object and definitions are used throughout the Jupyter Notebook. &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/Caleb/vscode/Firstproject/_notebooks/2023-03-13-AP-unit2-4a.ipynb#W3sZmlsZQ%3D%3D?line=9&#39;&gt;10&lt;/a&gt; &#34;&#34;&#34; &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/Caleb/vscode/Firstproject/_notebooks/2023-03-13-AP-unit2-4a.ipynb#W3sZmlsZQ%3D%3D?line=11&#39;&gt;12&lt;/a&gt; # Setup of key Flask object (app) ModuleNotFoundError: No module named &#39;flask_sqlalchemy&#39; . Model Definition . Define columns, initialization, and CRUD methods for users table in sqlite.db . Comment on these items in the class | class User purpose | db.Model inheritance | init method | @property, @.setter&lt;/li&gt; additional methods | &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &quot;&quot;&quot; database dependencies to support sqlite examples &quot;&quot;&quot; import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into a Python shell and follow along &#39;&#39;&#39; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL class User(db.Model): __tablename__ = &#39;users&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=False, nullable=False) _uid = db.Column(db.String(255), unique=True, nullable=False) _password = db.Column(db.String(255), unique=False, nullable=False) _dob = db.Column(db.Date) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password=&quot;123qwerty&quot;, dob=datetime.today()): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # dob property is returned as string, to avoid unfriendly outcomes @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob should be have verification for type date @dob.setter def dob(self, dob): if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob @property def age(self): today = datetime.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # output content using str(object) in human readable form, uses getter # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;uid&quot;: self.uid, &quot;dob&quot;: self.dob, &quot;age&quot;: self.age, } # CRUD update: updates user name, password, phone # returns self def update(self, name=&quot;&quot;, uid=&quot;&quot;, password=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(uid) &gt; 0: self.uid = uid if len(password) &gt; 0: self.set_password(password) db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None . Initial Data . Uses SQLALchemy db.create_all() to initialize rows into sqlite.db . Comment on how these work? | . Create All Tables from db Object | User Object Constructors | Try / Except | &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def initUsers(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=datetime(1847, 2, 11)) u2 = User(name=&#39;Nikola Tesla&#39;, uid=&#39;niko&#39;, password=&#39;123niko&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;whit&#39;, password=&#39;123whit&#39;) u5 = User(name=&#39;Indiana Jones&#39;, uid=&#39;indi&#39;, dob=datetime(1920, 10, 21)) u6 = User(name=&#39;Marion Ravenwood&#39;, uid=&#39;raven&#39;, dob=datetime(1921, 10, 21)) users = [u1, u2, u3, u4, u5, u6] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for user in users: try: &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = user.create() print(f&quot;Created new uid {object.uid}&quot;) except: # error raised if object nit created &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {user.uid}, or error.&quot;) initUsers() . Check for given Credentials in users table in sqlite.db . Use of ORM Query object and custom methods to identify user to credentials uid and password . Comment on purpose of following | . User.query.filter_by | user.password | def find_by_uid(uid): with app.app_context(): user = User.query.filter_by(_uid=uid).first() return user # returns user object # Check credentials by finding user and verify password def check_credentials(uid, password): # query email and return user record user = find_by_uid(uid) if user == None: return False if (user.is_password(password)): return True return False #check_credentials(&quot;indi&quot;, &quot;123qwerty&quot;) . Create a new User in table in Sqlite.db . Uses SQLALchemy and custom user.create() method to add row. . Comment on purpose of following | . user.find_by_uid() and try/except | user = User(...) | user.dob and try/except | user.create() and try/except | def create(): # optimize user time to see if uid exists uid = input(&quot;Enter your user id:&quot;) user = find_by_uid(uid) try: print(&quot;Found n&quot;, user.read()) return except: pass # keep going # request value that ensure creating valid object name = input(&quot;Enter your name:&quot;) password = input(&quot;Enter your password&quot;) # Initialize User object before date user = User(name=name, uid=uid, password=password ) # create user.dob, fail with today as dob dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) try: user.dob = datetime.strptime(dob, &#39;%Y-%m-%d&#39;).date() except ValueError: user.dob = datetime.today() print(f&quot;Invalid date {dob} require YYYY-mm-dd, date defaulted to {user.dbo}&quot;) # write object to database with app.app_context(): try: object = user.create() print(&quot;Created n&quot;, object.read()) except: # error raised if object not created print(&quot;Unknown error uid {uid}&quot;) create() . Reading users table in sqlite.db . Uses SQLALchemy query.all method to read data . Comment on purpose of following | . User.query.all | json_ready assignment | # SQLAlchemy extracts all users from database, turns each user into JSON def read(): with app.app_context(): table = User.query.all() json_ready = [user.read() for user in table] # each user adds user.read() to list return json_ready read() . SQLAlchemy extracts all users from database, turns each user into JSON . def read(): with app.app_context(): table = User.query.all() json_ready = [user.read() for user in table] # each user adds user.read() to list return json_ready . read() . &lt;/div&gt; | .",
            "url": "https://cubnavarro.github.io/Firstproject/2023/03/13/AP-unit2-4a.html",
            "relUrl": "/2023/03/13/AP-unit2-4a.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post15": {
            "title": "Unit 2.3 Extracting Information from Data, Pandas",
            "content": "df = pd.read_json(&#39;files/grade.json&#39;) print(df) # What part of the data set needs to be cleaned? # From PBL learning, what is a good time to clean data? Hint, remember Garbage in, Garbage out? . NameError Traceback (most recent call last) c: Users Caleb vscode Firstproject _notebooks 2023-03-09-AP-unit2-3.ipynb Cell 2 in &lt;cell line: 2&gt;() &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/Caleb/vscode/Firstproject/_notebooks/2023-03-09-AP-unit2-3.ipynb#W2sZmlsZQ%3D%3D?line=0&#39;&gt;1&lt;/a&gt; # reads the JSON file and converts it to a Pandas DataFrame -&gt; &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/Caleb/vscode/Firstproject/_notebooks/2023-03-09-AP-unit2-3.ipynb#W2sZmlsZQ%3D%3D?line=1&#39;&gt;2&lt;/a&gt; df = pd.read_json(&#39;files/grade.json&#39;) &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/Caleb/vscode/Firstproject/_notebooks/2023-03-09-AP-unit2-3.ipynb#W2sZmlsZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; print(df) NameError: name &#39;pd&#39; is not defined . print(df[[&#39;GPA&#39;]]) print() #try two columns and remove the index from print statement print(df[[&#39;Student ID&#39;,&#39;GPA&#39;]].to_string(index=False)) . print(df.sort_values(by=[&#39;GPA&#39;])) print() #sort the values in reverse order print(df.sort_values(by=[&#39;GPA&#39;], ascending=False)) . print(df[df.GPA &gt; 3.00]) . print(df[df.GPA == df.GPA.max()]) print() print(df[df.GPA == df.GPA.min()]) . import pandas as pd #the data can be stored as a python dictionary dict = { &quot;calories&quot;: [420, 380, 390], &quot;duration&quot;: [50, 40, 45] } #stores the data in a data frame print(&quot;-Dict_to_DF&quot;) df = pd.DataFrame(dict) print(df) print(&quot;-Dict_to_DF_labels--&quot;) #or with the index argument, you can label rows. df = pd.DataFrame(dict, index = [&quot;day1&quot;, &quot;day2&quot;, &quot;day3&quot;]) print(df) . print(&quot;-Examine Selected Rows&quot;) #use a list for multiple labels: print(df.loc[[&quot;day1&quot;, &quot;day3&quot;]]) #refer to the row index: print(&quot;--Examine Single Row--&quot;) print(df.loc[&quot;day1&quot;]) . print(df.info()) . import pandas as pd #read csv and sort &#39;Duration&#39; largest to smallest df = pd.read_csv(&#39;files/data.csv&#39;).sort_values(by=[&#39;Duration&#39;], ascending=False) print(&quot;--Duration Top 10&quot;) print(df.head(10)) print(&quot;--Duration Bottom 10&quot;) print(df.tail(10)) . &#39;&#39;&#39;Pandas can be used to analyze data&#39;&#39;&#39; import pandas as pd import requests def fetch(): &#39;&#39;&#39;Obtain data from an endpoint&#39;&#39;&#39; url = &quot;https://flask.nighthawkcodingsociety.com/api/covid/&quot; fetch = requests.get(url) json = fetch.json() # filter data for requirement df = pd.DataFrame(json[&#39;countries_stat&#39;]) # filter endpoint for country stats print(df.loc[0:5, &#39;country_name&#39;:&#39;deaths&#39;]) # show row 0 through 5 and columns country_name through deaths fetch() . import seaborn as sns # Load the titanic dataset titanic_data = sns.load_dataset(&#39;titanic&#39;) print(&quot;Titanic Data&quot;) print(titanic_data.columns) # titanic data set print(titanic_data[[&#39;survived&#39;,&#39;pclass&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;class&#39;, &#39;fare&#39;, &#39;embark_town&#39;]]) # look at selected columns . # Preprocess the data from sklearn.preprocessing import OneHotEncoder td = titanic_data td.drop([&#39;alive&#39;, &#39;who&#39;, &#39;adult_male&#39;, &#39;class&#39;, &#39;embark_town&#39;, &#39;deck&#39;], axis=1, inplace=True) td.dropna(inplace=True) td[&#39;sex&#39;] = td[&#39;sex&#39;].apply(lambda x: 1 if x == &#39;male&#39; else 0) td[&#39;alone&#39;] = td[&#39;alone&#39;].apply(lambda x: 1 if x == True else 0) # Encode categorical variables enc = OneHotEncoder(handle_unknown=&#39;ignore&#39;) enc.fit(td[[&#39;embarked&#39;]]) onehot = enc.transform(td[[&#39;embarked&#39;]]).toarray() cols = [&#39;embarked_&#39; + val for val in enc.categories_[0]] td[cols] = pd.DataFrame(onehot) td.drop([&#39;embarked&#39;], axis=1, inplace=True) td.dropna(inplace=True) print(td) . print(titanic_data.query(&quot;survived == 0&quot;).mean()) . print(td.query(&quot;survived == 1&quot;).mean()) . print(td.query(&quot;survived == 1&quot;).max()) print(td.query(&quot;survived == 1&quot;).min()) . from sklearn.model_selection import train_test_split from sklearn.tree import DecisionTreeClassifier from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score # Split arrays or matrices into random train and test subsets. X = td.drop(&#39;survived&#39;, axis=1) y = td[&#39;survived&#39;] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # Train a decision tree classifier dt = DecisionTreeClassifier() dt.fit(X_train, y_train) # Test the model y_pred = dt.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;DecisionTreeClassifier Accuracy:&#39;, accuracy) # Train a logistic regression model logreg = LogisticRegression() logreg.fit(X_train, y_train) # Test the model y_pred = logreg.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;LogisticRegression Accuracy:&#39;, accuracy) .",
            "url": "https://cubnavarro.github.io/Firstproject/2023/03/09/AP-unit2-3.html",
            "relUrl": "/2023/03/09/AP-unit2-3.html",
            "date": " • Mar 9, 2023"
        }
        
    
  
    
        ,"post16": {
            "title": "Collage Board Test 3 Reflection",
            "content": "Overview of the Test . The test was not to bad overall and I didn’t have that bad of a time doing the test. After i did the test I looked over some of the questions that I got wrong and some of them were not reading the whole answer and simple mistake but others were actual mistakes and didn’t understand/know what or how to do the question. The whole test took me about 1 hour and allowed me to really get an understnanding of what I need to learn and know for the Ap test . My Final test Score . . Question 6 . . I had no clue what this was and I really guessed for this question because I really didn’t know how to find the answer for this and will have to look at more of these and kinda study this question to make sure I get it correct on the AP test . Question 18 . . This question i went though it way to fast and read the question wrong and this one was also pretty simple but I did get this one wrong and I need to make sure i don’t make mistakes in the future . Question 21 . . This was another one of the simple mistake that I did though the test and this one was super easy looking back at the question and I am kinda mad at myself that I didn’t do better and get the answer correct because this was a very short sequence and not that complex. . Question 36 . . This question was pretty hard for me and I had a challenging time with this question, it probally took me around 10 minutes to try and understand this question and what was happening and I though that I got itcorrect and figured it out but it wasn’t correct and I got it wrong . Question 38 . . This question was super long and was really difficult for me atleast and I think I need to slow down and make sure I get it correct . Question 39 . . This question was not hard for me and I really understood how to do it I just made a simple mistake and feel really stupid because the robot questions are really easy for me and I have a good understanding of this question I just need to slow down and take my time in order to read the question correct and get the right answer .",
            "url": "https://cubnavarro.github.io/Firstproject/week%2025/2023/03/07/Test-3collageBoard.html",
            "relUrl": "/week%2025/2023/03/07/Test-3collageBoard.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post17": {
            "title": "Unit 2.2 Data Compression, Images",
            "content": "from collections import namedtuple, OrderedDict Color = namedtuple(&#39;RGB&#39;,&#39;red, green, blue&#39;) colors = {} #dict of colors class RGB(Color): def hex_format(self): #Returns color in hex format return &#39;#{:02X}{:02X}{:02X}&#39;.format(self.red,self.green,self.blue) #Color Contants ALICEBLUE = RGB(240, 248, 255) ANTIQUEWHITE = RGB(250, 235, 215) ANTIQUEWHITE1 = RGB(255, 239, 219) ANTIQUEWHITE2 = RGB(238, 223, 204) ANTIQUEWHITE3 = RGB(205, 192, 176) ANTIQUEWHITE4 = RGB(139, 131, 120) AQUA = RGB(0, 255, 255) AQUAMARINE1 = RGB(127, 255, 212) AQUAMARINE2 = RGB(118, 238, 198) AQUAMARINE3 = RGB(102, 205, 170) AQUAMARINE4 = RGB(69, 139, 116) AZURE1 = RGB(240, 255, 255) AZURE2 = RGB(224, 238, 238) AZURE3 = RGB(193, 205, 205) AZURE4 = RGB(131, 139, 139) BANANA = RGB(227, 207, 87) BEIGE = RGB(245, 245, 220) BISQUE1 = RGB(255, 228, 196) BISQUE2 = RGB(238, 213, 183) BISQUE3 = RGB(205, 183, 158) BISQUE4 = RGB(139, 125, 107) BLACK = RGB(0, 0, 0) BLANCHEDALMOND = RGB(255, 235, 205) BLUE = RGB(0, 0, 255) BLUE2 = RGB(0, 0, 238) BLUE3 = RGB(0, 0, 205) BLUE4 = RGB(0, 0, 139) BLUEVIOLET = RGB(138, 43, 226) BRICK = RGB(156, 102, 31) BROWN = RGB(165, 42, 42) BROWN1 = RGB(255, 64, 64) BROWN2 = RGB(238, 59, 59) BROWN3 = RGB(205, 51, 51) BROWN4 = RGB(139, 35, 35) BURLYWOOD = RGB(222, 184, 135) BURLYWOOD1 = RGB(255, 211, 155) BURLYWOOD2 = RGB(238, 197, 145) BURLYWOOD3 = RGB(205, 170, 125) BURLYWOOD4 = RGB(139, 115, 85) BURNTSIENNA = RGB(138, 54, 15) BURNTUMBER = RGB(138, 51, 36) CADETBLUE = RGB(95, 158, 160) CADETBLUE1 = RGB(152, 245, 255) CADETBLUE2 = RGB(142, 229, 238) CADETBLUE3 = RGB(122, 197, 205) CADETBLUE4 = RGB(83, 134, 139) CADMIUMORANGE = RGB(255, 97, 3) CADMIUMYELLOW = RGB(255, 153, 18) CARROT = RGB(237, 145, 33) CHARTREUSE1 = RGB(127, 255, 0) CHARTREUSE2 = RGB(118, 238, 0) CHARTREUSE3 = RGB(102, 205, 0) CHARTREUSE4 = RGB(69, 139, 0) CHOCOLATE = RGB(210, 105, 30) CHOCOLATE1 = RGB(255, 127, 36) CHOCOLATE2 = RGB(238, 118, 33) CHOCOLATE3 = RGB(205, 102, 29) CHOCOLATE4 = RGB(139, 69, 19) COBALT = RGB(61, 89, 171) COBALTGREEN = RGB(61, 145, 64) COLDGREY = RGB(128, 138, 135) CORAL = RGB(255, 127, 80) CORAL1 = RGB(255, 114, 86) CORAL2 = RGB(238, 106, 80) CORAL3 = RGB(205, 91, 69) CORAL4 = RGB(139, 62, 47) CORNFLOWERBLUE = RGB(100, 149, 237) CORNSILK1 = RGB(255, 248, 220) CORNSILK2 = RGB(238, 232, 205) CORNSILK3 = RGB(205, 200, 177) CORNSILK4 = RGB(139, 136, 120) CRIMSON = RGB(220, 20, 60) CYAN2 = RGB(0, 238, 238) CYAN3 = RGB(0, 205, 205) CYAN4 = RGB(0, 139, 139) DARKGOLDENROD = RGB(184, 134, 11) DARKGOLDENROD1 = RGB(255, 185, 15) DARKGOLDENROD2 = RGB(238, 173, 14) DARKGOLDENROD3 = RGB(205, 149, 12) DARKGOLDENROD4 = RGB(139, 101, 8) DARKGRAY = RGB(169, 169, 169) DARKGREEN = RGB(0, 100, 0) DARKKHAKI = RGB(189, 183, 107) DARKOLIVEGREEN = RGB(85, 107, 47) DARKOLIVEGREEN1 = RGB(202, 255, 112) DARKOLIVEGREEN2 = RGB(188, 238, 104) DARKOLIVEGREEN3 = RGB(162, 205, 90) DARKOLIVEGREEN4 = RGB(110, 139, 61) DARKORANGE = RGB(255, 140, 0) DARKORANGE1 = RGB(255, 127, 0) DARKORANGE2 = RGB(238, 118, 0) DARKORANGE3 = RGB(205, 102, 0) DARKORANGE4 = RGB(139, 69, 0) DARKORCHID = RGB(153, 50, 204) DARKORCHID1 = RGB(191, 62, 255) DARKORCHID2 = RGB(178, 58, 238) DARKORCHID3 = RGB(154, 50, 205) DARKORCHID4 = RGB(104, 34, 139) DARKSALMON = RGB(233, 150, 122) DARKSEAGREEN = RGB(143, 188, 143) DARKSEAGREEN1 = RGB(193, 255, 193) DARKSEAGREEN2 = RGB(180, 238, 180) DARKSEAGREEN3 = RGB(155, 205, 155) DARKSEAGREEN4 = RGB(105, 139, 105) DARKSLATEBLUE = RGB(72, 61, 139) DARKSLATEGRAY = RGB(47, 79, 79) DARKSLATEGRAY1 = RGB(151, 255, 255) DARKSLATEGRAY2 = RGB(141, 238, 238) DARKSLATEGRAY3 = RGB(121, 205, 205) DARKSLATEGRAY4 = RGB(82, 139, 139) DARKTURQUOISE = RGB(0, 206, 209) DARKVIOLET = RGB(148, 0, 211) DEEPPINK1 = RGB(255, 20, 147) DEEPPINK2 = RGB(238, 18, 137) DEEPPINK3 = RGB(205, 16, 118) DEEPPINK4 = RGB(139, 10, 80) DEEPSKYBLUE1 = RGB(0, 191, 255) DEEPSKYBLUE2 = RGB(0, 178, 238) DEEPSKYBLUE3 = RGB(0, 154, 205) DEEPSKYBLUE4 = RGB(0, 104, 139) DIMGRAY = RGB(105, 105, 105) DIMGRAY = RGB(105, 105, 105) DODGERBLUE1 = RGB(30, 144, 255) DODGERBLUE2 = RGB(28, 134, 238) DODGERBLUE3 = RGB(24, 116, 205) DODGERBLUE4 = RGB(16, 78, 139) EGGSHELL = RGB(252, 230, 201) EMERALDGREEN = RGB(0, 201, 87) FIREBRICK = RGB(178, 34, 34) FIREBRICK1 = RGB(255, 48, 48) FIREBRICK2 = RGB(238, 44, 44) FIREBRICK3 = RGB(205, 38, 38) FIREBRICK4 = RGB(139, 26, 26) FLESH = RGB(255, 125, 64) FLORALWHITE = RGB(255, 250, 240) FORESTGREEN = RGB(34, 139, 34) GAINSBORO = RGB(220, 220, 220) GHOSTWHITE = RGB(248, 248, 255) GOLD1 = RGB(255, 215, 0) GOLD2 = RGB(238, 201, 0) GOLD3 = RGB(205, 173, 0) GOLD4 = RGB(139, 117, 0) GOLDENROD = RGB(218, 165, 32) GOLDENROD1 = RGB(255, 193, 37) GOLDENROD2 = RGB(238, 180, 34) GOLDENROD3 = RGB(205, 155, 29) GOLDENROD4 = RGB(139, 105, 20) GRAY = RGB(128, 128, 128) GRAY1 = RGB(3, 3, 3) GRAY10 = RGB(26, 26, 26) GRAY11 = RGB(28, 28, 28) GRAY12 = RGB(31, 31, 31) GRAY13 = RGB(33, 33, 33) GRAY14 = RGB(36, 36, 36) GRAY15 = RGB(38, 38, 38) GRAY16 = RGB(41, 41, 41) GRAY17 = RGB(43, 43, 43) GRAY18 = RGB(46, 46, 46) GRAY19 = RGB(48, 48, 48) GRAY2 = RGB(5, 5, 5) GRAY20 = RGB(51, 51, 51) GRAY21 = RGB(54, 54, 54) GRAY22 = RGB(56, 56, 56) GRAY23 = RGB(59, 59, 59) GRAY24 = RGB(61, 61, 61) GRAY25 = RGB(64, 64, 64) GRAY26 = RGB(66, 66, 66) GRAY27 = RGB(69, 69, 69) GRAY28 = RGB(71, 71, 71) GRAY29 = RGB(74, 74, 74) GRAY3 = RGB(8, 8, 8) GRAY30 = RGB(77, 77, 77) GRAY31 = RGB(79, 79, 79) GRAY32 = RGB(82, 82, 82) GRAY33 = RGB(84, 84, 84) GRAY34 = RGB(87, 87, 87) GRAY35 = RGB(89, 89, 89) GRAY36 = RGB(92, 92, 92) GRAY37 = RGB(94, 94, 94) GRAY38 = RGB(97, 97, 97) GRAY39 = RGB(99, 99, 99) GRAY4 = RGB(10, 10, 10) GRAY40 = RGB(102, 102, 102) GRAY42 = RGB(107, 107, 107) GRAY43 = RGB(110, 110, 110) GRAY44 = RGB(112, 112, 112) GRAY45 = RGB(115, 115, 115) GRAY46 = RGB(117, 117, 117) GRAY47 = RGB(120, 120, 120) GRAY48 = RGB(122, 122, 122) GRAY49 = RGB(125, 125, 125) GRAY5 = RGB(13, 13, 13) GRAY50 = RGB(127, 127, 127) GRAY51 = RGB(130, 130, 130) GRAY52 = RGB(133, 133, 133) GRAY53 = RGB(135, 135, 135) GRAY54 = RGB(138, 138, 138) GRAY55 = RGB(140, 140, 140) GRAY56 = RGB(143, 143, 143) GRAY57 = RGB(145, 145, 145) GRAY58 = RGB(148, 148, 148) GRAY59 = RGB(150, 150, 150) GRAY6 = RGB(15, 15, 15) GRAY60 = RGB(153, 153, 153) GRAY61 = RGB(156, 156, 156) GRAY62 = RGB(158, 158, 158) GRAY63 = RGB(161, 161, 161) GRAY64 = RGB(163, 163, 163) GRAY65 = RGB(166, 166, 166) GRAY66 = RGB(168, 168, 168) GRAY67 = RGB(171, 171, 171) GRAY68 = RGB(173, 173, 173) GRAY69 = RGB(176, 176, 176) GRAY7 = RGB(18, 18, 18) GRAY70 = RGB(179, 179, 179) GRAY71 = RGB(181, 181, 181) GRAY72 = RGB(184, 184, 184) GRAY73 = RGB(186, 186, 186) GRAY74 = RGB(189, 189, 189) GRAY75 = RGB(191, 191, 191) GRAY76 = RGB(194, 194, 194) GRAY77 = RGB(196, 196, 196) GRAY78 = RGB(199, 199, 199) GRAY79 = RGB(201, 201, 201) GRAY8 = RGB(20, 20, 20) GRAY80 = RGB(204, 204, 204) GRAY81 = RGB(207, 207, 207) GRAY82 = RGB(209, 209, 209) GRAY83 = RGB(212, 212, 212) GRAY84 = RGB(214, 214, 214) GRAY85 = RGB(217, 217, 217) GRAY86 = RGB(219, 219, 219) GRAY87 = RGB(222, 222, 222) GRAY88 = RGB(224, 224, 224) GRAY89 = RGB(227, 227, 227) GRAY9 = RGB(23, 23, 23) GRAY90 = RGB(229, 229, 229) GRAY91 = RGB(232, 232, 232) GRAY92 = RGB(235, 235, 235) GRAY93 = RGB(237, 237, 237) GRAY94 = RGB(240, 240, 240) GRAY95 = RGB(242, 242, 242) GRAY97 = RGB(247, 247, 247) GRAY98 = RGB(250, 250, 250) GRAY99 = RGB(252, 252, 252) GREEN = RGB(0, 128, 0) GREEN1 = RGB(0, 255, 0) GREEN2 = RGB(0, 238, 0) GREEN3 = RGB(0, 205, 0) GREEN4 = RGB(0, 139, 0) GREENYELLOW = RGB(173, 255, 47) HONEYDEW1 = RGB(240, 255, 240) HONEYDEW2 = RGB(224, 238, 224) HONEYDEW3 = RGB(193, 205, 193) HONEYDEW4 = RGB(131, 139, 131) HOTPINK = RGB(255, 105, 180) HOTPINK1 = RGB(255, 110, 180) HOTPINK2 = RGB(238, 106, 167) HOTPINK3 = RGB(205, 96, 144) HOTPINK4 = RGB(139, 58, 98) INDIANRED = RGB(176, 23, 31) INDIANRED = RGB(205, 92, 92) INDIANRED1 = RGB(255, 106, 106) INDIANRED2 = RGB(238, 99, 99) INDIANRED3 = RGB(205, 85, 85) INDIANRED4 = RGB(139, 58, 58) INDIGO = RGB(75, 0, 130) IVORY1 = RGB(255, 255, 240) IVORY2 = RGB(238, 238, 224) IVORY3 = RGB(205, 205, 193) IVORY4 = RGB(139, 139, 131) IVORYBLACK = RGB(41, 36, 33) KHAKI = RGB(240, 230, 140) KHAKI1 = RGB(255, 246, 143) KHAKI2 = RGB(238, 230, 133) KHAKI3 = RGB(205, 198, 115) KHAKI4 = RGB(139, 134, 78) LAVENDER = RGB(230, 230, 250) LAVENDERBLUSH1 = RGB(255, 240, 245) LAVENDERBLUSH2 = RGB(238, 224, 229) LAVENDERBLUSH3 = RGB(205, 193, 197) LAVENDERBLUSH4 = RGB(139, 131, 134) LAWNGREEN = RGB(124, 252, 0) LEMONCHIFFON1 = RGB(255, 250, 205) LEMONCHIFFON2 = RGB(238, 233, 191) LEMONCHIFFON3 = RGB(205, 201, 165) LEMONCHIFFON4 = RGB(139, 137, 112) LIGHTBLUE = RGB(173, 216, 230) LIGHTBLUE1 = RGB(191, 239, 255) LIGHTBLUE2 = RGB(178, 223, 238) LIGHTBLUE3 = RGB(154, 192, 205) LIGHTBLUE4 = RGB(104, 131, 139) LIGHTCORAL = RGB(240, 128, 128) LIGHTCYAN1 = RGB(224, 255, 255) LIGHTCYAN2 = RGB(209, 238, 238) LIGHTCYAN3 = RGB(180, 205, 205) LIGHTCYAN4 = RGB(122, 139, 139) LIGHTGOLDENROD1 = RGB(255, 236, 139) LIGHTGOLDENROD2 = RGB(238, 220, 130) LIGHTGOLDENROD3 = RGB(205, 190, 112) LIGHTGOLDENROD4 = RGB(139, 129, 76) LIGHTGOLDENRODYELLOW = RGB(250, 250, 210) LIGHTGREY = RGB(211, 211, 211) LIGHTPINK = RGB(255, 182, 193) LIGHTPINK1 = RGB(255, 174, 185) LIGHTPINK2 = RGB(238, 162, 173) LIGHTPINK3 = RGB(205, 140, 149) LIGHTPINK4 = RGB(139, 95, 101) LIGHTSALMON1 = RGB(255, 160, 122) LIGHTSALMON2 = RGB(238, 149, 114) LIGHTSALMON3 = RGB(205, 129, 98) LIGHTSALMON4 = RGB(139, 87, 66) LIGHTSEAGREEN = RGB(32, 178, 170) LIGHTSKYBLUE = RGB(135, 206, 250) LIGHTSKYBLUE1 = RGB(176, 226, 255) LIGHTSKYBLUE2 = RGB(164, 211, 238) LIGHTSKYBLUE3 = RGB(141, 182, 205) LIGHTSKYBLUE4 = RGB(96, 123, 139) LIGHTSLATEBLUE = RGB(132, 112, 255) LIGHTSLATEGRAY = RGB(119, 136, 153) LIGHTSTEELBLUE = RGB(176, 196, 222) LIGHTSTEELBLUE1 = RGB(202, 225, 255) LIGHTSTEELBLUE2 = RGB(188, 210, 238) LIGHTSTEELBLUE3 = RGB(162, 181, 205) LIGHTSTEELBLUE4 = RGB(110, 123, 139) LIGHTYELLOW1 = RGB(255, 255, 224) LIGHTYELLOW2 = RGB(238, 238, 209) LIGHTYELLOW3 = RGB(205, 205, 180) LIGHTYELLOW4 = RGB(139, 139, 122) LIMEGREEN = RGB(50, 205, 50) LINEN = RGB(250, 240, 230) MAGENTA = RGB(255, 0, 255) MAGENTA2 = RGB(238, 0, 238) MAGENTA3 = RGB(205, 0, 205) MAGENTA4 = RGB(139, 0, 139) MANGANESEBLUE = RGB(3, 168, 158) MAROON = RGB(128, 0, 0) MAROON1 = RGB(255, 52, 179) MAROON2 = RGB(238, 48, 167) MAROON3 = RGB(205, 41, 144) MAROON4 = RGB(139, 28, 98) MEDIUMORCHID = RGB(186, 85, 211) MEDIUMORCHID1 = RGB(224, 102, 255) MEDIUMORCHID2 = RGB(209, 95, 238) MEDIUMORCHID3 = RGB(180, 82, 205) MEDIUMORCHID4 = RGB(122, 55, 139) MEDIUMPURPLE = RGB(147, 112, 219) MEDIUMPURPLE1 = RGB(171, 130, 255) MEDIUMPURPLE2 = RGB(159, 121, 238) MEDIUMPURPLE3 = RGB(137, 104, 205) MEDIUMPURPLE4 = RGB(93, 71, 139) MEDIUMSEAGREEN = RGB(60, 179, 113) MEDIUMSLATEBLUE = RGB(123, 104, 238) MEDIUMSPRINGGREEN = RGB(0, 250, 154) MEDIUMTURQUOISE = RGB(72, 209, 204) MEDIUMVIOLETRED = RGB(199, 21, 133) MELON = RGB(227, 168, 105) MIDNIGHTBLUE = RGB(25, 25, 112) MINT = RGB(189, 252, 201) MINTCREAM = RGB(245, 255, 250) MISTYROSE1 = RGB(255, 228, 225) MISTYROSE2 = RGB(238, 213, 210) MISTYROSE3 = RGB(205, 183, 181) MISTYROSE4 = RGB(139, 125, 123) MOCCASIN = RGB(255, 228, 181) NAVAJOWHITE1 = RGB(255, 222, 173) NAVAJOWHITE2 = RGB(238, 207, 161) NAVAJOWHITE3 = RGB(205, 179, 139) NAVAJOWHITE4 = RGB(139, 121, 94) NAVY = RGB(0, 0, 128) OLDLACE = RGB(253, 245, 230) OLIVE = RGB(128, 128, 0) OLIVEDRAB = RGB(107, 142, 35) OLIVEDRAB1 = RGB(192, 255, 62) OLIVEDRAB2 = RGB(179, 238, 58) OLIVEDRAB3 = RGB(154, 205, 50) OLIVEDRAB4 = RGB(105, 139, 34) ORANGE = RGB(255, 128, 0) ORANGE1 = RGB(255, 165, 0) ORANGE2 = RGB(238, 154, 0) ORANGE3 = RGB(205, 133, 0) ORANGE4 = RGB(139, 90, 0) ORANGERED1 = RGB(255, 69, 0) ORANGERED2 = RGB(238, 64, 0) ORANGERED3 = RGB(205, 55, 0) ORANGERED4 = RGB(139, 37, 0) ORCHID = RGB(218, 112, 214) ORCHID1 = RGB(255, 131, 250) ORCHID2 = RGB(238, 122, 233) ORCHID3 = RGB(205, 105, 201) ORCHID4 = RGB(139, 71, 137) PALEGOLDENROD = RGB(238, 232, 170) PALEGREEN = RGB(152, 251, 152) PALEGREEN1 = RGB(154, 255, 154) PALEGREEN2 = RGB(144, 238, 144) PALEGREEN3 = RGB(124, 205, 124) PALEGREEN4 = RGB(84, 139, 84) PALETURQUOISE1 = RGB(187, 255, 255) PALETURQUOISE2 = RGB(174, 238, 238) PALETURQUOISE3 = RGB(150, 205, 205) PALETURQUOISE4 = RGB(102, 139, 139) PALEVIOLETRED = RGB(219, 112, 147) PALEVIOLETRED1 = RGB(255, 130, 171) PALEVIOLETRED2 = RGB(238, 121, 159) PALEVIOLETRED3 = RGB(205, 104, 137) PALEVIOLETRED4 = RGB(139, 71, 93) PAPAYAWHIP = RGB(255, 239, 213) PEACHPUFF1 = RGB(255, 218, 185) PEACHPUFF2 = RGB(238, 203, 173) PEACHPUFF3 = RGB(205, 175, 149) PEACHPUFF4 = RGB(139, 119, 101) PEACOCK = RGB(51, 161, 201) PINK = RGB(255, 192, 203) PINK1 = RGB(255, 181, 197) PINK2 = RGB(238, 169, 184) PINK3 = RGB(205, 145, 158) PINK4 = RGB(139, 99, 108) PLUM = RGB(221, 160, 221) PLUM1 = RGB(255, 187, 255) PLUM2 = RGB(238, 174, 238) PLUM3 = RGB(205, 150, 205) PLUM4 = RGB(139, 102, 139) POWDERBLUE = RGB(176, 224, 230) PURPLE = RGB(128, 0, 128) PURPLE1 = RGB(155, 48, 255) PURPLE2 = RGB(145, 44, 238) PURPLE3 = RGB(125, 38, 205) PURPLE4 = RGB(85, 26, 139) RASPBERRY = RGB(135, 38, 87) RAWSIENNA = RGB(199, 97, 20) RED1 = RGB(255, 0, 0) RED2 = RGB(238, 0, 0) RED3 = RGB(205, 0, 0) RED4 = RGB(139, 0, 0) ROSYBROWN = RGB(188, 143, 143) ROSYBROWN1 = RGB(255, 193, 193) ROSYBROWN2 = RGB(238, 180, 180) ROSYBROWN3 = RGB(205, 155, 155) ROSYBROWN4 = RGB(139, 105, 105) ROYALBLUE = RGB(65, 105, 225) ROYALBLUE1 = RGB(72, 118, 255) ROYALBLUE2 = RGB(67, 110, 238) ROYALBLUE3 = RGB(58, 95, 205) ROYALBLUE4 = RGB(39, 64, 139) SALMON = RGB(250, 128, 114) SALMON1 = RGB(255, 140, 105) SALMON2 = RGB(238, 130, 98) SALMON3 = RGB(205, 112, 84) SALMON4 = RGB(139, 76, 57) SANDYBROWN = RGB(244, 164, 96) SAPGREEN = RGB(48, 128, 20) SEAGREEN1 = RGB(84, 255, 159) SEAGREEN2 = RGB(78, 238, 148) SEAGREEN3 = RGB(67, 205, 128) SEAGREEN4 = RGB(46, 139, 87) SEASHELL1 = RGB(255, 245, 238) SEASHELL2 = RGB(238, 229, 222) SEASHELL3 = RGB(205, 197, 191) SEASHELL4 = RGB(139, 134, 130) SEPIA = RGB(94, 38, 18) SGIBEET = RGB(142, 56, 142) SGIBRIGHTGRAY = RGB(197, 193, 170) SGICHARTREUSE = RGB(113, 198, 113) SGIDARKGRAY = RGB(85, 85, 85) SGIGRAY12 = RGB(30, 30, 30) SGIGRAY16 = RGB(40, 40, 40) SGIGRAY32 = RGB(81, 81, 81) SGIGRAY36 = RGB(91, 91, 91) SGIGRAY52 = RGB(132, 132, 132) SGIGRAY56 = RGB(142, 142, 142) SGIGRAY72 = RGB(183, 183, 183) SGIGRAY76 = RGB(193, 193, 193) SGIGRAY92 = RGB(234, 234, 234) SGIGRAY96 = RGB(244, 244, 244) SGILIGHTBLUE = RGB(125, 158, 192) SGILIGHTGRAY = RGB(170, 170, 170) SGIOLIVEDRAB = RGB(142, 142, 56) SGISALMON = RGB(198, 113, 113) SGISLATEBLUE = RGB(113, 113, 198) SGITEAL = RGB(56, 142, 142) SIENNA = RGB(160, 82, 45) SIENNA1 = RGB(255, 130, 71) SIENNA2 = RGB(238, 121, 66) SIENNA3 = RGB(205, 104, 57) SIENNA4 = RGB(139, 71, 38) SILVER = RGB(192, 192, 192) SKYBLUE = RGB(135, 206, 235) SKYBLUE1 = RGB(135, 206, 255) SKYBLUE2 = RGB(126, 192, 238) SKYBLUE3 = RGB(108, 166, 205) SKYBLUE4 = RGB(74, 112, 139) SLATEBLUE = RGB(106, 90, 205) SLATEBLUE1 = RGB(131, 111, 255) SLATEBLUE2 = RGB(122, 103, 238) SLATEBLUE3 = RGB(105, 89, 205) SLATEBLUE4 = RGB(71, 60, 139) SLATEGRAY = RGB(112, 128, 144) SLATEGRAY1 = RGB(198, 226, 255) SLATEGRAY2 = RGB(185, 211, 238) SLATEGRAY3 = RGB(159, 182, 205) SLATEGRAY4 = RGB(108, 123, 139) SNOW1 = RGB(255, 250, 250) SNOW2 = RGB(238, 233, 233) SNOW3 = RGB(205, 201, 201) SNOW4 = RGB(139, 137, 137) SPRINGGREEN = RGB(0, 255, 127) SPRINGGREEN1 = RGB(0, 238, 118) SPRINGGREEN2 = RGB(0, 205, 102) SPRINGGREEN3 = RGB(0, 139, 69) STEELBLUE = RGB(70, 130, 180) STEELBLUE1 = RGB(99, 184, 255) STEELBLUE2 = RGB(92, 172, 238) STEELBLUE3 = RGB(79, 148, 205) STEELBLUE4 = RGB(54, 100, 139) TAN = RGB(210, 180, 140) TAN1 = RGB(255, 165, 79) TAN2 = RGB(238, 154, 73) TAN3 = RGB(205, 133, 63) TAN4 = RGB(139, 90, 43) TEAL = RGB(0, 128, 128) THISTLE = RGB(216, 191, 216) THISTLE1 = RGB(255, 225, 255) THISTLE2 = RGB(238, 210, 238) THISTLE3 = RGB(205, 181, 205) THISTLE4 = RGB(139, 123, 139) TOMATO1 = RGB(255, 99, 71) TOMATO2 = RGB(238, 92, 66) TOMATO3 = RGB(205, 79, 57) TOMATO4 = RGB(139, 54, 38) TURQUOISE = RGB(64, 224, 208) TURQUOISE1 = RGB(0, 245, 255) TURQUOISE2 = RGB(0, 229, 238) TURQUOISE3 = RGB(0, 197, 205) TURQUOISE4 = RGB(0, 134, 139) TURQUOISEBLUE = RGB(0, 199, 140) VIOLET = RGB(238, 130, 238) VIOLETRED = RGB(208, 32, 144) VIOLETRED1 = RGB(255, 62, 150) VIOLETRED2 = RGB(238, 58, 140) VIOLETRED3 = RGB(205, 50, 120) VIOLETRED4 = RGB(139, 34, 82) WARMGREY = RGB(128, 128, 105) WHEAT = RGB(245, 222, 179) WHEAT1 = RGB(255, 231, 186) WHEAT2 = RGB(238, 216, 174) WHEAT3 = RGB(205, 186, 150) WHEAT4 = RGB(139, 126, 102) WHITE = RGB(255, 255, 255) WHITESMOKE = RGB(245, 245, 245) WHITESMOKE = RGB(245, 245, 245) YELLOW1 = RGB(255, 255, 0) YELLOW2 = RGB(238, 238, 0) YELLOW3 = RGB(205, 205, 0) YELLOW4 = RGB(139, 139, 0) #Add colors to colors dictionary colors[&#39;aliceblue&#39;] = ALICEBLUE colors[&#39;antiquewhite&#39;] = ANTIQUEWHITE colors[&#39;antiquewhite1&#39;] = ANTIQUEWHITE1 colors[&#39;antiquewhite2&#39;] = ANTIQUEWHITE2 colors[&#39;antiquewhite3&#39;] = ANTIQUEWHITE3 colors[&#39;antiquewhite4&#39;] = ANTIQUEWHITE4 colors[&#39;aqua&#39;] = AQUA colors[&#39;aquamarine1&#39;] = AQUAMARINE1 colors[&#39;aquamarine2&#39;] = AQUAMARINE2 colors[&#39;aquamarine3&#39;] = AQUAMARINE3 colors[&#39;aquamarine4&#39;] = AQUAMARINE4 colors[&#39;azure1&#39;] = AZURE1 colors[&#39;azure2&#39;] = AZURE2 colors[&#39;azure3&#39;] = AZURE3 colors[&#39;azure4&#39;] = AZURE4 colors[&#39;banana&#39;] = BANANA colors[&#39;beige&#39;] = BEIGE colors[&#39;bisque1&#39;] = BISQUE1 colors[&#39;bisque2&#39;] = BISQUE2 colors[&#39;bisque3&#39;] = BISQUE3 colors[&#39;bisque4&#39;] = BISQUE4 colors[&#39;black&#39;] = BLACK colors[&#39;blanchedalmond&#39;] = BLANCHEDALMOND colors[&#39;blue&#39;] = BLUE colors[&#39;blue2&#39;] = BLUE2 colors[&#39;blue3&#39;] = BLUE3 colors[&#39;blue4&#39;] = BLUE4 colors[&#39;blueviolet&#39;] = BLUEVIOLET colors[&#39;brick&#39;] = BRICK colors[&#39;brown&#39;] = BROWN colors[&#39;brown1&#39;] = BROWN1 colors[&#39;brown2&#39;] = BROWN2 colors[&#39;brown3&#39;] = BROWN3 colors[&#39;brown4&#39;] = BROWN4 colors[&#39;burlywood&#39;] = BURLYWOOD colors[&#39;burlywood1&#39;] = BURLYWOOD1 colors[&#39;burlywood2&#39;] = BURLYWOOD2 colors[&#39;burlywood3&#39;] = BURLYWOOD3 colors[&#39;burlywood4&#39;] = BURLYWOOD4 colors[&#39;burntsienna&#39;] = BURNTSIENNA colors[&#39;burntumber&#39;] = BURNTUMBER colors[&#39;cadetblue&#39;] = CADETBLUE colors[&#39;cadetblue1&#39;] = CADETBLUE1 colors[&#39;cadetblue2&#39;] = CADETBLUE2 colors[&#39;cadetblue3&#39;] = CADETBLUE3 colors[&#39;cadetblue4&#39;] = CADETBLUE4 colors[&#39;cadmiumorange&#39;] = CADMIUMORANGE colors[&#39;cadmiumyellow&#39;] = CADMIUMYELLOW colors[&#39;carrot&#39;] = CARROT colors[&#39;chartreuse1&#39;] = CHARTREUSE1 colors[&#39;chartreuse2&#39;] = CHARTREUSE2 colors[&#39;chartreuse3&#39;] = CHARTREUSE3 colors[&#39;chartreuse4&#39;] = CHARTREUSE4 colors[&#39;chocolate&#39;] = CHOCOLATE colors[&#39;chocolate1&#39;] = CHOCOLATE1 colors[&#39;chocolate2&#39;] = CHOCOLATE2 colors[&#39;chocolate3&#39;] = CHOCOLATE3 colors[&#39;chocolate4&#39;] = CHOCOLATE4 colors[&#39;cobalt&#39;] = COBALT colors[&#39;cobaltgreen&#39;] = COBALTGREEN colors[&#39;coldgrey&#39;] = COLDGREY colors[&#39;coral&#39;] = CORAL colors[&#39;coral1&#39;] = CORAL1 colors[&#39;coral2&#39;] = CORAL2 colors[&#39;coral3&#39;] = CORAL3 colors[&#39;coral4&#39;] = CORAL4 colors[&#39;cornflowerblue&#39;] = CORNFLOWERBLUE colors[&#39;cornsilk1&#39;] = CORNSILK1 colors[&#39;cornsilk2&#39;] = CORNSILK2 colors[&#39;cornsilk3&#39;] = CORNSILK3 colors[&#39;cornsilk4&#39;] = CORNSILK4 colors[&#39;crimson&#39;] = CRIMSON colors[&#39;cyan2&#39;] = CYAN2 colors[&#39;cyan3&#39;] = CYAN3 colors[&#39;cyan4&#39;] = CYAN4 colors[&#39;darkgoldenrod&#39;] = DARKGOLDENROD colors[&#39;darkgoldenrod1&#39;] = DARKGOLDENROD1 colors[&#39;darkgoldenrod2&#39;] = DARKGOLDENROD2 colors[&#39;darkgoldenrod3&#39;] = DARKGOLDENROD3 colors[&#39;darkgoldenrod4&#39;] = DARKGOLDENROD4 colors[&#39;darkgray&#39;] = DARKGRAY colors[&#39;darkgreen&#39;] = DARKGREEN colors[&#39;darkkhaki&#39;] = DARKKHAKI colors[&#39;darkolivegreen&#39;] = DARKOLIVEGREEN colors[&#39;darkolivegreen1&#39;] = DARKOLIVEGREEN1 colors[&#39;darkolivegreen2&#39;] = DARKOLIVEGREEN2 colors[&#39;darkolivegreen3&#39;] = DARKOLIVEGREEN3 colors[&#39;darkolivegreen4&#39;] = DARKOLIVEGREEN4 colors[&#39;darkorange&#39;] = DARKORANGE colors[&#39;darkorange1&#39;] = DARKORANGE1 colors[&#39;darkorange2&#39;] = DARKORANGE2 colors[&#39;darkorange3&#39;] = DARKORANGE3 colors[&#39;darkorange4&#39;] = DARKORANGE4 colors[&#39;darkorchid&#39;] = DARKORCHID colors[&#39;darkorchid1&#39;] = DARKORCHID1 colors[&#39;darkorchid2&#39;] = DARKORCHID2 colors[&#39;darkorchid3&#39;] = DARKORCHID3 colors[&#39;darkorchid4&#39;] = DARKORCHID4 colors[&#39;darksalmon&#39;] = DARKSALMON colors[&#39;darkseagreen&#39;] = DARKSEAGREEN colors[&#39;darkseagreen1&#39;] = DARKSEAGREEN1 colors[&#39;darkseagreen2&#39;] = DARKSEAGREEN2 colors[&#39;darkseagreen3&#39;] = DARKSEAGREEN3 colors[&#39;darkseagreen4&#39;] = DARKSEAGREEN4 colors[&#39;darkslateblue&#39;] = DARKSLATEBLUE colors[&#39;darkslategray&#39;] = DARKSLATEGRAY colors[&#39;darkslategray1&#39;] = DARKSLATEGRAY1 colors[&#39;darkslategray2&#39;] = DARKSLATEGRAY2 colors[&#39;darkslategray3&#39;] = DARKSLATEGRAY3 colors[&#39;darkslategray4&#39;] = DARKSLATEGRAY4 colors[&#39;darkturquoise&#39;] = DARKTURQUOISE colors[&#39;darkviolet&#39;] = DARKVIOLET colors[&#39;deeppink1&#39;] = DEEPPINK1 colors[&#39;deeppink2&#39;] = DEEPPINK2 colors[&#39;deeppink3&#39;] = DEEPPINK3 colors[&#39;deeppink4&#39;] = DEEPPINK4 colors[&#39;deepskyblue1&#39;] = DEEPSKYBLUE1 colors[&#39;deepskyblue2&#39;] = DEEPSKYBLUE2 colors[&#39;deepskyblue3&#39;] = DEEPSKYBLUE3 colors[&#39;deepskyblue4&#39;] = DEEPSKYBLUE4 colors[&#39;dimgray&#39;] = DIMGRAY colors[&#39;dimgray&#39;] = DIMGRAY colors[&#39;dodgerblue1&#39;] = DODGERBLUE1 colors[&#39;dodgerblue2&#39;] = DODGERBLUE2 colors[&#39;dodgerblue3&#39;] = DODGERBLUE3 colors[&#39;dodgerblue4&#39;] = DODGERBLUE4 colors[&#39;eggshell&#39;] = EGGSHELL colors[&#39;emeraldgreen&#39;] = EMERALDGREEN colors[&#39;firebrick&#39;] = FIREBRICK colors[&#39;firebrick1&#39;] = FIREBRICK1 colors[&#39;firebrick2&#39;] = FIREBRICK2 colors[&#39;firebrick3&#39;] = FIREBRICK3 colors[&#39;firebrick4&#39;] = FIREBRICK4 colors[&#39;flesh&#39;] = FLESH colors[&#39;floralwhite&#39;] = FLORALWHITE colors[&#39;forestgreen&#39;] = FORESTGREEN colors[&#39;gainsboro&#39;] = GAINSBORO colors[&#39;ghostwhite&#39;] = GHOSTWHITE colors[&#39;gold1&#39;] = GOLD1 colors[&#39;gold2&#39;] = GOLD2 colors[&#39;gold3&#39;] = GOLD3 colors[&#39;gold4&#39;] = GOLD4 colors[&#39;goldenrod&#39;] = GOLDENROD colors[&#39;goldenrod1&#39;] = GOLDENROD1 colors[&#39;goldenrod2&#39;] = GOLDENROD2 colors[&#39;goldenrod3&#39;] = GOLDENROD3 colors[&#39;goldenrod4&#39;] = GOLDENROD4 colors[&#39;gray&#39;] = GRAY colors[&#39;gray1&#39;] = GRAY1 colors[&#39;gray10&#39;] = GRAY10 colors[&#39;gray11&#39;] = GRAY11 colors[&#39;gray12&#39;] = GRAY12 colors[&#39;gray13&#39;] = GRAY13 colors[&#39;gray14&#39;] = GRAY14 colors[&#39;gray15&#39;] = GRAY15 colors[&#39;gray16&#39;] = GRAY16 colors[&#39;gray17&#39;] = GRAY17 colors[&#39;gray18&#39;] = GRAY18 colors[&#39;gray19&#39;] = GRAY19 colors[&#39;gray2&#39;] = GRAY2 colors[&#39;gray20&#39;] = GRAY20 colors[&#39;gray21&#39;] = GRAY21 colors[&#39;gray22&#39;] = GRAY22 colors[&#39;gray23&#39;] = GRAY23 colors[&#39;gray24&#39;] = GRAY24 colors[&#39;gray25&#39;] = GRAY25 colors[&#39;gray26&#39;] = GRAY26 colors[&#39;gray27&#39;] = GRAY27 colors[&#39;gray28&#39;] = GRAY28 colors[&#39;gray29&#39;] = GRAY29 colors[&#39;gray3&#39;] = GRAY3 colors[&#39;gray30&#39;] = GRAY30 colors[&#39;gray31&#39;] = GRAY31 colors[&#39;gray32&#39;] = GRAY32 colors[&#39;gray33&#39;] = GRAY33 colors[&#39;gray34&#39;] = GRAY34 colors[&#39;gray35&#39;] = GRAY35 colors[&#39;gray36&#39;] = GRAY36 colors[&#39;gray37&#39;] = GRAY37 colors[&#39;gray38&#39;] = GRAY38 colors[&#39;gray39&#39;] = GRAY39 colors[&#39;gray4&#39;] = GRAY4 colors[&#39;gray40&#39;] = GRAY40 colors[&#39;gray42&#39;] = GRAY42 colors[&#39;gray43&#39;] = GRAY43 colors[&#39;gray44&#39;] = GRAY44 colors[&#39;gray45&#39;] = GRAY45 colors[&#39;gray46&#39;] = GRAY46 colors[&#39;gray47&#39;] = GRAY47 colors[&#39;gray48&#39;] = GRAY48 colors[&#39;gray49&#39;] = GRAY49 colors[&#39;gray5&#39;] = GRAY5 colors[&#39;gray50&#39;] = GRAY50 colors[&#39;gray51&#39;] = GRAY51 colors[&#39;gray52&#39;] = GRAY52 colors[&#39;gray53&#39;] = GRAY53 colors[&#39;gray54&#39;] = GRAY54 colors[&#39;gray55&#39;] = GRAY55 colors[&#39;gray56&#39;] = GRAY56 colors[&#39;gray57&#39;] = GRAY57 colors[&#39;gray58&#39;] = GRAY58 colors[&#39;gray59&#39;] = GRAY59 colors[&#39;gray6&#39;] = GRAY6 colors[&#39;gray60&#39;] = GRAY60 colors[&#39;gray61&#39;] = GRAY61 colors[&#39;gray62&#39;] = GRAY62 colors[&#39;gray63&#39;] = GRAY63 colors[&#39;gray64&#39;] = GRAY64 colors[&#39;gray65&#39;] = GRAY65 colors[&#39;gray66&#39;] = GRAY66 colors[&#39;gray67&#39;] = GRAY67 colors[&#39;gray68&#39;] = GRAY68 colors[&#39;gray69&#39;] = GRAY69 colors[&#39;gray7&#39;] = GRAY7 colors[&#39;gray70&#39;] = GRAY70 colors[&#39;gray71&#39;] = GRAY71 colors[&#39;gray72&#39;] = GRAY72 colors[&#39;gray73&#39;] = GRAY73 colors[&#39;gray74&#39;] = GRAY74 colors[&#39;gray75&#39;] = GRAY75 colors[&#39;gray76&#39;] = GRAY76 colors[&#39;gray77&#39;] = GRAY77 colors[&#39;gray78&#39;] = GRAY78 colors[&#39;gray79&#39;] = GRAY79 colors[&#39;gray8&#39;] = GRAY8 colors[&#39;gray80&#39;] = GRAY80 colors[&#39;gray81&#39;] = GRAY81 colors[&#39;gray82&#39;] = GRAY82 colors[&#39;gray83&#39;] = GRAY83 colors[&#39;gray84&#39;] = GRAY84 colors[&#39;gray85&#39;] = GRAY85 colors[&#39;gray86&#39;] = GRAY86 colors[&#39;gray87&#39;] = GRAY87 colors[&#39;gray88&#39;] = GRAY88 colors[&#39;gray89&#39;] = GRAY89 colors[&#39;gray9&#39;] = GRAY9 colors[&#39;gray90&#39;] = GRAY90 colors[&#39;gray91&#39;] = GRAY91 colors[&#39;gray92&#39;] = GRAY92 colors[&#39;gray93&#39;] = GRAY93 colors[&#39;gray94&#39;] = GRAY94 colors[&#39;gray95&#39;] = GRAY95 colors[&#39;gray97&#39;] = GRAY97 colors[&#39;gray98&#39;] = GRAY98 colors[&#39;gray99&#39;] = GRAY99 colors[&#39;green&#39;] = GREEN colors[&#39;green1&#39;] = GREEN1 colors[&#39;green2&#39;] = GREEN2 colors[&#39;green3&#39;] = GREEN3 colors[&#39;green4&#39;] = GREEN4 colors[&#39;greenyellow&#39;] = GREENYELLOW colors[&#39;honeydew1&#39;] = HONEYDEW1 colors[&#39;honeydew2&#39;] = HONEYDEW2 colors[&#39;honeydew3&#39;] = HONEYDEW3 colors[&#39;honeydew4&#39;] = HONEYDEW4 colors[&#39;hotpink&#39;] = HOTPINK colors[&#39;hotpink1&#39;] = HOTPINK1 colors[&#39;hotpink2&#39;] = HOTPINK2 colors[&#39;hotpink3&#39;] = HOTPINK3 colors[&#39;hotpink4&#39;] = HOTPINK4 colors[&#39;indianred&#39;] = INDIANRED colors[&#39;indianred&#39;] = INDIANRED colors[&#39;indianred1&#39;] = INDIANRED1 colors[&#39;indianred2&#39;] = INDIANRED2 colors[&#39;indianred3&#39;] = INDIANRED3 colors[&#39;indianred4&#39;] = INDIANRED4 colors[&#39;indigo&#39;] = INDIGO colors[&#39;ivory1&#39;] = IVORY1 colors[&#39;ivory2&#39;] = IVORY2 colors[&#39;ivory3&#39;] = IVORY3 colors[&#39;ivory4&#39;] = IVORY4 colors[&#39;ivoryblack&#39;] = IVORYBLACK colors[&#39;khaki&#39;] = KHAKI colors[&#39;khaki1&#39;] = KHAKI1 colors[&#39;khaki2&#39;] = KHAKI2 colors[&#39;khaki3&#39;] = KHAKI3 colors[&#39;khaki4&#39;] = KHAKI4 colors[&#39;lavender&#39;] = LAVENDER colors[&#39;lavenderblush1&#39;] = LAVENDERBLUSH1 colors[&#39;lavenderblush2&#39;] = LAVENDERBLUSH2 colors[&#39;lavenderblush3&#39;] = LAVENDERBLUSH3 colors[&#39;lavenderblush4&#39;] = LAVENDERBLUSH4 colors[&#39;lawngreen&#39;] = LAWNGREEN colors[&#39;lemonchiffon1&#39;] = LEMONCHIFFON1 colors[&#39;lemonchiffon2&#39;] = LEMONCHIFFON2 colors[&#39;lemonchiffon3&#39;] = LEMONCHIFFON3 colors[&#39;lemonchiffon4&#39;] = LEMONCHIFFON4 colors[&#39;lightblue&#39;] = LIGHTBLUE colors[&#39;lightblue1&#39;] = LIGHTBLUE1 colors[&#39;lightblue2&#39;] = LIGHTBLUE2 colors[&#39;lightblue3&#39;] = LIGHTBLUE3 colors[&#39;lightblue4&#39;] = LIGHTBLUE4 colors[&#39;lightcoral&#39;] = LIGHTCORAL colors[&#39;lightcyan1&#39;] = LIGHTCYAN1 colors[&#39;lightcyan2&#39;] = LIGHTCYAN2 colors[&#39;lightcyan3&#39;] = LIGHTCYAN3 colors[&#39;lightcyan4&#39;] = LIGHTCYAN4 colors[&#39;lightgoldenrod1&#39;] = LIGHTGOLDENROD1 colors[&#39;lightgoldenrod2&#39;] = LIGHTGOLDENROD2 colors[&#39;lightgoldenrod3&#39;] = LIGHTGOLDENROD3 colors[&#39;lightgoldenrod4&#39;] = LIGHTGOLDENROD4 colors[&#39;lightgoldenrodyellow&#39;] = LIGHTGOLDENRODYELLOW colors[&#39;lightgrey&#39;] = LIGHTGREY colors[&#39;lightpink&#39;] = LIGHTPINK colors[&#39;lightpink1&#39;] = LIGHTPINK1 colors[&#39;lightpink2&#39;] = LIGHTPINK2 colors[&#39;lightpink3&#39;] = LIGHTPINK3 colors[&#39;lightpink4&#39;] = LIGHTPINK4 colors[&#39;lightsalmon1&#39;] = LIGHTSALMON1 colors[&#39;lightsalmon2&#39;] = LIGHTSALMON2 colors[&#39;lightsalmon3&#39;] = LIGHTSALMON3 colors[&#39;lightsalmon4&#39;] = LIGHTSALMON4 colors[&#39;lightseagreen&#39;] = LIGHTSEAGREEN colors[&#39;lightskyblue&#39;] = LIGHTSKYBLUE colors[&#39;lightskyblue1&#39;] = LIGHTSKYBLUE1 colors[&#39;lightskyblue2&#39;] = LIGHTSKYBLUE2 colors[&#39;lightskyblue3&#39;] = LIGHTSKYBLUE3 colors[&#39;lightskyblue4&#39;] = LIGHTSKYBLUE4 colors[&#39;lightslateblue&#39;] = LIGHTSLATEBLUE colors[&#39;lightslategray&#39;] = LIGHTSLATEGRAY colors[&#39;lightsteelblue&#39;] = LIGHTSTEELBLUE colors[&#39;lightsteelblue1&#39;] = LIGHTSTEELBLUE1 colors[&#39;lightsteelblue2&#39;] = LIGHTSTEELBLUE2 colors[&#39;lightsteelblue3&#39;] = LIGHTSTEELBLUE3 colors[&#39;lightsteelblue4&#39;] = LIGHTSTEELBLUE4 colors[&#39;lightyellow1&#39;] = LIGHTYELLOW1 colors[&#39;lightyellow2&#39;] = LIGHTYELLOW2 colors[&#39;lightyellow3&#39;] = LIGHTYELLOW3 colors[&#39;lightyellow4&#39;] = LIGHTYELLOW4 colors[&#39;limegreen&#39;] = LIMEGREEN colors[&#39;linen&#39;] = LINEN colors[&#39;magenta&#39;] = MAGENTA colors[&#39;magenta2&#39;] = MAGENTA2 colors[&#39;magenta3&#39;] = MAGENTA3 colors[&#39;magenta4&#39;] = MAGENTA4 colors[&#39;manganeseblue&#39;] = MANGANESEBLUE colors[&#39;maroon&#39;] = MAROON colors[&#39;maroon1&#39;] = MAROON1 colors[&#39;maroon2&#39;] = MAROON2 colors[&#39;maroon3&#39;] = MAROON3 colors[&#39;maroon4&#39;] = MAROON4 colors[&#39;mediumorchid&#39;] = MEDIUMORCHID colors[&#39;mediumorchid1&#39;] = MEDIUMORCHID1 colors[&#39;mediumorchid2&#39;] = MEDIUMORCHID2 colors[&#39;mediumorchid3&#39;] = MEDIUMORCHID3 colors[&#39;mediumorchid4&#39;] = MEDIUMORCHID4 colors[&#39;mediumpurple&#39;] = MEDIUMPURPLE colors[&#39;mediumpurple1&#39;] = MEDIUMPURPLE1 colors[&#39;mediumpurple2&#39;] = MEDIUMPURPLE2 colors[&#39;mediumpurple3&#39;] = MEDIUMPURPLE3 colors[&#39;mediumpurple4&#39;] = MEDIUMPURPLE4 colors[&#39;mediumseagreen&#39;] = MEDIUMSEAGREEN colors[&#39;mediumslateblue&#39;] = MEDIUMSLATEBLUE colors[&#39;mediumspringgreen&#39;] = MEDIUMSPRINGGREEN colors[&#39;mediumturquoise&#39;] = MEDIUMTURQUOISE colors[&#39;mediumvioletred&#39;] = MEDIUMVIOLETRED colors[&#39;melon&#39;] = MELON colors[&#39;midnightblue&#39;] = MIDNIGHTBLUE colors[&#39;mint&#39;] = MINT colors[&#39;mintcream&#39;] = MINTCREAM colors[&#39;mistyrose1&#39;] = MISTYROSE1 colors[&#39;mistyrose2&#39;] = MISTYROSE2 colors[&#39;mistyrose3&#39;] = MISTYROSE3 colors[&#39;mistyrose4&#39;] = MISTYROSE4 colors[&#39;moccasin&#39;] = MOCCASIN colors[&#39;navajowhite1&#39;] = NAVAJOWHITE1 colors[&#39;navajowhite2&#39;] = NAVAJOWHITE2 colors[&#39;navajowhite3&#39;] = NAVAJOWHITE3 colors[&#39;navajowhite4&#39;] = NAVAJOWHITE4 colors[&#39;navy&#39;] = NAVY colors[&#39;oldlace&#39;] = OLDLACE colors[&#39;olive&#39;] = OLIVE colors[&#39;olivedrab&#39;] = OLIVEDRAB colors[&#39;olivedrab1&#39;] = OLIVEDRAB1 colors[&#39;olivedrab2&#39;] = OLIVEDRAB2 colors[&#39;olivedrab3&#39;] = OLIVEDRAB3 colors[&#39;olivedrab4&#39;] = OLIVEDRAB4 colors[&#39;orange&#39;] = ORANGE colors[&#39;orange1&#39;] = ORANGE1 colors[&#39;orange2&#39;] = ORANGE2 colors[&#39;orange3&#39;] = ORANGE3 colors[&#39;orange4&#39;] = ORANGE4 colors[&#39;orangered1&#39;] = ORANGERED1 colors[&#39;orangered2&#39;] = ORANGERED2 colors[&#39;orangered3&#39;] = ORANGERED3 colors[&#39;orangered4&#39;] = ORANGERED4 colors[&#39;orchid&#39;] = ORCHID colors[&#39;orchid1&#39;] = ORCHID1 colors[&#39;orchid2&#39;] = ORCHID2 colors[&#39;orchid3&#39;] = ORCHID3 colors[&#39;orchid4&#39;] = ORCHID4 colors[&#39;palegoldenrod&#39;] = PALEGOLDENROD colors[&#39;palegreen&#39;] = PALEGREEN colors[&#39;palegreen1&#39;] = PALEGREEN1 colors[&#39;palegreen2&#39;] = PALEGREEN2 colors[&#39;palegreen3&#39;] = PALEGREEN3 colors[&#39;palegreen4&#39;] = PALEGREEN4 colors[&#39;paleturquoise1&#39;] = PALETURQUOISE1 colors[&#39;paleturquoise2&#39;] = PALETURQUOISE2 colors[&#39;paleturquoise3&#39;] = PALETURQUOISE3 colors[&#39;paleturquoise4&#39;] = PALETURQUOISE4 colors[&#39;palevioletred&#39;] = PALEVIOLETRED colors[&#39;palevioletred1&#39;] = PALEVIOLETRED1 colors[&#39;palevioletred2&#39;] = PALEVIOLETRED2 colors[&#39;palevioletred3&#39;] = PALEVIOLETRED3 colors[&#39;palevioletred4&#39;] = PALEVIOLETRED4 colors[&#39;papayawhip&#39;] = PAPAYAWHIP colors[&#39;peachpuff1&#39;] = PEACHPUFF1 colors[&#39;peachpuff2&#39;] = PEACHPUFF2 colors[&#39;peachpuff3&#39;] = PEACHPUFF3 colors[&#39;peachpuff4&#39;] = PEACHPUFF4 colors[&#39;peacock&#39;] = PEACOCK colors[&#39;pink&#39;] = PINK colors[&#39;pink1&#39;] = PINK1 colors[&#39;pink2&#39;] = PINK2 colors[&#39;pink3&#39;] = PINK3 colors[&#39;pink4&#39;] = PINK4 colors[&#39;plum&#39;] = PLUM colors[&#39;plum1&#39;] = PLUM1 colors[&#39;plum2&#39;] = PLUM2 colors[&#39;plum3&#39;] = PLUM3 colors[&#39;plum4&#39;] = PLUM4 colors[&#39;powderblue&#39;] = POWDERBLUE colors[&#39;purple&#39;] = PURPLE colors[&#39;purple1&#39;] = PURPLE1 colors[&#39;purple2&#39;] = PURPLE2 colors[&#39;purple3&#39;] = PURPLE3 colors[&#39;purple4&#39;] = PURPLE4 colors[&#39;raspberry&#39;] = RASPBERRY colors[&#39;rawsienna&#39;] = RAWSIENNA colors[&#39;red1&#39;] = RED1 colors[&#39;red2&#39;] = RED2 colors[&#39;red3&#39;] = RED3 colors[&#39;red4&#39;] = RED4 colors[&#39;rosybrown&#39;] = ROSYBROWN colors[&#39;rosybrown1&#39;] = ROSYBROWN1 colors[&#39;rosybrown2&#39;] = ROSYBROWN2 colors[&#39;rosybrown3&#39;] = ROSYBROWN3 colors[&#39;rosybrown4&#39;] = ROSYBROWN4 colors[&#39;royalblue&#39;] = ROYALBLUE colors[&#39;royalblue1&#39;] = ROYALBLUE1 colors[&#39;royalblue2&#39;] = ROYALBLUE2 colors[&#39;royalblue3&#39;] = ROYALBLUE3 colors[&#39;royalblue4&#39;] = ROYALBLUE4 colors[&#39;salmon&#39;] = SALMON colors[&#39;salmon1&#39;] = SALMON1 colors[&#39;salmon2&#39;] = SALMON2 colors[&#39;salmon3&#39;] = SALMON3 colors[&#39;salmon4&#39;] = SALMON4 colors[&#39;sandybrown&#39;] = SANDYBROWN colors[&#39;sapgreen&#39;] = SAPGREEN colors[&#39;seagreen1&#39;] = SEAGREEN1 colors[&#39;seagreen2&#39;] = SEAGREEN2 colors[&#39;seagreen3&#39;] = SEAGREEN3 colors[&#39;seagreen4&#39;] = SEAGREEN4 colors[&#39;seashell1&#39;] = SEASHELL1 colors[&#39;seashell2&#39;] = SEASHELL2 colors[&#39;seashell3&#39;] = SEASHELL3 colors[&#39;seashell4&#39;] = SEASHELL4 colors[&#39;sepia&#39;] = SEPIA colors[&#39;sgibeet&#39;] = SGIBEET colors[&#39;sgibrightgray&#39;] = SGIBRIGHTGRAY colors[&#39;sgichartreuse&#39;] = SGICHARTREUSE colors[&#39;sgidarkgray&#39;] = SGIDARKGRAY colors[&#39;sgigray12&#39;] = SGIGRAY12 colors[&#39;sgigray16&#39;] = SGIGRAY16 colors[&#39;sgigray32&#39;] = SGIGRAY32 colors[&#39;sgigray36&#39;] = SGIGRAY36 colors[&#39;sgigray52&#39;] = SGIGRAY52 colors[&#39;sgigray56&#39;] = SGIGRAY56 colors[&#39;sgigray72&#39;] = SGIGRAY72 colors[&#39;sgigray76&#39;] = SGIGRAY76 colors[&#39;sgigray92&#39;] = SGIGRAY92 colors[&#39;sgigray96&#39;] = SGIGRAY96 colors[&#39;sgilightblue&#39;] = SGILIGHTBLUE colors[&#39;sgilightgray&#39;] = SGILIGHTGRAY colors[&#39;sgiolivedrab&#39;] = SGIOLIVEDRAB colors[&#39;sgisalmon&#39;] = SGISALMON colors[&#39;sgislateblue&#39;] = SGISLATEBLUE colors[&#39;sgiteal&#39;] = SGITEAL colors[&#39;sienna&#39;] = SIENNA colors[&#39;sienna1&#39;] = SIENNA1 colors[&#39;sienna2&#39;] = SIENNA2 colors[&#39;sienna3&#39;] = SIENNA3 colors[&#39;sienna4&#39;] = SIENNA4 colors[&#39;silver&#39;] = SILVER colors[&#39;skyblue&#39;] = SKYBLUE colors[&#39;skyblue1&#39;] = SKYBLUE1 colors[&#39;skyblue2&#39;] = SKYBLUE2 colors[&#39;skyblue3&#39;] = SKYBLUE3 colors[&#39;skyblue4&#39;] = SKYBLUE4 colors[&#39;slateblue&#39;] = SLATEBLUE colors[&#39;slateblue1&#39;] = SLATEBLUE1 colors[&#39;slateblue2&#39;] = SLATEBLUE2 colors[&#39;slateblue3&#39;] = SLATEBLUE3 colors[&#39;slateblue4&#39;] = SLATEBLUE4 colors[&#39;slategray&#39;] = SLATEGRAY colors[&#39;slategray1&#39;] = SLATEGRAY1 colors[&#39;slategray2&#39;] = SLATEGRAY2 colors[&#39;slategray3&#39;] = SLATEGRAY3 colors[&#39;slategray4&#39;] = SLATEGRAY4 colors[&#39;snow1&#39;] = SNOW1 colors[&#39;snow2&#39;] = SNOW2 colors[&#39;snow3&#39;] = SNOW3 colors[&#39;snow4&#39;] = SNOW4 colors[&#39;springgreen&#39;] = SPRINGGREEN colors[&#39;springgreen1&#39;] = SPRINGGREEN1 colors[&#39;springgreen2&#39;] = SPRINGGREEN2 colors[&#39;springgreen3&#39;] = SPRINGGREEN3 colors[&#39;steelblue&#39;] = STEELBLUE colors[&#39;steelblue1&#39;] = STEELBLUE1 colors[&#39;steelblue2&#39;] = STEELBLUE2 colors[&#39;steelblue3&#39;] = STEELBLUE3 colors[&#39;steelblue4&#39;] = STEELBLUE4 colors[&#39;tan&#39;] = TAN colors[&#39;tan1&#39;] = TAN1 colors[&#39;tan2&#39;] = TAN2 colors[&#39;tan3&#39;] = TAN3 colors[&#39;tan4&#39;] = TAN4 colors[&#39;teal&#39;] = TEAL colors[&#39;thistle&#39;] = THISTLE colors[&#39;thistle1&#39;] = THISTLE1 colors[&#39;thistle2&#39;] = THISTLE2 colors[&#39;thistle3&#39;] = THISTLE3 colors[&#39;thistle4&#39;] = THISTLE4 colors[&#39;tomato1&#39;] = TOMATO1 colors[&#39;tomato2&#39;] = TOMATO2 colors[&#39;tomato3&#39;] = TOMATO3 colors[&#39;tomato4&#39;] = TOMATO4 colors[&#39;turquoise&#39;] = TURQUOISE colors[&#39;turquoise1&#39;] = TURQUOISE1 colors[&#39;turquoise2&#39;] = TURQUOISE2 colors[&#39;turquoise3&#39;] = TURQUOISE3 colors[&#39;turquoise4&#39;] = TURQUOISE4 colors[&#39;turquoiseblue&#39;] = TURQUOISEBLUE colors[&#39;violet&#39;] = VIOLET colors[&#39;violetred&#39;] = VIOLETRED colors[&#39;violetred1&#39;] = VIOLETRED1 colors[&#39;violetred2&#39;] = VIOLETRED2 colors[&#39;violetred3&#39;] = VIOLETRED3 colors[&#39;violetred4&#39;] = VIOLETRED4 colors[&#39;warmgrey&#39;] = WARMGREY colors[&#39;wheat&#39;] = WHEAT colors[&#39;wheat1&#39;] = WHEAT1 colors[&#39;wheat2&#39;] = WHEAT2 colors[&#39;wheat3&#39;] = WHEAT3 colors[&#39;wheat4&#39;] = WHEAT4 colors[&#39;white&#39;] = WHITE colors[&#39;whitesmoke&#39;] = WHITESMOKE colors[&#39;whitesmoke&#39;] = WHITESMOKE colors[&#39;yellow&#39;] = YELLOW1 colors[&#39;yellow2&#39;] = YELLOW2 colors[&#39;yellow3&#39;] = YELLOW3 colors[&#39;yellow4&#39;] = YELLOW4 color = &quot;blue&quot; print(type(colors[color][0])) . &lt;class &#39;int&#39;&gt; . from IPython.display import Image, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;}, {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Caleb&quot;, &#39;file&#39;: &quot;faceCSP.png&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) # Run this as standalone tester to see sample data printed in Jupyter terminal if __name__ == &quot;__main__&quot;: # print parameter supplied image green_square = image_data(images=[{&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}]) image_display(green_square) # display default images from image_data() default_images = image_data() image_display(default_images) . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;../images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;}, {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;faceCSP&quot;, &#39;file&#39;: &quot;faceCSP.png&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Large image scaled to baseWidth of 320 def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Set Properties of Image, Scale, and convert to Base64 def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Create Grey Scale Base64 representation of Image def image_management_add_html_shift(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;gray_data&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: image[&#39;gray_data&#39;].append((int(average/2), int(average/2), int((average + 255)/2), pixel[3])) # PNG format else: image[&#39;gray_data&#39;].append((int(average/2), int(average/2), int((average + 255)/2))) # end for loop for pixels img.putdata(image[&#39;gray_data&#39;]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data() # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; grey image -&quot;) image_management_add_html_shift(image) display(HTML(image[&#39;html_grey&#39;])) print() . FileNotFoundError Traceback (most recent call last) c: Users Caleb vscode Firstproject _notebooks 2023-03-07-AP-unit2-2.ipynb Cell 4 in &lt;cell line: 77&gt;() &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/Caleb/vscode/Firstproject/_notebooks/2023-03-07-AP-unit2-2.ipynb#W2sZmlsZQ%3D%3D?line=80&#39;&gt;81&lt;/a&gt; # Display meta data, scaled view, and grey scale for each image &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/Caleb/vscode/Firstproject/_notebooks/2023-03-07-AP-unit2-2.ipynb#W2sZmlsZQ%3D%3D?line=81&#39;&gt;82&lt;/a&gt; for image in images: &gt; &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/Caleb/vscode/Firstproject/_notebooks/2023-03-07-AP-unit2-2.ipynb#W2sZmlsZQ%3D%3D?line=82&#39;&gt;83&lt;/a&gt; image_management(image) &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/Caleb/vscode/Firstproject/_notebooks/2023-03-07-AP-unit2-2.ipynb#W2sZmlsZQ%3D%3D?line=83&#39;&gt;84&lt;/a&gt; print(&#34;- meta data --&#34;) &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/Caleb/vscode/Firstproject/_notebooks/2023-03-07-AP-unit2-2.ipynb#W2sZmlsZQ%3D%3D?line=84&#39;&gt;85&lt;/a&gt; print(image[&#39;label&#39;]) c: Users Caleb vscode Firstproject _notebooks 2023-03-07-AP-unit2-2.ipynb Cell 4 in image_management(image) &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/Caleb/vscode/Firstproject/_notebooks/2023-03-07-AP-unit2-2.ipynb#W2sZmlsZQ%3D%3D?line=36&#39;&gt;37&lt;/a&gt; def image_management(image): # path of static images is defaulted &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/Caleb/vscode/Firstproject/_notebooks/2023-03-07-AP-unit2-2.ipynb#W2sZmlsZQ%3D%3D?line=37&#39;&gt;38&lt;/a&gt; # Image open return PIL image object &gt; &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/Caleb/vscode/Firstproject/_notebooks/2023-03-07-AP-unit2-2.ipynb#W2sZmlsZQ%3D%3D?line=38&#39;&gt;39&lt;/a&gt; img = pilImage.open(image[&#39;filename&#39;]) &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/Caleb/vscode/Firstproject/_notebooks/2023-03-07-AP-unit2-2.ipynb#W2sZmlsZQ%3D%3D?line=40&#39;&gt;41&lt;/a&gt; # Python Image Library operations &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/Caleb/vscode/Firstproject/_notebooks/2023-03-07-AP-unit2-2.ipynb#W2sZmlsZQ%3D%3D?line=41&#39;&gt;42&lt;/a&gt; image[&#39;format&#39;] = img.format File c: Users Caleb anaconda3 lib site-packages PIL Image.py:2953, in open(fp, mode, formats) 2950 filename = fp 2952 if filename: -&gt; 2953 fp = builtins.open(filename, &#34;rb&#34;) 2954 exclusive_fp = True 2956 try: FileNotFoundError: [Errno 2] No such file or directory: &#39;C: Users Caleb vscode Firstproject images green-square-16.png&#39; . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np class Image_Data: def __init__(self, source, label, file, path, baseWidth=320): self._source = source # variables with self prefix become part of the object, self._label = label self._file = file self._CSPface = path / file # file with path self._baseWidth = baseWidth # Open image and scale to needs self._img = pilImage.open(self._CSPface) self._format = self._img.format self._mode = self._img.mode self._originalSize = self.img.size self.scale_image() self._html = self.image_to_html(self._img) self._html_grey = self.image_to_html_grey() @property def source(self): return self._source @property def label(self): return self._label @property def file(self): return self._file @property def CSPface(self): return self._CSPface @property def img(self): return self._img @property def format(self): return self._format @property def mode(self): return self._mode @property def originalSize(self): return self._originalSize @property def size(self): return self._img.size @property def html(self): return self._html @property def html_grey(self): return self._html_grey # Large image scaled to baseWidth of 320 def scale_image(self): scalePercent = (self._baseWidth/float(self._img.size[0])) scaleHeight = int((float(self._img.size[1])*float(scalePercent))) scale = (self._baseWidth, scaleHeight) self._img = self._img.resize(scale) # PIL image converted to base64 def image_to_html(self, img): with BytesIO() as buffer: img.save(buffer, self._format) return &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % base64.b64encode(buffer.getvalue()).decode() # Create Grey Scale Base64 representation of Image def image_to_html_grey(self): img_grey = self._img numpy = np.array(self._img.getdata()) # PIL image to numpy array grey_data = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in numpy: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: grey_data.append((average, average, average, pixel[3])) # PNG format else: grey_data.append((average, average, average)) # end for loop for pixels img_grey.putdata(grey_data) return self.image_to_html(img_grey) # prepares a series of images, provides expectation for required contents def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;}, {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;faceCSP&quot;, &#39;file&#39;: &quot;faceCSP.png&quot;} ] return path, images # turns data into objects def image_objects(): id_Objects = [] path, images = image_data() for image in images: id_Objects.append(Image_Data(source=image[&#39;source&#39;], label=image[&#39;label&#39;], file=image[&#39;file&#39;], path=path, )) return id_Objects # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: for ido in image_objects(): # ido is an Imaged Data Object print(&quot;- meta data --&quot;) print(ido.label) print(ido.source) print(ido.file) print(ido.format) print(ido.mode) print(&quot;Original size: &quot;, ido.originalSize) print(&quot;Scaled size: &quot;, ido.size) print(&quot;-- scaled image --&quot;) display(HTML(ido.html)) print(&quot; grey image &quot;) display(HTML(ido.html_grey)) print() . - meta data -- Green Square Internet green-square-16.png PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- scaled image -- . grey image . - meta data -- Clouds Impression Peter Carolin clouds-impression.png PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- scaled image -- . grey image . - meta data -- Lassen Volcano Peter Carolin lassen-volcano.jpg JPEG RGB Original size: (2792, 2094) Scaled size: (320, 240) -- scaled image -- . grey image . - meta data -- faceCSP Internet faceCSP.png JPEG RGB Original size: (474, 464) Scaled size: (320, 313) -- scaled image -- . grey image . .",
            "url": "https://cubnavarro.github.io/Firstproject/face",
            "relUrl": "/face",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post18": {
            "title": "Pair Class Discussion",
            "content": "5.5 Notes . 1. When you create a GitHub repository it requests a license type. Review the license types in relationship to this Tech Talk and make some notes in your personal blog. . There are closed and open source licenses. Closed means not open to public and open are. In closed you have to credit the original authors. GPL is open and it deosn&#39;t allow closed versions of itself to be made Both are great but have different uses Can be helpful for sharing software. In Github we often reuse code such as themes so the license gives credit to it. Makes it free of charge for the user There are many differetn types . 2. In your blog, summarize the discussions and personal analysis on Software Licenses/Options, Digital Rights, and other Legal and Ethical thoughts from this College Board topic. . Copyright can be dangerous. Many people use it for their own gain at expense of others. It takes other people work and doesn&#39;t give them credit meaning they lose money. License helps keep copyright away by claiming a product. We can use liscenses on Github to claim our own work. It is not easy to detest if someone stole your liscense however. . 3. Make a license for your personal (blog) and Team repositories for the CPT project. Be sure to have a license for both Team GitHub repositories (frontend/backend). Document license(s) you picked and why. FYI, frontend, since it is built on GitHub pages may come with a license and restrictions. Document in blog how team made license choice and process of update. . https://github.com/JakeWarren2414/dolphins2/blob/gh-pages/LICENSE We chose a GNU General Public License because of its accesibility and easiness to use https://github.com/JakeWarren2414/FirstFastpages/blob/master/LICENSE I am using the Apache license because of the easines to edit. I am not using trademark use so I don&#39;t need that. I am using private use and modicfication se so this license is perfect. There is a reason it is default. . 5.6 Notes . Describe PII you have seen on project in CompSci Principles. | I have seen people use usenames, emails, date of birth, and more in their projects. My project includes, username, BMI, calorie intake, sport, and workout routine. . What are your feelings about PII and your personal exposure? | I feel like we should be more careful about PII. If we reveal too much information soemone could take our identity, attack us, or use that information for bad puroses. Of course things like name, country, and credit reports aren&#39;t too bad. However, once we give away more personal information such as drivers license number, SS number, and names of reletives it can be dangerous. . Describe good and bad passwords? What is another step that is used to assist in authentication. | A good password would be a name of a pet followed by some number that is personal to you and only you know such as Sammy2414. A bad password would be one that is easily guessed such as 12345678, or one that has accesible information about you such as your instagram username. . Try to describe Symmetric and Asymmetric encryption. | Symmetric encrption is where you only use one key like a password to detec some sort of information. Aysmmeric is where you use two, one public and one private like a username and password. . Provide an example of encryption we used in AWS deployment. | We use the link of our website, the key of our website, and when we make a github page we have to enter a key. . Describe a phishing scheme you have learned about the hard way. Describe some other phishing techniques. | A phishing scheme I have learned is people pretending to be some official such as a member of a credit card company to achieve sensetive information. I have also seen people send a link that when clicked gives information. Finally I have also seen people make websites that require inforation to sign up and it takes that information. .",
            "url": "https://cubnavarro.github.io/Firstproject/week%2021/2023/02/13/notes.html",
            "relUrl": "/week%2021/2023/02/13/notes.html",
            "date": " • Feb 13, 2023"
        }
        
    
  
    
        ,"post19": {
            "title": "Pair Class Discussion",
            "content": "Summary and Thoughts . Computing Bias . Is Bias often in computers or in online and usally creates a harmful effect. Sometime people limit the information so you only see one side of the argument. . Intentional or Purposeful Bias . Facebook vs Tiktok . The different age groups between Facebook and Tiktok is the different becuase of who there target audience is and who they are targeting to use there app. The developers of Tiktok use brighter colors, higher contrast and a easilier layout for short videos with music and dances to attract young indviduals. While Facebook uses for of a simplistic design with grayer colors like white, black and maybe some color. Facebook is made for keeping up with friends and family though events or differnet groups. . Virtual assistanrs have Female Voices? . I think that the virtual assistants are female voices because females voices are more soothing. I think you would listen more to a women talking to you then a man talking to you thats why I believe that the voice assistant are women and there is still the opportunity to use and switch to a differnet like a man or a person with a accent and can change it to your liking . Algorithms In Companies . Many Companies use Algorithums to create the best user experience like youtube and how youtube looks at your watch history to decide the best content for you and the content you will like. . Are Hp Computers Racist . I would say that feature needed more testing to make sure it worked on everyone but also the may have not been the best lighing therfore not finding the things the camera seaches for on your face to follow it. Hp could have used more people and a wider range of people from skin color to gender to ensure that it works for everyone. . Conclusion of Intentional or Purposeful Bias . Though many things bias is good and bad but can also be unitentional when you don&#39;t get something right or it doesn&#39;t work. Many companies use bias to prusade you or use it to target differnet audience and use difernet things to portray differnet messages and to get the best outcome and experience for the user. . Crowdsourcing . Wikeapidea and Crowdsourcing examples . This is an example of Crowdsourcing because the website allow anyone to input information that could be right or wrong. It also could be information that dosen&#39;t realate or is not accurate. More example of crowdsorcing is like crypto or covid to find things like people like and need and use that information to create a better product or sell something better. . Crowdsourcing in APCSP . Crowdsorcing will move into this class though useing other informaion from websites, or APIs and will change the dynamic of the classes. Although we already are using a lot of crowdsorcing though differnet informetion and websites we use like github, and other coding platforms. . Projects with Crowdscurcing . Crowdsourcing could be useful in having to solve problems and questions with opininons and knowledge from many people to solve the same overall goal and question. Crowdsourcing can also create buzz around a product or idea for feed back or for people to see your product and want to try it out. . Night at the Musseum . You can use crowdsourcing to find population opinoions if you wanted to do this or this or do you like this or this better. To create a profie and get a understanding about the people at Night of the Musseum what they like and generalize it .",
            "url": "https://cubnavarro.github.io/Firstproject/week%2021/2023/02/01/PairDiscussion.html",
            "relUrl": "/week%2021/2023/02/01/PairDiscussion.html",
            "date": " • Feb 1, 2023"
        }
        
    
  
    
        ,"post20": {
            "title": "Vjkerbg",
            "content": "{ “cells”: [ { “attachments”: {}, “cell_type”: “markdown”, “metadata”: {}, “source”: [ “ n”, “— n”, “toc: true n”, “layout: post n”, “categories: [Week 4] n”, “title: Poje n”, “— n”, “ n”, “## My Score n”, “ n”, “I got a 45 out of 50 on the final, which was a higher score than I expected to get. I will be going over the questions that I got wrong and attempt corrections, as well as discussing how I felt about the test. n”, “ n”, “ n”, “ n”, “## Question I had problems with n”, “ n”, “### Question 28: Robot in bottom right corner of grid n”, “ n”, “ n”, “ n”, “ n”, “### Question 29: Robot in open grid loop 3 times n”, “ n”, “ n”, “ n”, “I got this wrong because i did the process to many times and didn’t get the right answer. n”, “ n”, “### Question 49: What problems can be solved with algorithms n”, “ n”, “ n”, “ n”, “I got this question wrong because I assumed that every problem can be solved with an algorithm for all possible inputs, when in reality some problems cannot be solved with an algorithm for all possible inputs. Some problems will have no feasible solution with an algorithm. n”, “ n”, “## Reflection: n”, “Overall, I think I did great on this multiple choice quiz. Last time, it took me a lot of more time to digest what the questions were asking and then understand how I could even decide the answer. I understood the majority of the topics on this quiz almost after a minute or two with multiple reads. From the last multiple choice, I feel like I have actually learned a lot more, even if it is the most basic knowledge. Before this quiz I was really discouraged about my progress and felt like I have not really learned much or made any progress, but from my results and the way I got through this quiz, I think I am on track so far in APCSP.” ] } ], “metadata”: { “kernelspec”: { “display_name”: “Python 3”, “language”: “python”, “name”: “python3” }, “language_info”: { “name”: “python”, “version”: “3.10.6” }, “orig_nbformat”: 4, “vscode”: { “interpreter”: { “hash”: “dcd4837add793386cd67e25a441830de5b4a5ceabdd5dcba5a317ceae751db5e” } } }, “nbformat”: 4, “nbformat_minor”: 2 } .",
            "url": "https://cubnavarro.github.io/Firstproject/2023/01/31/vjkerbg.ipynb",
            "relUrl": "/2023/01/31/vjkerbg.ipynb",
            "date": " • Jan 31, 2023"
        }
        
    
  
    
        ,"post21": {
            "title": "MC Practice Results",
            "content": "My Score . I got a 45 out of 50 on the final, which was a higher score than I expected to get. I will be going over the questions that I got wrong and attempt corrections, as well as discussing how I felt about the test. . Question I had problems with . Question 28: Robot in bottom right corner of grid . Question 29: Robot in open grid loop 3 times . I got this wrong because i did the process to many times and didn&#39;t get the right answer. . Question 49: What problems can be solved with algorithms . I got this question wrong because I assumed that every problem can be solved with an algorithm for all possible inputs, when in reality some problems cannot be solved with an algorithm for all possible inputs. Some problems will have no feasible solution with an algorithm. . Reflection: . Overall, I think I did great on this multiple choice quiz. Last time, it took me a lot of more time to digest what the questions were asking and then understand how I could even decide the answer. I understood the majority of the topics on this quiz almost after a minute or two with multiple reads. From the last multiple choice, I feel like I have actually learned a lot more, even if it is the most basic knowledge. Before this quiz I was really discouraged about my progress and felt like I have not really learned much or made any progress, but from my results and the way I got through this quiz, I think I am on track so far in APCSP. .",
            "url": "https://cubnavarro.github.io/Firstproject/2023/01/31/APCSPCollageBoardtest.html",
            "relUrl": "/2023/01/31/APCSPCollageBoardtest.html",
            "date": " • Jan 31, 2023"
        }
        
    
  
    
        ,"post22": {
            "title": "Class Discussion",
            "content": "Beneficial and Harmful Effects . Drones, Chat GPT, and Dopamine . Drones -An advantages of Drones are that they can be used for survalence videos and be used to capture sights that can&#39;t be seen from the ground and to get unique point of views and cool sights. . Anoter Advantage is that people can you drone to fly as a hobby for fun and to enjoy a new experence though a new view and fun way. . -This is an advantage and disadvatage is that you can people can use drones for millitary use by not endaging people and striking people from a distance or using drone as survalence and to spot people that could be hard to find . | . | Dopamine I feel like it is a real thing but is not enterly bad although it causes addiction and the want for more many people use it to essace problems and the real problem is the reason why someone started to use it and that needs to be adressed. | I also feel like video games helps people remove stress and relax from life but its not like drugs where if you get addicted its hard to stop. For me video games is good outlet from life and always me to relax and enjoy time with friends meet new people and just be in my own world. | . | Blog Post Reflection &#8211; Digital Empowerment . Empowerment in the world . You empower yourself in the digital world but diving into and wanting to learn about it and know more . | Also you get empowered by just useing it every day and just having around. The use of it allows you to experience it and just learn more about how it works . | . | Help Empovering . Someone that is empowered can help others that arn&#39;t impowered by exposing them to technology and the digital world. You can show them how something works or even just allowing them to play video games or just explore. | . | Digital Barriers . Some Barriers could be the limit of technology in some communities but at Del Norte they give Computers to everyone if you need one ths allows people to be exposed to more technology and the digital world. | . |",
            "url": "https://cubnavarro.github.io/Firstproject/week%2018/2023/01/24/Circledisccutionquestion.html",
            "relUrl": "/week%2018/2023/01/24/Circledisccutionquestion.html",
            "date": " • Jan 24, 2023"
        }
        
    
  
    
        ,"post23": {
            "title": "Student Lessons",
            "content": "# A gateway in necessary as a web server cannot communicate directly with Python. # In this case, imports are focused on generating hash code to protect passwords. from werkzeug.security import generate_password_hash, check_password_hash import json # Define a User Class/Template # -- A User represents the data we want to manage class User: # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password, classof): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) self._classof = classof # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result @property def classof(self): return self._classof # a setter function, allows name to be updated after initial object creation @classof.setter def classof(self, classof): self._classof = classof # check if uid parameter matches user id in object, return boolean def is_classof(self, classof): return self._classof == classof # output content using str(object) in human readable form, uses getter def __str__(self): return f&#39;name: &quot;{self.name}&quot;, id: &quot;{self.uid}&quot;, psw: &quot;{self.password}&quot;, class: &quot;{self.classof}&#39; # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;Person(name={self._name}, uid={self._uid}, password={self._password}, class={self._classof})&#39; # tester method to print users def tester(users, uid, psw): result = None for user in users: # test for match in database if user.uid == uid and user.is_password(psw): # check for match print(&quot;* &quot;, end=&quot;&quot;) result = user # print using __str__ method print(str(user)) return result # place tester code inside of special if! This allows include without tester running if __name__ == &quot;__main__&quot;: # define user objects u1 = User(name=&#39;Caleb Navarro&#39;, uid=&#39;Caleb&#39;, password=&#39;123caleb&#39;, classof=&#39;2024&#39;) u2 = User(name=&#39;Navan Yatavelli&#39;, uid=&#39;Navan&#39;, password=&#39;123Navan&#39;, classof=&#39;2024&#39;) u3 = User(name=&#39;James Hunter&#39;, uid=&#39;James&#39;, password=&#39;123james&#39;, classof=&#39;2025&#39;) u4 = User(name=&#39;Theo Huntaslas&#39;, uid=&#39;Theo&#39;, password=&#39;123theo&#39;, classof=&#39;2024&#39;) u5 = User(name=&#39;Quis Jamili&#39;, uid=&#39;Quis&#39;, password=&#39;123Quis&#39;, classof=&#39;2025&#39;) # put user objects in list for convenience users = [u1, u2, u3, u4, u5] # Find user print(&quot;Test 1, find user 3&quot;) u = tester(users, u3.uid, &quot;123james&quot;) # Change user print(&quot;Test 2, change user 3&quot;) u.name = &quot;John Mortensen&quot; u.uid = &quot;jm1021&quot; u.set_password(&quot;123qwerty&quot;) u = tester(users, u.uid, &quot;123qwerty&quot;) # Make dictionary &#39;&#39;&#39; The __dict__ in Python represents a dictionary or any mapping object that is used to store the attributes of the object. Every object in Python has an attribute that is denoted by __dict__. Use the json.dumps() method to convert the list of Users to a JSON string. &#39;&#39;&#39; print(&quot;Test 3, make a dictionary&quot;) json_string = json.dumps([user.__dict__ for user in users]) print(json_string) print(&quot;Test 4, make a dictionary&quot;) json_string = json.dumps([vars(user) for user in users]) print(json_string) . Test 1, find user 3 name: &#34;Caleb Navarro&#34;, id: &#34;Caleb&#34;, psw: &#34;sha256$rTI...&#34;, class: &#34;2024 name: &#34;Navan Yatavelli&#34;, id: &#34;Navan&#34;, psw: &#34;sha256$fQw...&#34;, class: &#34;2024 * name: &#34;James Hunter&#34;, id: &#34;James&#34;, psw: &#34;sha256$w5H...&#34;, class: &#34;2025 name: &#34;Theo Huntaslas&#34;, id: &#34;Theo&#34;, psw: &#34;sha256$sTP...&#34;, class: &#34;2024 name: &#34;Quis Jamili&#34;, id: &#34;Quis&#34;, psw: &#34;sha256$MUb...&#34;, class: &#34;2025 Test 2, change user 3 name: &#34;Caleb Navarro&#34;, id: &#34;Caleb&#34;, psw: &#34;sha256$rTI...&#34;, class: &#34;2024 name: &#34;Navan Yatavelli&#34;, id: &#34;Navan&#34;, psw: &#34;sha256$fQw...&#34;, class: &#34;2024 * name: &#34;John Mortensen&#34;, id: &#34;jm1021&#34;, psw: &#34;sha256$gFJ...&#34;, class: &#34;2025 name: &#34;Theo Huntaslas&#34;, id: &#34;Theo&#34;, psw: &#34;sha256$sTP...&#34;, class: &#34;2024 name: &#34;Quis Jamili&#34;, id: &#34;Quis&#34;, psw: &#34;sha256$MUb...&#34;, class: &#34;2025 Test 3, make a dictionary [{&#34;_name&#34;: &#34;Caleb Navarro&#34;, &#34;_uid&#34;: &#34;Caleb&#34;, &#34;_password&#34;: &#34;sha256$rTIotOOQuectnDQO$c691b0053126fa85ba4b90e33485fc1a0ad5e370aac8a48eb49163203d7b499c&#34;, &#34;_classof&#34;: &#34;2024&#34;}, {&#34;_name&#34;: &#34;Navan Yatavelli&#34;, &#34;_uid&#34;: &#34;Navan&#34;, &#34;_password&#34;: &#34;sha256$fQwTrtWs6z4Map8x$2283e3ec7c50c7081a48afb341c771bcac880357e8fb615966655083834a67f4&#34;, &#34;_classof&#34;: &#34;2024&#34;}, {&#34;_name&#34;: &#34;John Mortensen&#34;, &#34;_uid&#34;: &#34;jm1021&#34;, &#34;_password&#34;: &#34;sha256$gFJwZQDU2coayBhw$1eb80eb1c4228f9d045bc00545ecde95dc70567616ff6f56872e11ee503daa8f&#34;, &#34;_classof&#34;: &#34;2025&#34;}, {&#34;_name&#34;: &#34;Theo Huntaslas&#34;, &#34;_uid&#34;: &#34;Theo&#34;, &#34;_password&#34;: &#34;sha256$sTPxabcmJfM15Ovc$ce6a665ab70e132bfdeda797ee4d9594a542b4bc43bcf317e734c88cbb2fff1f&#34;, &#34;_classof&#34;: &#34;2024&#34;}, {&#34;_name&#34;: &#34;Quis Jamili&#34;, &#34;_uid&#34;: &#34;Quis&#34;, &#34;_password&#34;: &#34;sha256$MUb4VGx9aSXdaqi3$d9644c429df501f9563907fd5dd14bdcecacb52c17cc771d66b35a10a173b38a&#34;, &#34;_classof&#34;: &#34;2025&#34;}] Test 4, make a dictionary [{&#34;_name&#34;: &#34;Caleb Navarro&#34;, &#34;_uid&#34;: &#34;Caleb&#34;, &#34;_password&#34;: &#34;sha256$rTIotOOQuectnDQO$c691b0053126fa85ba4b90e33485fc1a0ad5e370aac8a48eb49163203d7b499c&#34;, &#34;_classof&#34;: &#34;2024&#34;}, {&#34;_name&#34;: &#34;Navan Yatavelli&#34;, &#34;_uid&#34;: &#34;Navan&#34;, &#34;_password&#34;: &#34;sha256$fQwTrtWs6z4Map8x$2283e3ec7c50c7081a48afb341c771bcac880357e8fb615966655083834a67f4&#34;, &#34;_classof&#34;: &#34;2024&#34;}, {&#34;_name&#34;: &#34;John Mortensen&#34;, &#34;_uid&#34;: &#34;jm1021&#34;, &#34;_password&#34;: &#34;sha256$gFJwZQDU2coayBhw$1eb80eb1c4228f9d045bc00545ecde95dc70567616ff6f56872e11ee503daa8f&#34;, &#34;_classof&#34;: &#34;2025&#34;}, {&#34;_name&#34;: &#34;Theo Huntaslas&#34;, &#34;_uid&#34;: &#34;Theo&#34;, &#34;_password&#34;: &#34;sha256$sTPxabcmJfM15Ovc$ce6a665ab70e132bfdeda797ee4d9594a542b4bc43bcf317e734c88cbb2fff1f&#34;, &#34;_classof&#34;: &#34;2024&#34;}, {&#34;_name&#34;: &#34;Quis Jamili&#34;, &#34;_uid&#34;: &#34;Quis&#34;, &#34;_password&#34;: &#34;sha256$MUb4VGx9aSXdaqi3$d9644c429df501f9563907fd5dd14bdcecacb52c17cc771d66b35a10a173b38a&#34;, &#34;_classof&#34;: &#34;2025&#34;}] . from werkzeug.security import generate_password_hash, check_password_hash from datetime import date import json class User: def __init__(self, name, uid, password, classof, dob): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) self._classof = classof self._dob = dob @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def classof(self): return self._classof # a setter function, allows name to be updated after initial object creation @classof.setter def classof(self, classof): self._classof = classof # check if uid parameter matches user id in object, return boolean def is_classof(self, classof): return self._classof == classof # dob property is returned as string, to avoid unfriendly outcomes @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob should be have verification for type date @dob.setter def dob(self, dob): self._dob = dob # age is calculated and returned each time it is accessed @property def age(self): today = date.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # dictionary is customized, removing password for security purposes @property def dictionary(self): dict = { &quot;name&quot; : self.name, &quot;uid&quot; : self.uid, &quot;dob&quot; : self.dob, &quot;class&quot;: self.classof, &quot;age&quot; : self.age } return dict # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.dictionary) # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;User(name={self._name}, uid={self._uid}, password={self._password}, classof={self._classof} ,dob={self._dob})&#39; if __name__ == &quot;__main__&quot;: u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, classof=&#39;1985&#39;, dob=date(1847, 2, 11)) print(&quot;JSON ready string: n&quot;, u1, &quot; n&quot;) print(&quot;Raw Variables of object: n&quot;, vars(u1), &quot; n&quot;) print(&quot;Raw Attributes and Methods of object: n&quot;, dir(u1), &quot; n&quot;) print(&quot;Representation to Re-Create the object: n&quot;, repr(u1), &quot; n&quot;) . JSON ready string: {&#34;name&#34;: &#34;Thomas Edison&#34;, &#34;uid&#34;: &#34;toby&#34;, &#34;dob&#34;: &#34;02-11-1847&#34;, &#34;class&#34;: &#34;1985&#34;, &#34;age&#34;: 175} Raw Variables of object: {&#39;_name&#39;: &#39;Thomas Edison&#39;, &#39;_uid&#39;: &#39;toby&#39;, &#39;_password&#39;: &#39;sha256$hhZz6RqaicNmmdhC$3427922d2233595985fa8355bf03fe3d903ad63c6435a0829fbeb6846a556ead&#39;, &#39;_classof&#39;: &#39;1985&#39;, &#39;_dob&#39;: datetime.date(1847, 2, 11)} Raw Attributes and Methods of object: [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;_classof&#39;, &#39;_dob&#39;, &#39;_name&#39;, &#39;_password&#39;, &#39;_uid&#39;, &#39;age&#39;, &#39;classof&#39;, &#39;dictionary&#39;, &#39;dob&#39;, &#39;is_classof&#39;, &#39;is_password&#39;, &#39;is_uid&#39;, &#39;name&#39;, &#39;set_password&#39;, &#39;uid&#39;] Representation to Re-Create the object: User(name=Thomas Edison, uid=toby, password=sha256$hhZz6RqaicNmmdhC$3427922d2233595985fa8355bf03fe3d903ad63c6435a0829fbeb6846a556ead, classof=1985 ,dob=1847-02-11) .",
            "url": "https://cubnavarro.github.io/Firstproject/week%2018/2023/01/10/ClassandObjectcode.html",
            "relUrl": "/week%2018/2023/01/10/ClassandObjectcode.html",
            "date": " • Jan 10, 2023"
        }
        
    
  
    
        ,"post24": {
            "title": "Performance Task 2",
            "content": "Reporting Category Student Score College Board Score Comments . Program Purpose and Function | 0 | 0 | Because they did not describe the code’s functionality | . Data Abstraction | 1 | 0 | Because the student included a list that was needed for college board. | . Managing Complexity | 0 | 0 | Because the student did not show complexity within their submission. | . Procedural Abstraction | 0 | 0 | because there was no proof that there would be contributions to functionality. | . Algorithm Implementation | 0 | 0 | as there was no evidence of how a student could recreate the code. | . Testing | 1 | 1 | as the student showed responses, showed multiple forms of calling data, and met all criteria. | . Reporting Category Student Score College Board Score Comments . Program Purpose and Function | 1 | 1 | as the student demonstrated inputs, functionality, and outputs. | . Data Abstraction | 1 | 1 | as the student showed how the data represents a program. | . Managing Complexity | 1 | 1 | the student shows how they were able to manage complexity within code. | . Procedural Abstraction | 1 | 1 | student gave a detailed description of their code and how it contributed to the functionality of the program. | . Algorithm Implementation | 1 | 1 | Student demonstrated sequences, selections, and iterations | . Testing | 1 | 1 | Student was able to show two different calls. | . Reporting Category Student Score College Board Score Comments . Program Purpose and Function | 0 | 0 | The student did not really show a purpose for the code. | . Data Abstraction | 0 | 1 | I think that the code of a list was outside the loop so it does not earn the point for collegeboard | . Managing Complexity | 1 | 1 | As the student met all expectations by adding lists and going into detail on how it was able to make the code less complex. | . Procedural Abstraction | 0 | 1 | As there was a description of functionality and how the code benefits it. | . Algorithm Implementation | 0 | 1 | the student described how people would be able to manipulate the code and recreate it. | . Testing | 0 | 1 | I think that the code is too similar and collegeboard wants distinct calls in two different ways. | . Reporting Category Student Score College Board Score Comments . Program Purpose and Function | 1 | 1 | All criteria was met and the purpose of the program was shown. | . Data Abstraction | 0 | 0 | Because some of the data that is collected was not actually used. | . Managing Complexity | 1 | 0 | because the student showed lists and details. | . Procedural Abstraction | 0 | 1 | As the student showed how abstracting the data contributed to the code. | . Algorithm Implementation | 0 | 1 | As the student was able to show all three criteria in the code and write up: sequencing, selecting and iterating. | . Testing | 1 | 0 | Because the student showed 2 calls and met all criteria. | .",
            "url": "https://cubnavarro.github.io/Firstproject/week%2017/2023/01/04/PerformaceTaskScoring2.html",
            "relUrl": "/week%2017/2023/01/04/PerformaceTaskScoring2.html",
            "date": " • Jan 4, 2023"
        }
        
    
  
    
        ,"post25": {
            "title": "Performance Task 1",
            "content": "Reporting Category Student Score College Board Score Comments . Program Purpose and Function | 1 | 1 | Program has both an input and output. It describes it’s purpose as finding information about a triangle and its function as showing the triangle ratios of a triangle that has been inputed. | . Data Abstraction | 1 | 1 | Has a code segment that shows the arithmetic that calculates the triangle ratios. Shows a list. Has name of variables and describes the data in the list. | . Managing Complexity | 0 | 0 | Has code segment shoring the complexity but doesn’t explain it. They just gave another piece of code. | . Procedural Abstraction | 0 | 1 | Has code segment showing the student-developed procedure and has parameter and shows where the SDP is being called. Finally describes the functionality of the program well. | . Algorithm Implementation | 1 | 1 | Has code segment showing the student-developed procedure and has parameter and shows where the SDP is being called. Finally describes the functionality of the program well. | . Reporting Category Student Score College Board Score Comments . Program Purpose and Function | 1 | 1 | Met all the criteria for this section. Has input and output and describes the function and purpose. The function is placing blocks that move and the purpose is entertainment. | . Data Abstraction | 1 | 1 | Met all the criteria for this section. Has proper code segments explaining how data is stored and remebered from the users input. The blocks moving. It does fulfill the purpose. Shoes name of variable and describes what the data is contained in. | . Managing Complexity | 1 | 1 | Has code segment showing a list and explains how it could be different. | . Procedural Abstraction | 0 | 1 | This response describes the code segment but it never had a clear code segment depicted that showed the student developed procedure with 1+ parameter or SDP being called. | . Algorithm Implementation | 0 | 1 | Has sequencing and selection but doesn’t have iteration and doesn’t explain. | .",
            "url": "https://cubnavarro.github.io/Firstproject/week%2017/2023/01/04/PerformaceTaskScoring1.html",
            "relUrl": "/week%2017/2023/01/04/PerformaceTaskScoring1.html",
            "date": " • Jan 4, 2023"
        }
        
    
  
    
        ,"post26": {
            "title": "Extra Credit Notes",
            "content": "This is my notes from listening to the speakers and information about them under their name with lots of information about them and them thought their Jobs and life . Kathyleen Beveridge . - Born in Vietnam - Studied is Spain - Majored in Finaces - Fond out that finace was not for her and moved to San Diego and start in the technology industry - She worked 3 different companies: - HP - Qualcomm - Thermo Fisher Scientific - Create technology that makes life better for everyone - Inventing the tech the world loves - Enable our customers to make the world heathlier, cleaner and safer - SHe works very closly with her team to make sure here team is efffecent and working - She is always asking questions and surveying the market and makeing sure to relase a product at the right time . Kris Porter . - names of the jobs he goes by: - A Software Engineer - SRE - Dev Ops - He went to Livermore High School - Enrolled at UCLA for electrical Engineering - Took a 8 years break from coding but it is now his career - Networked informechanical System was a company he worked out were the made a robot and it would get deployed to learn and scan the jumgle and figure information by scanning and learing more about the animals and jungle - Learned the Lynex Operation system - In 2008 Finished Grad school - In 2010 He was a system Engineer at a start up - In 2012 NBC Universal Streaming Media infrastructure for the video streaming of the Olympics - In 2014 He worked at Qualcomm - 2021 working at twitter - Highlights - CCNA training - Mashine Learning and Deep Learning - Python (HE is self taught) - Data Structures, Algorithms - Projects he worked on - Streaming Media Infastructure for the 2012 Olympics - Location based Services - Twitter Projects - Graph QL . Questions For the Speakers . Are you still working at Twitter? (to Kris Porter) . No, he was working remotly for twitter but is now working at Mysten Labs . What type of Mashine Learning projects are you Doing? . Kris used Mashine Learning to see if a repository was in use and if not then it would delete it and if it was still in use it would keep it . Kathyleen used Mashine learning is prodict if there was good harvest or bad harvest to anazyis data to make predictions about Covid and when there was . What skill do you think is the most importan to have in the tech industry is? . Kris said is be able to learn contiuously because you have to be able to apply yourself and always learn how to code and code better to imporve your skills. Also he says to just keep learning and the greatest thing to do is not learn more and improve yourself . Kathyleen says to be adaptive to which career you are in and how to improve and adapt to your situation that you are in and learn because your going to be going back and forth using differnet skills. The best people she has worked with is listening and able to translate it to code and explain what he/she is doing. . What do you think the Biggest Challenge in the tech Industry? . Interviews are challenging and they are timed tests to see your skills and showing that you now your stuff and have a good understanding of the job you are trying to join. There are some challenges where the companies are smooter and 40 hours and less deadlines and other companies with more coding and faster quicker dead lines. The type of jobs is all up to the person that is working and what you want to do. .",
            "url": "https://cubnavarro.github.io/Firstproject/week%2014/2022/12/13/Extracredit.html",
            "relUrl": "/week%2014/2022/12/13/Extracredit.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Notesforlesson",
            "content": "A $60 item recives a 20% discount and a tax is 8% . PROCEDURE applyDiscount (cost, cpercentDiscounted) { temp &lt;– 100 - percentDiscounted temp &lt;– temp / 100 cost &lt;– cost x temp Print(cost) } PROCEDURE applytax (cost, cpercentDiscounted) { temp &lt;– 100 + percentTaxed temp &lt;– temp / 100 cost &lt;– cost x temp Print(cost) } . PROCEDURE convet Fahrenheit (tempature) { Celsius &lt;– tempature - 32 Celsius &lt;– Celsius x 5/9 Print (Celsius) } .",
            "url": "https://cubnavarro.github.io/Firstproject/2022/12/02/Notesforlesson.html",
            "relUrl": "/2022/12/02/Notesforlesson.html",
            "date": " • Dec 2, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Student Lessons",
            "content": "This is my blog about WiStem . Thought the lesson I learaned about Varibles and data abstraction. . I answered all of the question in the homework and placed top 10 in the kahoot and getting any of the questions wrong . An example of one of the HW problems and the answer was iscold, boolean . You are storing true or false in a variable that asks if the classroom is cold. What is the best variable name and data type? . weather, integer weather, boolean isCold, boolean cold, string . Homework . I did the homework and tried some of the hacks and understood how to do it well. The problems didn&#39;t take to much time but helped me practice. . languages_list = [] languages_list = [&quot;Python&quot;, &quot;C++&quot;, &quot;JavaScript&quot;, &quot;One&quot;,&quot;BigBOi&quot;] . languages_list = [] languages_list = [&quot;Python&quot;, &quot;C++&quot;, &quot;JavaScript&quot;] print() . languages_list = [] languages_list = [&quot;Python&quot;, &quot;C++&quot;, &quot;JavaScript&quot;] print(languages_list[0]) . listA = [] listA = [1, 55, 8, 2, 76] listB = [] listB = [22, 7, 13] print() . listA = [&quot;James&quot;, &quot;Caleb&quot;] listB = [&quot;Navan&quot;,&quot;Andrew&quot;] . I worked on the Bianey Hacks/Questions and got 4 of the 6 correct but they was simple mistakes . Eample- . 44 | I said 101110 . Answer is 101100 . I tried the Extra Binary Hacks for if you changed your bits to 24 but really struggled in understanting it but asked my friend and he helped explain it and I got 3 correct for decimal notation and got 2/3 of the binary notation . Binary Hacks . Convert these binary notation to decimal notation. (the way we normally count) . The binary number 111. . Answer - 7 . The binary number 1011. . Answer - 11 . The binary number 1101011 . Answer - 107 . 12 . Answer - 1100 . 44 . Answer - 101100 . 254 . Answer - 11111110 . Some of the problems I did for WiStem hacks and HW . Consider the following code segment: . num1 ⟵ 4 . num2 ⟵ 6 . num1 ⟵ num 2 . DISPLAY(num1) . DISPLAY(num2) . What is displayed after running this code segment? . 4 6 . 6 4 . 4 4 . 6 6 . Answer - 4 . p ⟵ 10 . q ⟵ 20 . r ⟵ 30 . s ⟵ 40 . p ⟵ q . q ⟵ r . s ⟵ q . r ⟵ p . What is the value of r as a result of running this code segment . 10 . 20 . 30 . 40 . Answer - 20 . This is My Blog about the second lesson with my boy Theo . I think this was more of a refresher for me cause I knew this information pretty well and knew how to solve the equation from the start. . For the pratice problems under the vocab I tried for the first practice problem and then just looked at the answers for the rest but i did get the first problem correct legit using a calc. . num 1 ⟵ 25 . num 2 ⟵ 43 . num 3 ⟵ 18 . average ⟵ (num 1 + num 2 + num 3)/3 . display average A = 28.6666 . For video 3 I understood the materal very well and again just looked at the answer without trying. . For 3.4 Video 1 I really diddn&#39;t know those vocab and teached me new stuff but am still mad that you said school has 5 letters when is has 6. . Homework . I really didn&#39;t understant what I was supposed to do for the homework and was pretty unclear but I understand what the code is saying. . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . i = 1 starString = &quot;*&quot; while i &lt;= 5: j = 1 while j &lt;= i: print (&quot;*&quot;, end= &quot;&quot;) j += 1 print () i += 1 . * ** *** **** ***** . For video 2 hacks I actually did the work for the questions and was fairly easy not taking to much time . given the following code segment below: a ⟵ 7 . b ⟵ 1 . c ⟵ 3 . d ⟵ 4 . a ⟵ b . b ⟵ c + d . d ⟵ b . find the value for a, b, c, d a = 1 b = 7 c = 3 d = 7 . Sequencing was fairly easy too I got the answer correct and was not a challenge. It is good practice though . num1 = 3 num2 = 1 num3 = 5 num1 = num2 + num3 num2 = num1 + num3 print(num1,num2) . 6 11 . 3.4 Video 1 Hacks . This was fairly easy again not much challenge and didn&#39;t take me long to complete . Test 1 . firstName &lt;- &quot;Bob&quot; lastName &lt;- &quot;Smith&quot; var &lt;- substring(firstName, 1, 1) name &lt;- concat(lastName, var) email &lt;- concat(name, &quot;@gmail.com&quot;) DISPLAY(email) . Answer = SmithB@gmail.com . Test 2 . word1 &lt;- &quot;computer&quot; word2 &lt;- &quot;textbooks&quot; length1 &lt;- len(word1)/2 length2 &lt;- len(word2)/3 first &lt;- substring(word1, 2, len1) second &lt;- substring(word2, len2+3, len2) newWord &lt;- concat(first, second) DISPLAY(newWord) . Answer = ompuook . Barn homework and Hacks . This is my blog for the Barn homework and hack and my answers to the questions. . 3.5 Note Hacks . These are just some of the homework and hacks though all of the videos for Barn . 90(D) = 1000(B) | A. True B. False . Answer - False . 10(D) ≠ 0110(B) | A. True B. False . Answer - True . 56(D) ≥ 111000(B) | A. True B. False . Answer - True . 99(D) &lt; 1110011(B) | A. True B. False . Answer - True . Binary Table . This is the Binary Table for the Hacks and Homework that took me a while to do. . AND Operator Value 1 Value 2 Result . 1 | 1 | 1 | . 1 | 0 | 0 | . 0 | 1 | 0 | . 0 | 0 | 0 | . OR Operator Value 1 Value 2 Result . 1 | 1 | 1 | . 1 | 0 | 1 | . 0 | 1 | 1 | . 0 | 0 | 0 | . Not operator Not Value Result . Not | 1 | 0 | . Not | 0 | 1 | . . Barn Python Practice . Vocab/Important information . For Loop - FOR LOOP repeats a function for a set number of times; I is the number of times repeated . While Loop - The while loop is used to repeat a section of code an unknown number of times until a specific condition is met . Initialization - What sets the counter variable to a starting value. For example (var i = 0) represents an initial value of 0. . Condition - Allows the computer to know whether or not to keep repeating the loop. . Increment/decrement - Modifies the counter variable after each repetition. . Append, remove, pop - Various methods, append adds an element to the end, remove removes at an index, and pop removes the last item. . Iterative statements are also called loops, and they repeat themselves over and over until the condition for stopping is met . # Practice with these statements print(20 == 20) # How can you change the operator to print a value of False? x = 30 y = 20 z = 10 print(x &gt; y + z) # How can this return true by only manipulating the operator? # Manipulate the variables x, y, and z to make the below statement return true print(x == z) . The answer is True False False . AP Prep Homework &amp; Hacks . 1. What is displayed by this code? . result &lt;-- 75 | IF result &lt; 80 { DISPLAY(&quot;Please schedule a retake.&quot;) } | ELSE { DISPLAY(&quot;Nice job!&quot;) } | . Nice job! | Display | Please schedule a retake. | 75 | Answer - 3. Please schedule a retake . 2. How is an if statement different from an if-else statement. . Extra words. | An if statement will only go through a process if a condition is met. An if-else statement will go through code no matter the conditions. | They are the exact same. | An if statement will go through the entire code segment every single time and the if-else statement is always used in an algorithm, no matter the conditions. | Answer - 2. An if statement will only go through a process if a condition is met. An if-else statement will go through code no matter the conditions. . 3. What would be most appropriate for this situation? Ben wants to check his bank account. If his car fuel is full, he will go to the bank. Otherwise, he will go home. If he goes to the bank, he will withdraw money only if his balance is above $1000. . If statement | If-else statement | Answer - 2. If-else statement . 4. What would be most appropriate for this situation? Luke wants to play basketball. If it is sunny outside he will go to the park to play basketball. . If statement | If-else statement | Answer - 1. If statement . Using Python Code . This is me messing around with the if-else statements and just add some suff with the code . animals = [&quot;snake&quot;, &quot;rat&quot;, &quot;bird&quot;, &quot;Humans&quot;, &quot;jellyfish&quot;] for i in animals: if i == &quot;snake&quot;: # What boolean value does this statement cause? print(&quot;A snake lives in the desert&quot;) else: if i == &quot;rat&quot;: # What boolean value does this statement cause? print(&quot;The rat is alive&quot;) else: print(&quot;Jellyfish sucks&quot;) # Practice # Using only one more if statement, alter the code to print out a statement saying if an animal lives in the desert, based on booleans . 3.7 Hacks homework . This is my dictionary for the Exercise . Exercise 1 . Create dictionaries for multiple food items, with the listed specifications Chicken Alfredo, Meat: Chicken, Time to Prepare: 60 minutes | Cheese Quesadilla, Meat: None, Time to Prepare: 10 minutes | Beef Wellington, Meat: Beef, Time to Prepare: 150 minutes | . | Used nested conditionals, determine which meal you can cook, given that a) you have no meat at home, and b) you only have 30 minutes to make the meal | . chickendict = { &quot;meat&quot;: True, &quot;prepareTime&quot;: 60, &quot;name&quot; : &quot;chicken alfredo&quot;, } cheesedict = { &quot;meat&quot;: False, &quot;prepareTime&quot;: 10, &quot;name&quot; : &quot;cheese quesadilla&quot;, } beefdict = { &quot;meat&quot;: True, &quot;prepareTime&quot;: 150, &quot;name&quot; : &quot;beef wellington&quot;, } def mealPrep(prep): if prep[&quot;prepareTime&quot;] &lt;= 30: if prep[&quot;meat&quot;] == False: print(prep[&quot;name&quot;], &quot;is good for how much time you have&quot;) else: print(&quot;You have no meat you can&#39;t make&quot;, prep[&quot;name&quot;]) else: print(&quot;You don&#39;t have enough time for&quot;, prep[&quot;name&quot;]) mealPrep(chickendict) mealPrep(cheesedict) mealPrep(beefdict) . You don&#39;t have enough time for chicken alfredo cheese quesadilla is good for how much time you have You don&#39;t have enough time for beef wellington . PGK Homework and Hacks . I did these homework and hacks it took me some time but was not to hard but was good. . Quiz on the Website . This is my homework and hacks and Question 2 and 3 I got wrong and were challenging for me. . I had an image but it didn&#39;t work . These were my problems and were the ones I really didn&#39;t know. I knew the rest knowing them mostly. . Exercise for PGK . These were the Exercise for the homeworks and hacks . list = [1, 2, 3, 4, 5] list.reverse() print(&quot;Sorted Lists&quot;, list) . Sorted Lists [5, 4, 3, 2, 1] . list = [9, 8, 4, 3, 5, 2, 6, 7, 1, 0] list.sort() print(&quot;Sorted Lists&quot;, list) . Sorted Lists [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] . Sections 9 and 11 Homework and Hacks . Here are some of the hacks for section 9 and 11 . Question 1 . { . if(isRaining){ . day --&gt; &quot;cold&quot; . } . if(isCold){ . day --&gt; &quot;cold&quot; . } . } . Question 2 . import random . def turn(): . max_int = 0 for i in range(4): nint = random.randint(1, 10) if nint &gt; max_int: max_int = nint print(max_int) . turn() . turn() . Question 3 . { . if CANMOVEFORWARD{ . moveForwards . } . else{ . if CANTURNRIGHT{ turnright } if CANTURNLEFT{ turnleft } . } . } . Problem 4 . Make a binary search tree of different the list [1,2,3,4,6,9,11,69] . . Problem 5 . Explain thoroughly how to find the number 69 in the list above (use key words) . We can use sequential search . Iterate through the list . Compare each number until we ind 69 . We can also use binary search . Begin from the middle index then continue to the other numbers . Problem 6. . Make a diagram explaining how you found the list (not tree, include equation . Middle index . (1+8)/2=4.5~5 . Make a diagram explaining how you found the list (not tree, include equation) . . Question 7 . [&quot;Market”, ”Ralphs”, “store”, &quot;Target”, ”Walmart”] . You could add this in this order in order to put them in alphabetical order, ascending. This way these could be properly compared, as numbers are greater, you can compare which numerical value of these ascii characters is greater. . Question 8 . Binary search is far quicker than sequential search because binary search inherently rules out half of the possibilities every iteration. Since you start at the middle index, you can either choose to pick the group that is greater than the middle index, or the group that is lower. As a result, you will rule out half of the known possibilities every single time you make a cut. . Question 9 . [64,36,16,11,9] Explain which number you are finding, how many check it would take, and make a binary search tree . I am searching for the number 9, which would take 3 iterations. You would start at 16, the middle index. Then you would do 4+4/2 to get 4, so the next index would be 9. . . Section 14-15 . This is my notes and hacks for the sections 14 and 15 . Vocab . Documentation: Text that explains the what, how, or why of your code. . Libraries: A collection of prewritten code or procedures that coders can use to maximize their efficiency. . Application Programming Interface: A type of software through several computers are able to communicate information amongst each other. . Notes . Libraries contain procedures that make programming easier. . procedures are especially good for reusing segments of code by calling the procedure. . random procedure: Random(a,b) provides a random number in the range [a, b] . Hacks . Multiple Choice . B) a random integer between &#39;a&#39; and &#39;b&#39; inclusive . A) x = start, y = stop, z = step . A) random.item() does not exist . Short Answer . Libraries are convenient because they provide procedures and prewritten code to maximize the efficiency of programmers . This procedure takes a list of strings and returns who will buy the meal today . import random # takes user input, puts it into a list of names names_string = input(&quot;Give me everybody&#39;s names, seperated by a comma.&quot;) names = names_string.split(&quot;,&quot;) num_items = len(names) # uses random to choose a random number random_choice = random.randint(0, num_items - 1) # associates random number with a name person_who_will_pay = names[random_choice] # prints name print(f&quot;{person_who_will_pay} is going to buy the meal today!&quot;) . Aiden is going to buy the meal today! . import random NAMES = [&quot;Aiden&quot;, &quot;Brayden&quot;, &quot;Bradley&quot;, &quot;Harambe&quot;, &quot;Charles&quot;, &quot;BigChungus&quot;, &quot;Chad&quot;, &quot;Brett&quot;, &quot;Dorian&quot;, &quot;Ryan&quot;, &quot;Varalu&quot;, &quot;Rohin&quot;, &quot;Advay&quot;, &quot;SmallChungus&quot;] rand_list = [] def randomPeople(names, new_names): count = 1 while count &lt;= 5: number = random.randint(0, len(names) - 1) new_names.append(names[number]) count += 1 return new_names print(randomPeople(NAMES, rand_list)) . [&#39;Rohin&#39;, &#39;Dorian&#39;, &#39;Varalu&#39;, &#39;BigChungus&#39;, &#39;Dorian&#39;] . import random score1 = 0 score2 = 0 def greatestRoll(): score1 = random.randint(1, 6) + random.randint(1, 6) score2 = random.randint(1, 6) + random.randint(1, 6) if score1 &gt; score2: print(&quot;Player 1 won with a score of &quot; + str(score1) + &quot; points!&quot;) if score1 &lt; score2: print(&quot;Player 2 won with a score of &quot; + str(score2) + &quot; points!&quot;) if score1 == score2: print(&quot;Both players tied with &quot; + str(score1) + &quot; points!&quot;) greatestRoll() . Player 1 won with a score of 7 points! . Section 16 Hacks . Notes . Simulations are system based processes that can be used to study behavior and different outcomes for multiple conditions. Simulations are mostly based on mathematical and statistical models which run through situations that are hard to analyze directly . Experiments are controlled studies that directly study behavioral and mathematical systems. In most circumstances, these involve changing certain variables to alter and study the outcomes. . Answers . Caleb Navarro . Question Answer . 1 | N/A | | . 2 | N/A | | . 3 | C | | . 4 | B | | . 5 | A | | . 7 | A | | . 8 | N/A | | . 9 | B | | . Homework and Hacks Section 17 &amp; 18 . HACK 1 . Please write a short 1-2 sentence explanation describing the difference between decidable and undecidable problems. Make sure to provide at least one example of each. . &lt;font color=#FF0000&gt;Undecidable problems are problems that algorithms simply cannot solve. One of the first problems discovered is the halting problem. Most of these problems are paradoxical and theoretical situations where answers are most likely are subjective. However, some of these problems can have situations where some inputs have values. But not all values are going to have outputs.&lt;/p&gt; . Decidable problems are problems that algorithms can return an output for all inputs. Mostly, these are algebraical problems that are simply solvable. . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . HACK 2 . Which of the following is a 3 step algorithm? . A. 2 x 6 x 8 . B. 4^5 . C. (3 x 8)^2 . D. None of the above . E. All of the above . &lt;font color=#FF0000&gt;ANSWER: C&lt;/p&gt; . STEP 1: 3 x 8 . STEP 2 &amp; 3: (24)^2 . The first step is simply multiplying two numbers. The second and third is squaring the result of step one. . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . HACK 3: Rewrite this JavaScript Code in a More Efficient Way (Hint: Use Binary Search) . function peak_finder(array){ let counter = 0 let peak = 0 let peak_index =0 while (counter &lt;= array.length){ console.log(counter) if (counter === 0){ if (a[0]&gt;=a[1]){ peak = a[0] peak_index = counter counter = array.length return The ${counter-1} indexed number, ${peak} is a peak }else{ counter+=1 } }else if(counter === array.length-1){ if (a[array.length-1] &gt;= a[array.length-2]){ peak = a[array.length-1] peak_index = counter counter = array.length return The ${counter-1} indexed number, ${peak} is a peak } }else{ if (a[counter]&gt; a[counter+1] &amp;&amp; a[counter]&gt; a[counter-1]){ peak = a[counter] peak_index = counter counter = array.length return The ${counter-1} indexed number, ${peak} is a peak }else{ counter += 1 } } } } new one below . function sum(n) { if (n &lt;= 1) { return n; } return n + sum(n - 1); } . HACK 4: Rewrite this Python Code in a More Efficient Way . def merge_sort(data): if len(data) &lt;= 1: return #splits data in half, defines left and right mid = len(data) // 2 left_data = data[:mid] right_data = data[mid:] merge_sort(left_data) merge_sort(right_data) left_index = 0 right_index = 0 data_index = 0 while left_index &lt; len(left_data) and right_index &lt; len(right_data): if left_data[left_index] &lt; right_data[right_index]: data[data_index] = left_data[left_index] left_index += 1 else: data[data_index] = right_data[right_index] right_index += 1 data_index += 1 if left_index &lt; len(left_data): del data[data_index:] data += left_data[left_index:] elif right_index &lt; len(right_data): del data[data_index:] data += right_data[right_index:] if __name__ == &#39;__main__&#39;: data = [9, 1, 7, 6, 2, 8, 5, 3, 4, 0] merge_sort(data) print(data) . [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] . data = [9, 1, 7, 6, 2, 8, 5, 3, 4, 0] print(&quot;original list&quot;) print(data) data.sort() print(&quot;--&quot;) print(&quot;sorted list&quot;) print(data) . original list [9, 1, 7, 6, 2, 8, 5, 3, 4, 0] -- sorted list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] . HACK 5: Rewrite this Python Code in a More Efficient Way . def heap_permutation(data, n): if n == 1: print(data) return for i in range(n): heap_permutation(data, n - 1) if n % 2 == 0: data[i], data[n-1] = data[n-1], data[i] else: data[0], data[n-1] = data[n-1], data[0] if __name__ == &#39;__main__&#39;: data = [1, 2, 3] heap_permutation(data, len(data)) . [1, 2, 3] [2, 1, 3] [3, 1, 2] [1, 3, 2] [2, 3, 1] [3, 2, 1] . from itertools import permutations perm = permutations([1, 2, 3]) for i in list(perm): print(i) . (1, 2, 3) (1, 3, 2) (2, 1, 3) (2, 3, 1) (3, 1, 2) (3, 2, 1) .",
            "url": "https://cubnavarro.github.io/Firstproject/week%2014/2022/11/29/Studentlessons.html",
            "relUrl": "/week%2014/2022/11/29/Studentlessons.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Night At The Museum Blog",
            "content": "Summarry OF N@TM . I was at night at the Museum and I presented what I did to Mr. Yeung and showed him what I did for the forntend part and showed depolyment. My time fram was from 6:30 to 7:00 each one of my group members got an oppertunity to show what they did and presnt to other people that were looking around. After we presented we went around to other classes to get photos and look at the projects for other classes. . Photos From Night at the Museum . I took images from the differnet class projects that I looked at during the night. I looked at some of the 3D Animation work along with ceramics and Drawing and painting. I stayed for about an hour 30 minutes in APCSP and 30 minutes looking around at the work of classmates and friends. I looked around and took some photos of the differnet art and stuff that I saw. I have some photos of things I say and I had a fun time just looking though the differnet projects and what each of them were and just to see the work of other students. . This is a pretty cool dragon that looks like there is alot of effort and work I would love to be this create and just be able to do this and make this type of work . This drawing is really detaild and it would be cool to be able to draw this good it looks really nice and it has a bunch of dragons and the castle is really cool. . This pumkin is really cool and i really like the color and how its super shinny I really like it . This art was cool cause of the colors and the different shapes that were used and the like bubble circles and layering with color . This drawing is really sick with color and the big ben and has a ton of detail and work that was put into this drawing .",
            "url": "https://cubnavarro.github.io/Firstproject/week%2013/2022/11/07/NightattheMusem.html",
            "relUrl": "/week%2013/2022/11/07/NightattheMusem.html",
            "date": " • Nov 7, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Python Web API Endpoints using Jokes",
            "content": "Model for API . We will begin our journey into APIs by creating and thinking about data. We have learned about Python Lists and dictionaries. In this data example, we are going to make &quot;the best computer jokes ever ;)&quot; and serve them over the Internet. The ultimate objective is to allow our viewers to provide a like or dislike on each of our jokes. . This code planning begins by coming up with some jokes and defining a data &quot;model&quot; to keep and manage the jokes. . jokes_data contains a list of dictionary records containing joke and reactions:haha or boohoo - joke_list contains collection of jokes we will put into jokes_data | . | Next comes some functions to interact with our jokes . def initJokes(): initializes jokes_data | def getJokes(): returns the complete list of jokes | def getJoke(): returns a single joke from our list | ... many more function can be examined by reading comments below ... | . | . import random jokes_data = [] joke_list = [ &quot;What kind of exercise do lazy people do? Diddly-squats.&quot;, &quot;What do you call a pony with a cough? A little horse!&quot;, &quot;What is Forrest Gump&#39;s password? 1Forrest1.&quot;, &quot;Why did the M&amp;M go to school? He wanted to be a Smartie.&quot;, &quot;What did one traffic light say to the other? Stop looking at me, I&#39;m changing!&quot;, &quot;What do you call bears with no ears? B.&quot;, &quot;What&#39;s a foot long and slippery? A slipper!&quot;, &quot;Why do French people eat snails? They don&#39;t like fast food!&quot;, &quot;What&#39;s red and moves up and down? A tomato in an elevator!&quot;, &quot;I invented a new word today: Plagiarism.&quot;, &quot;What is sticky and brown? A stick!&quot;, &quot;How does a rabbi make coffee? Hebrews it!&quot;, &quot;Rest in peace boiling water. You will be mist!&quot;, &quot;How do you throw a space party? You planet!&quot;, &quot;Want to hear a construction joke? Oh never mind, I&#39;m still working on that one.&quot;, &quot;Why don&#39;t scientists trust atoms? Because they make up everything!&quot;, &quot;I hate Russian dolls… they&#39;re so full of themselves!&quot;, &quot;Talk is cheap? Have you ever talked to a lawyer?&quot;, &quot;Why did the gym close down? It just didn&#39;t work out!&quot;, &quot;Two artists had an art contest. It ended in a draw!&quot;, &quot;A plateau is the highest form of flattery.&quot;, &quot;I have a fear of speed bumps. But I am slowly getting over it.&quot;, &quot;You can only get spoiled milk from a pampered cow.&quot;, &quot;What do you call a boomerang that doesn&#39;t come back? A stick!&quot;, &quot;You know what I saw today? Everything I looked at.&quot; ] # Initialize jokes def initJokes(): # setup jokes into a dictionary with id, joke, haha, boohoo item_id = 0 for item in joke_list: jokes_data.append({&quot;id&quot;: item_id, &quot;joke&quot;: item, &quot;haha&quot;: 0, &quot;boohoo&quot;: 0}) item_id += 1 # prime some haha responses for i in range(200): id = getRandomJoke()[&#39;id&#39;] addJokeHaHa(id) # prime some haha responses for i in range(50): id = getRandomJoke()[&#39;id&#39;] addJokeBooHoo(id) # Return all jokes from jokes_data def getJokes(): return(jokes_data) # Joke getter def getJoke(id): return(jokes_data[id]) # Return random joke from jokes_data def getRandomJoke(): return(random.choice(jokes_data)) # Liked joke def favoriteJoke(): best = 0 bestID = -1 for joke in getJokes(): if joke[&#39;haha&#39;] &gt; best: best = joke[&#39;haha&#39;] bestID = joke[&#39;id&#39;] return jokes_data[bestID] # Jeered joke def jeeredJoke(): worst = 0 worstID = -1 for joke in getJokes(): if joke[&#39;boohoo&#39;] &gt; worst: worst = joke[&#39;boohoo&#39;] worstID = joke[&#39;id&#39;] return jokes_data[worstID] # Add to haha for requested id def addJokeHaHa(id): jokes_data[id][&#39;haha&#39;] = jokes_data[id][&#39;haha&#39;] + 1 return jokes_data[id][&#39;haha&#39;] # Add to boohoo for requested id def addJokeBooHoo(id): jokes_data[id][&#39;boohoo&#39;] = jokes_data[id][&#39;boohoo&#39;] + 1 return jokes_data[id][&#39;boohoo&#39;] # Pretty Print joke def printJoke(joke): print(joke[&#39;id&#39;], joke[&#39;joke&#39;], &quot; n&quot;, &quot;haha:&quot;, joke[&#39;haha&#39;], &quot; n&quot;, &quot;boohoo:&quot;, joke[&#39;boohoo&#39;], &quot; n&quot;) # Number of jokes def countJokes(): return len(jokes_data) # Test Joke Model if __name__ == &quot;__main__&quot;: initJokes() # initialize jokes # Most likes and most jeered best = favoriteJoke() print(&quot;Most liked&quot;, best[&#39;haha&#39;]) printJoke(best) worst = jeeredJoke() print(&quot;Most jeered&quot;, worst[&#39;boohoo&#39;]) printJoke(worst) # Random joke print(&quot;Random joke&quot;) printJoke(getRandomJoke()) # Count of Jokes print(&quot;Jokes Count: &quot; + str(countJokes())) . Most liked 16 16 Q: What is the biggest lie in the entire universe? A: I have read and agree to the Terms and Conditions. haha: 16 boohoo: 2 Most jeered 6 11 If it wasn&#39;t for C, we’d all be programming in BASI and OBOL. haha: 14 boohoo: 6 Random joke 14 Q: How many programmers does it take to change a light bulb? A: None. It’s a hardware problem. haha: 5 boohoo: 4 Jokes Count: 18 . Backend Interface for Web API (Control) . An application programming interface (API) is the medium by which different systems of software interact. In our applications we have two big systems:1. Python Backend that stores data beyond a single Web page2. GH Pages/Fastpages Frontend that is responsible for presenting data . To communicate data between Frontend and Backend, this section Backend code provides and interface to the Frontend using a Web Service Endpoint. Examples of endpoints are listed below and can be typed within a browser, which will return JSON data: . https://flask.nighthawkcodingsociety.com/api/jokes | https://flask.nighthawkcodingsociety.com/api/jokes/2 | https://flask.nighthawkcodingsociety.com/api/jokes/random | . As you can see, these Endpoints return JSON. They are NOT that readable by normal humans. However, they are very effective in passing requested data across the Internet. The Frontend code is responsible for formatting and presenting and interface that allows the typical computer user to interact with this data. . The next cell of code is Creating Endpoints that return JSON. This allows developers in the Frontend to interact with Backend data. API is a contract between the Frontend and Backend on how to share data. . FYI, there is NO output from this section . . from flask import Blueprint, jsonify # jsonify creates an endpoint response object from flask_restful import Api, Resource # used for REST API building import requests # used for testing import random # Blueprints allow this code to be procedurally abstracted from main.py, meaning code is not all in one place app_api = Blueprint(&#39;api&#39;, __name__, url_prefix=&#39;/api/jokes&#39;) # endpoint prefix avoid redundantly typing /api/jokes over and over # API generator https://flask-restful.readthedocs.io/en/latest/api.html#id1 api = Api(app_api) class JokesAPI: # not implemented, this would be where we would allow creation of a new Joke class _Create(Resource): def post(self, joke): pass # getJokes() class _Read(Resource): def get(self): return jsonify(getJokes()) # getJoke(id) class _ReadID(Resource): def get(self, id): return jsonify(getJoke(id)) # getRandomJoke() class _ReadRandom(Resource): def get(self): return jsonify(getRandomJoke()) # getRandomJoke() class _ReadCount(Resource): def get(self): count = countJokes() countMsg = {&#39;count&#39;: count} return jsonify(countMsg) # put method: addJokeHaHa class _UpdateLike(Resource): def put(self, id): addJokeHaHa(id) return jsonify(getJoke(id)) # put method: addJokeBooHoo class _UpdateJeer(Resource): def put(self, id): addJokeBooHoo(id) return jsonify(getJoke(id)) # building RESTapi interfaces, these routes are added to Web Server http://&lt;server&lt;/api/jokes api.add_resource(_Create, &#39;/create/&lt;string:joke&gt;&#39;) api.add_resource(_Read, &#39;/&#39;) # default, which returns all jokes api.add_resource(_ReadID, &#39;/&lt;int:id&gt;&#39;) api.add_resource(_ReadRandom, &#39;/random&#39;) api.add_resource(_ReadCount, &#39;/count&#39;) api.add_resource(_UpdateLike, &#39;/like/&lt;int:id&gt;/&#39;) api.add_resource(_UpdateJeer, &#39;/jeer/&lt;int:id&gt;/&#39;) . ModuleNotFoundError Traceback (most recent call last) c: Users Caleb .vscode ExampleRepo APCSP _notebooks 2022-10-17-PBL-webapi_tutorial.ipynb Cell 5 in &lt;cell line: 1&gt;() -&gt; &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/Caleb/.vscode/ExampleRepo/APCSP/_notebooks/2022-10-17-PBL-webapi_tutorial.ipynb#W4sZmlsZQ%3D%3D?line=0&#39;&gt;1&lt;/a&gt; from flask import Blueprint, jsonify # jsonify creates an endpoint response object &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/Caleb/.vscode/ExampleRepo/APCSP/_notebooks/2022-10-17-PBL-webapi_tutorial.ipynb#W4sZmlsZQ%3D%3D?line=1&#39;&gt;2&lt;/a&gt; from flask_restful import Api, Resource # used for REST API building &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/Caleb/.vscode/ExampleRepo/APCSP/_notebooks/2022-10-17-PBL-webapi_tutorial.ipynb#W4sZmlsZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; import requests # used for testing ModuleNotFoundError: No module named &#39;flask&#39; . Frontend (View Simulation) and Hacks . This python codes tests endpoints on a server. This can be handy for development and testing when making modifications to the Jokes Web APIs. This code works off of the server endpoint/url, not from code cells above it in this notebook. . To work with this code and make observation for learning... . Run a local server from flask_portfolio project and the change server variable to be local | Observe the requests endpoints and the output, see if you can observe what is happening/changing on put requests | The &quot;requests&quot; are captured into a List, the List is used in the for loop to extract from RESTful API format. | Try running this with Debugging and observe what data is being created at each step (Required) | Try to format this data in Python print statements to be more readable (Required) | Start and stop local server and observe errors | . # server = &quot;http://127.0.0.1:5000/&quot; # run local server = &#39;https://flask.nighthawkcodingsociety.com/&#39; # run from web server url = server + &quot;api/jokes/&quot; responses = [] # responses list # Get the count of jokes on server count_response = requests.get(url+&quot;count&quot;) count_json = count_response.json() count = count_json[&#39;count&#39;] # Update likes/dislikes test sequence num = str(random.randint(0, count-1)) # test a random record responses.append( requests.get(url+num) # Get/read joke by id ) responses.append( requests.put(url+&quot;like/&quot;+num) # Put/add to like count ) responses.append( requests.put(url+&quot;jeer/&quot;+num) # Put/add to jeer count ) # Get a random joke responses.append( requests.get(url+&quot;random&quot;) # Get/read a random joke ) # Cycle through and print responses for response in responses: print(response) try: print(response.json()) except: print(&quot;data error&quot;) . NameError Traceback (most recent call last) c: Users Caleb .vscode ExampleRepo APCSP _notebooks 2022-10-17-PBL-webapi_tutorial.ipynb Cell 7 in &lt;cell line: 8&gt;() &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/Caleb/.vscode/ExampleRepo/APCSP/_notebooks/2022-10-17-PBL-webapi_tutorial.ipynb#W6sZmlsZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; responses = [] # responses list &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/Caleb/.vscode/ExampleRepo/APCSP/_notebooks/2022-10-17-PBL-webapi_tutorial.ipynb#W6sZmlsZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; # Get the count of jokes on server -&gt; &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/Caleb/.vscode/ExampleRepo/APCSP/_notebooks/2022-10-17-PBL-webapi_tutorial.ipynb#W6sZmlsZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; count_response = requests.get(url+&#34;count&#34;) &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/Caleb/.vscode/ExampleRepo/APCSP/_notebooks/2022-10-17-PBL-webapi_tutorial.ipynb#W6sZmlsZQ%3D%3D?line=8&#39;&gt;9&lt;/a&gt; count_json = count_response.json() &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/Caleb/.vscode/ExampleRepo/APCSP/_notebooks/2022-10-17-PBL-webapi_tutorial.ipynb#W6sZmlsZQ%3D%3D?line=9&#39;&gt;10&lt;/a&gt; count = count_json[&#39;count&#39;] NameError: name &#39;requests&#39; is not defined .",
            "url": "https://cubnavarro.github.io/Firstproject/techtalk/webapi",
            "relUrl": "/techtalk/webapi",
            "date": " • Oct 17, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Python API",
            "content": "import requests url = &quot;https://nfl-schedule.p.rapidapi.com/v1/schedules&quot; headers = { &quot;X-RapidAPI-Key&quot;: &quot;7d3a48cfe5msh3e8d80273f9e62ap1ac0b4jsn5db7034eaa7e&quot;, &quot;X-RapidAPI-Host&quot;: &quot;nfl-schedule.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers) print(&quot;NFL Scheduled games&quot;) x = 0 while x &lt;= 15: print(response.json().get(&quot;data&quot;)[x].get(&quot;name&quot;)) x += 1 . NFL Scheduled games Indianapolis Colts at Denver Broncos New York Giants at Green Bay Packers Pittsburgh Steelers at Buffalo Bills Los Angeles Chargers at Cleveland Browns Chicago Bears at Minnesota Vikings Detroit Lions at New England Patriots Seattle Seahawks at New Orleans Saints Miami Dolphins at New York Jets Atlanta Falcons at Tampa Bay Buccaneers Tennessee Titans at Washington Commanders Houston Texans at Jacksonville Jaguars San Francisco 49ers at Carolina Panthers Dallas Cowboys at Los Angeles Rams Philadelphia Eagles at Arizona Cardinals Cincinnati Bengals at Baltimore Ravens Las Vegas Raiders at Kansas City Chiefs .",
            "url": "https://cubnavarro.github.io/Firstproject/API/PythonAPI",
            "relUrl": "/API/PythonAPI",
            "date": " • Oct 11, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "4 Collegeboard Quizes",
            "content": "Collaboration Quiz . Score: 3 out of 3 This quiz was not a big challenge with me and I did not have much of a or any challenge with these question. . Program Function and Purpose Quiz . Score: 4/6 This quiz confused me a little and thought I was following the diagrams in questions 1 and 2 but ended up not and geting those wrong. Although I did understand the rest of the quizzes and did get the last 4 correct. I feel like the diagrams are a little weird and can be hard to follow. . Program Design and Development Quiz . Score: 1/3 This quiz was tricky because I know that I understand it and still the diagrams are a little tricky but I did not get the mark that. This was good and bad overall. . Copy of Identifying and Correcting Errors Quiz . Score: 3/3 This quiz was the easiest and I understood it the most and ended up with 3/3. This was easy overall. . Final Test . Score: 45/50 . This Quiz had ups and downs though out the whole thing some question were hard and others were easy but under are some notes and things I bloged about whil I took the quiz and After. . Question 16 was about Internet and sending things over the internet and how mesages are broken into packages. . . Question 17 was pretty difficult for me and my group members helped explain the answer and how to get it and really helped me though the quiz. . . Question 19 - 22 was a about Binary numbers and I really had a challenging time and was hard for me to understand them. . . . Question 24 was more binary numbers and need help from my group. It looked easy but when I really though about it it was complex and relized how it worked. . . Question 39 was simple but I over though it and put hello as my orinal answer then changed it to 4 because I saw “a Valid Index for the list”. . .",
            "url": "https://cubnavarro.github.io/Firstproject/week%206/week%207/week%2013/2022/10/10/CollegeBoardQuestions.html",
            "relUrl": "/week%206/week%207/week%2013/2022/10/10/CollegeBoardQuestions.html",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Fixing Docker Problems",
            "content": "My Problem . My problem was I could not open docker regularly giving me errors that I do not have permission for because I am not in the “docker-users” group. When I opened docker with administrator, it would open, but docker wouldn’t connect to any wsl 2 Distros when I had them downloaded in my File Explorer. . How I fixed My Problem . I discovered a command “netplwiz” in the windows key + r text box that can pull up your usernames along with the permissions. This will show you if you are a user, Administrator, or in any other groups and if you are not in the Docker-users group. I added myself to the group using the command “net localgroup docker-users “username” /ADD” put me into the docker users group and after logging out and back in I could open docker regularly and see the WSL 2 Distros that I had. .",
            "url": "https://cubnavarro.github.io/Firstproject/week%205/2022/10/09/FixingProblems.html",
            "relUrl": "/week%205/2022/10/09/FixingProblems.html",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "AP Prep Multiple Choice",
            "content": "College Board Big Idea 1 . Identifying and Correcting Errors (Unit 1.4) . Become familiar with types of errors and strategies to fixing them . Lightly Review Videos and take notes on topics with Blog | Complete assigned MCQ questions | . Here are some code segments you can practice fixing: . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . The intended outcome is to determine where the letter is in the alphabet using a while loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i + 1) + &quot; letter in the alphabet&quot;) i += 1 . The letter a is the 1 letter in the alphabet . The intended outcome is to determine where the letter is in the alphabet using a for loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) count = 1 for i in alphabetList: if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count) + &quot; letter in the alphabet&quot;) count += 1 . The letter b is the 2 letter in the alphabet . This code outputs the even numbers from 0 - 10 using a while loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . evens = [] i = 1 while i &lt;= 10: evens.append(i) i += 2 print(evens) . [1, 3, 5, 7, 9] . This code should output the odd numbers from 0 - 10 using a while loop. . odds = [] i = 0 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [0, 2, 4, 6, 8, 10] . This code outputs the even numbers from 0 - 10 using a for loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a for loop. . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 1): evens.append(numbers[i]) print(evens) . [1, 3, 5, 7, 9] . The intended outcome is printing a number between 1 and 100 once, if it is a multiple of 2 or 5 . What values are outputted incorrectly. Why? | Make changes to get the intended outcome. | . numbers = [] newNumbers = [] i = 0 while i &lt; 100: numbers.append(i) i += 1 for i in numbers: if (numbers[i] % 5 == 0 or numbers[i] % 2 == 0): newNumbers.append(numbers[i]) print(newNumbers) . [0, 2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98] . Challenge . This code segment is at a very early stage of implementation. . What are some ways to (user) error proof this code? | The code should be able to calculate the cost of the meal of the user | . Hint: . write a “single” test describing an expectation of the program of the program | test - input burger, expect output of burger price | run the test, which should fail because the program lacks that feature | write “just enough” code, the simplest possible, to make the test pass | . Then repeat this process until you get program working like you want it to work. . menu = {&quot;pizza&quot;: 8.99, &quot;garlic knots&quot;: 2.99, &quot;soda&quot;: 1.99, &quot;lava cake&quot;: 3.50, &quot;salad&quot;: 4.99} total = 0 more = 1 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times def newItem(total): m = 1 addTo = 0 item = input(&quot;What would you like to eat&quot;).lower() while (m == 1): for i in menu.keys(): if item == i: addTo = menu.get(item) if addTo != 0: return addTo else: item = input(&quot;We do not have that Sorry!&quot;).lower(), m = 1 total += newItem(total) while (more == 1): answer = input(&quot;Would you like more food&quot;).lower() if answer == &quot;yes&quot; or answer == &quot;Yes&quot; or answer == &quot;y&quot; or answer == &quot;Y&quot;: total += newItem(total) elif answer == &quot;no&quot; or answer == &quot;No&quot; or answer == &quot;N&quot; or answer == &quot;n&quot;: more = 0 else: print(&quot;Please only use yes or no&quot;) #code should add the price of the menu items selected by the user print(&quot;$&quot; + str(total)) . Menu pizza $8.99 garlic knots $2.99 soda $1.99 lava cake $3.5 salad $4.99 Please only use yes or no $17.47 . n1 = total n2 = 0.075 res = n1 * n2 Finalcost = (res +total) print(&quot;Your total is&quot;, Finalcost) . Your total is 18.78025 . Hacks . Now is a good time to think about Testing of your teams final project... . What errors may arise in your project? | What are some test cases that can be used? | Make sure to document any bugs you encounter and how you solved the problem. | What are “single” tests that you will perform on your project? Or, your part of the project? As Hack Design and Test plan action … Divide these “single” tests into Issues for Scrum Board prior to coding. FYI, related tests could be in same Issue by using markdown checkboxes to separate tests. | . | .",
            "url": "https://cubnavarro.github.io/Firstproject/week%207/2022/10/03/AP-error_testing.html",
            "relUrl": "/week%207/2022/10/03/AP-error_testing.html",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "Java Script",
            "content": "function logIt(output) { console.log(output); } . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } . // define a function to hold data for a Person function Person(name, ghID, classOf, School) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = &quot;&quot;; this.School = School; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } Person.prototype.setSchool = function(School){ this.School = School; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } // make a new Person and assign to variable teacher var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977); // object type is easy to work with in JavaScript teacher.setRole(&quot;teacher&quot;) logItType(teacher); // before role logItType(teacher.toJSON()); // ok to do this even though role is not yet defined // Add myself as a new person var caleb = new Person(&quot;Caleb&quot;, &quot;CubNavarro&quot;, 2024); caleb.setRole(&quot;Coolguy&quot;) caleb.setSchool(&quot;Del Norte&quot;) logItType(caleb); // output of Object and JSON/string associated with Teacher teacher.setRole(&quot;Teacher&quot;); // set the role teacher.setSchool(&quot;Del Norte&quot;) logItType(teacher); logItType(teacher.toJSON()); . object ; Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;teacher&#39;, School: undefined } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;teacher&#34;} object ; Person { name: &#39;Caleb&#39;, ghID: &#39;CubNavarro&#39;, classOf: 2024, role: &#39;Coolguy&#39;, School: &#39;Del Norte&#39; } object ; Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39;, School: &#39;Del Norte&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} . var students = [ new Person(&quot;Toby&quot;, &quot;Tobyleeder&quot;, 2024, &quot;Del Norte&quot;), new Person(&quot;Nathan&quot;, &quot;Nathan-Capule&quot;, 2024, &quot;Del Norte&quot;), new Person(&quot;Gene&quot;, &quot;Gene&quot;, 2024, &quot;Del Norte&quot;), new Person(&quot;Theo&quot;, &quot;Theothegreat&quot;, 2024, &quot;Del Norte&quot;), new Person(&quot;Caden&quot;, &quot;cadenthebot&quot;, 2024, &quot;Del Norte&quot;), ]; // define a classroom and build Classroom objects and json function Classroom(teacher, students){ // 1 teacher, many student // start Classroom with Teacher teacher.setRole(&quot;Teacher&quot;); teacher.setSchool(&quot;Del Norte&quot;) this.teacher = teacher; this.classroom = [teacher]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students compsci = new Classroom(teacher, students); // output of Objects and JSON in CompSci classroom logItType(compsci.classroom); // constructed classroom object logItType(compsci.classroom[0].name); // abstract 1st objects name logItType(compsci.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(compsci.json[0])); // show JSON.parse inverse of JSON.stringify . object ; [ Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39;, School: &#39;Del Norte&#39; }, Person { name: &#39;Toby&#39;, ghID: &#39;Tobyleeder&#39;, classOf: 2024, role: &#39;Student&#39;, School: &#39;Del Norte&#39; }, Person { name: &#39;Nathan&#39;, ghID: &#39;Nathan-Capule&#39;, classOf: 2024, role: &#39;Student&#39;, School: &#39;Del Norte&#39; }, Person { name: &#39;Gene&#39;, ghID: &#39;Gene&#39;, classOf: 2024, role: &#39;Student&#39;, School: &#39;Del Norte&#39; }, Person { name: &#39;Theo&#39;, ghID: &#39;Theothegreat&#39;, classOf: 2024, role: &#39;Student&#39;, School: &#39;Del Norte&#39; }, Person { name: &#39;Caden&#39;, ghID: &#39;cadenthebot&#39;, classOf: 2024, role: &#39;Student&#39;, School: &#39;Del Norte&#39; } ] string ; Mr M string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} object ; { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; } . // define an HTML conversion &quot;method&quot; associated with Classroom Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;GitHub ID&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class Of&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;School&quot; + &quot;&lt;/mark&gt;&lt;th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row of compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.ghID + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.classOf + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.School + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); } // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . NameGitHub IDClass OfRoleSchool&lt;/tr&gt;Mr M | jm1021 | 1977 | Teacher | Del Norte | Toby | Tobyleeder | 2024 | Student | Del Norte | Nathan | Nathan-Capule | 2024 | Student | Del Norte | Gene | Gene | 2024 | Student | Del Norte | Theo | Theothegreat | 2024 | Student | Del Norte | Caden | cadenthebot | 2024 | Student | Del Norte | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . . .",
            "url": "https://cubnavarro.github.io/Firstproject/week%205/2022/09/23/java.html",
            "relUrl": "/week%205/2022/09/23/java.html",
            "date": " • Sep 23, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "Performance Task",
            "content": "My ideas . A online store for trading, selling, or buying acounts on videogames, this includes, fortnite, Minecraft, roblox, CSGO, Call of Duty . | More ideas are coming . | Things to Consider . Copying other Apps . I have to make my game different enough from other games but simular in a way that makes it really cool to play bringing in people and customers to make money to keep creating and expanding the game. . Plagiarism . Not to just make an exact copy of a game this will just look bad and can get sued and will not be your own game .",
            "url": "https://cubnavarro.github.io/Firstproject/week%203/2022/09/12/Performance.html",
            "relUrl": "/week%203/2022/09/12/Performance.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "App Lab Plan",
            "content": "Code.org Quiz . Quiz . Subject . I really didn’t have a plan or Subject for the Quiz and just did a bunch od random Questions. . Questions . Who is this? | Who is this? | What Logo is this? | Coding . I mainly used the onEvent block to signify when a button was clicked it would tell you if the answer was right or the quesrtion was correct. I used comments to split up code and signify which parts for which of the quiz. .",
            "url": "https://cubnavarro.github.io/Firstproject/week%203/2022/09/12/AppLabPlan.html",
            "relUrl": "/week%203/2022/09/12/AppLabPlan.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "My Class schedule",
            "content": "Class Schedule . Period 1 Period 2 Period 3 Period 4 Period 5 . AP calc | Ceramics | APCSP | HPE | Spanish | .",
            "url": "https://cubnavarro.github.io/Firstproject/newcode/week%202/2022/09/06/Table.html",
            "relUrl": "/newcode/week%202/2022/09/06/Table.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "Scrum Process",
            "content": "Our Idea . Our idea is to make the game chess and have two differnet game modes one with regulr chess and one with a customizeable game where you can pick your pieces . Group Memebers . Scrum Master - Toby . Frontend - Nathan . Backend - Caleb . Dev ops - Gene . Jobs . Scrum Master makes sure the group is on task and that everyone is working on the correct part and the work is up to standard. . Frontend makes sure the visual appearance is good and more on the . Upfront things you see. Backend works more on the back end code . Dev Ops makes sure the code is correct and making sure pushed code is correct and is working. Also .",
            "url": "https://cubnavarro.github.io/Firstproject/week%205/2022/09/06/ScrumProcess.html",
            "relUrl": "/week%205/2022/09/06/ScrumProcess.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "Nathan's Car",
            "content": "This is Nathan’s Car . .",
            "url": "https://cubnavarro.github.io/Firstproject/random/NathansCar",
            "relUrl": "/random/NathansCar",
            "date": " • Aug 31, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "The Mega Duck",
            "content": "This is the mega hot duck . . .",
            "url": "https://cubnavarro.github.io/Firstproject/random/Ducks",
            "relUrl": "/random/Ducks",
            "date": " • Aug 31, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "Unit 2, 3 Vocab",
            "content": "Unit 2 Vocab . Bits are the smallest unit of data in computing. A bit can have a value of either 0 or 1, and is often used to represent a binary value. . Bytes are a unit of digital data consisting of eight bits. This is the most common unit used to measure the amount of data stored in a computer or transmitted over a network. . Hexadecimal, also known as hex, is a number system with base 16. It uses 16 distinct symbols, most often the symbols 0-9 to represent values zero to nine, and A, B, C, D, E, F to represent values ten to fifteen. . Nibbles are a unit of digital data consisting of four bits, or half a byte. . Unsigned integers are whole numbers that can only have positive values or zero. These numbers do not have a sign to indicate whether they are positive or negative, and are often used to represent values that can only be positive, such as the size of a file or the number of items in a set. . Signed integers are whole numbers that can have both positive and negative values. These numbers have a sign to indicate whether they are positive or negative, and are often used to represent values that can be either positive or negative, such as the result of a mathematical operation. . Floating-point numbers, also known as floats, are numbers that have a decimal point. These numbers are often used to represent values that can have a fractional part, such as the result of a division operation. . Boolean values are values that can only be either true or false. These values are often used in programming to represent a binary condition, such as whether a certain condition is met or not. . ASCII (American Standard Code for Information Interchange) is a character encoding standard used to represent text in computers and other devices. It uses a set of 128 characters, including the letters of the English alphabet, numbers, and special symbols. . Unicode is a character encoding standard used to represent text in computers and other devices. It includes all of the characters in the ASCII standard, as well as additional characters from other languages and symbols. . RGB (Red, Green, Blue) is a color model used to represent colors on a computer or other electronic device. In this model, colors are represented by a combination of the primary colors red, green, and blue, each with a different intensity value. . Lossy data compression is a method of reducing the size of a file by discarding some of the data. This can result in a loss of quality, but can also significantly reduce the file size. . Lossless data compression is a method of reducing the size of a file without discarding any data. This ensures that the quality of the data is preserved, but may not result in as significant a reduction in file size as lossy compression. . Unit 3 Vocab . A variable is a named location in a computer’s memory that is used to store a value. The value stored in a variable can be changed, and the same variable can be used to store different values at different times. . Data types are the classification of data based on their type and the operations that can be performed on them. Common data types include integers, floating-point numbers, strings, and Booleans. . A list is a collection of data items that are organized in a specific order. In Python, lists are represented using square brackets and can contain any data type, including other lists. . A 2D list is a list that contains other lists as its items. This allows for the creation of data structures that have more than one dimension, such as a grid or a table. . A dictionary is a data structure that uses keys to map to values. In Python, dictionaries are represented using curly braces and can contain any data type. . A class is a template or blueprint for creating objects in object-oriented programming. Classes define the properties and behaviors of objects, and objects are instances of a class. . An algorithm is a step-by-step procedure for solving a problem or achieving a specific goal. Algorithms are used in many different fields, including computer science, mathematics, and engineering. . A sequence is a type of control structure in which a set of instructions are executed in a specific order. . Selection is a type of control structure in which a specific set of instructions are executed based on the evaluation of a condition. . Iteration is a type of control structure in which a set of instructions are repeated until a specific condition is met. . An expression is a combination of variables, operators, and other elements that produces a value. In programming, expressions are often used in control structures to evaluate conditions. . Comparison operators are operators that are used to compare two values. In Python, the comparison operators include &lt; (less than), &gt; (greater than), == (equal to), and != (not equal to). . Boolean expressions are expressions that evaluate to either true or false. In programming, Boolean expressions are often used in control structures to determine which instructions to execute. . Selection statements are control structures that use Boolean expressions to evaluate conditions and decide which instructions to execute. In Python, the selection statement is the if statement. . Iteration statements are control structures that repeat a set of instructions until a specific condition is met. In Python, the iteration statements are the for and while loops. . A truth table is a table that shows the possible combinations of inputs and outputs for a logical operation. Truth tables are often used to evaluate the behavior of Boolean expressions. . Characters are the basic building blocks of a string. In Python, characters are represented as single quotes (e.g. ‘a’) and can be any letter, number, or symbol. . Strings are collections of characters that are used to represent text. In Python, strings are represented as double quotes (e.g. “Hello”) or single quotes (e.g. ‘Hello’). . The length of a string is the number of characters it contains. In Python, the length of a string can be found using the len() function. . Concatenation is the process of joining two or more strings together to form a new string. In Python, concatenation is performed using the + operator. . The upper() and lower() methods are used to convert a string to all uppercase or all lowercase characters . Traversing a string means to access each character in the string one by one. In Python, this can be done using a for loop and the len() function to iterate over the characters in a string. . The if, elif, and else keywords are used in Python to create conditional statements. . The if statement is used to evaluate a condition and execute a specific set of instructions if the condition is true. . The elif statement is used to evaluate additional conditions if the original if condition is false. . The else statement is used to specify a default set of instructions to execute if all other conditions are false. . Nested selection statements are if statements that are placed inside of other if statements. This allows for the creation of complex conditional statements that can evaluate multiple conditions. . The for and while loops are used in Python to repeat a set of instructions multiple times. The for loop is used to iterate over a sequence of items, such as the elements of a list. The while loop is used to repeat a set of instructions as long as a specific condition is true. . The range() function is used in Python to generate a sequence of numbers. This can be used in a for loop to specify the number of times to repeat the loop. . The break and continue keywords are used in Python to control the flow of a loop. The break keyword is used to exit a loop completely, while the continue keyword is used to skip the current iteration of the loop and continue with the next iteration. . Procedural abstraction is the process of separating the details of how a task is performed from the overall logic of the program. In Python, this is achieved using def procedures, which allow for the creation of reusable blocks of code that can be called from other parts of the program. . Parameters are variables that are used to pass information into a def procedure. When a procedure is called, the values of the parameters are specified and are used by the procedure to perform its tasks. . Return values are the values that are returned by a def procedure after it has finished executing. Return values can be used by the calling code to access the results of the procedure’s operations. .",
            "url": "https://cubnavarro.github.io/Firstproject/week%2014/2022/08/09/Vocab.html",
            "relUrl": "/week%2014/2022/08/09/Vocab.html",
            "date": " • Aug 9, 2022"
        }
        
    
  
    
        ,"post43": {
            "title": "Jokes API",
            "content": "| PythonAPI | Nathan&#39;s Car | Jokes API | Ducks | . Joke HaHa Boohoo .",
            "url": "https://cubnavarro.github.io/Firstproject/data/jokes",
            "relUrl": "/data/jokes",
            "date": " • Jul 10, 2022"
        }
        
    
  
    
        ,"post44": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . . Plus Binary Octal Hexadecimal Decimal Character Bits Minus . +1 | 00000000 | 0 | 0 | 0 | | 8 | -1 | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | . RGB . . RGB Plus Binary Hexadecimal Decimal Minus Color . R | +1 | 00000000 | 0 | 0 | -1 | | . G | +1 | 00000000 | 0 | 0 | -1 | . B | +1 | 00000000 | 0 | 0 | -1 | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | . &lt;/div&gt; .",
            "url": "https://cubnavarro.github.io/Firstproject/binary",
            "relUrl": "/binary",
            "date": " • Jul 7, 2022"
        }
        
    
  
    
        ,"post45": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | .",
            "url": "https://cubnavarro.github.io/Firstproject/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Jul 7, 2022"
        }
        
    
  
    
        ,"post46": {
            "title": "Apicode",
            "content": "from flask import Blueprint, request, jsonify from flask_restful import Api, Resource # used for REST API building from datetime import datetime . from model.users import User . blueprint, which is registered to app in main.py . user_api = Blueprint(‘user_api’, name, url_prefix=’/api/users’) . API docs https://flask-restful.readthedocs.io/en/latest/api.html#id1 . api = Api(user_api) class UserAPI: class _Create(Resource): def post(self): ‘’’ Read data for json body ‘’’ body = request.get_json() . &#39;&#39;&#39; Avoid garbage in, error checking &#39;&#39;&#39; # validate name name = body.get(&#39;name&#39;) if name is None or len(name) &lt; 2: return {&#39;message&#39;: f&#39;Name is missing, or is less than 2 characters&#39;}, 210 # validate uid uid = body.get(&#39;uid&#39;) if uid is None or len(uid) &lt; 2: return {&#39;message&#39;: f&#39;User ID is missing, or is less than 2 characters&#39;}, 210 # look for password and dob password = body.get(&#39;password&#39;) dob = body.get(&#39;dob&#39;) &#39;&#39;&#39; #1: Key code block, setup USER OBJECT &#39;&#39;&#39; uo = User(name=name, uid=uid) &#39;&#39;&#39; Additional garbage error checking &#39;&#39;&#39; # set password if provided if password is not None: uo.set_password(password) # convert to date type if dob is not None: try: uo.dob = datetime.strptime(dob, &#39;%m-%d-%Y&#39;).date() except: return {&#39;message&#39;: f&#39;Date of birth format error {dob}, must be mm-dd-yyyy&#39;}, 210 &#39;&#39;&#39; #2: Key Code block to add user to database &#39;&#39;&#39; # create user in database user = uo.create() # success returns json of user if user: return jsonify(user.read()) # failure returns error return {&#39;message&#39;: f&#39;Processed {name}, either a format error or User ID {uid} is duplicate&#39;}, 210 class _Read(Resource): def get(self): users = User.query.all() # read/extract all users from database json_ready = [user.read() for user in users] # prepare output in json return jsonify(json_ready) # jsonify creates Flask response object, more specific to APIs than json.dumps # building RESTapi endpoint api.add_resource(_Create, &#39;/create&#39;) api.add_resource(_Read, &#39;/&#39;) .",
            "url": "https://cubnavarro.github.io/Firstproject/2022/02/22/APIcode.html",
            "relUrl": "/2022/02/22/APIcode.html",
            "date": " • Feb 22, 2022"
        }
        
    
  
    
        ,"post47": {
            "title": "Performance Task 3",
            "content": "Reporting Category Student Score College Board Score Comments . Program Purpose and Function | 1 | 1 | College Board gave the point due to the fact all was correct | . Data Abstraction | 0 | 0 | Collegeboard didnt they diddnt acsess data from the list so there was no storage. | . Managing Complexity | 0 | 0 | They didnt give a point as the data could have been used within a list and conditional | . Procedural Abstraction | 0 | 0 | Only one parameter set which didnt serve purpose for code which didnt meet requirements for as it was stated to move the process smoothly | . Algorithm Implementation | 1 | 1 | Had an if statement known as RPS which meant that | . Testing | 1 | 1 | The app was tested very well and it included all parts of testing for the app | . Reporting Category Student Score College Board Score Comments . Program Purpose and Function | 1 | 1 | Video had a clear input and output which is required also purpose is clear in the written explanation. As it is to serve as entertainment for the user | . Data Abstraction | 1 | 1 | The response shows how data is store in order to itterate the list of letofguessword which stores data and is acsess througout the code. | . Managing Complexity | 1 | 1 | It used the game for the user to guess the word and kept a data storage which made it simple | . Procedural Abstraction | 1 | 1 | Guess word parameter was usen giving it a 1 | . Algorithm Implementation | 1 | 1 | Repeated loop with replace list meeting the criteria. Also used booleans to check true or false in order to keep word accuracy | . Testing | 1 | 1 | The word guessser was very good and all part were correct | . Reporting Category Student Score College Board Score Comments . Program Purpose and Function | 1 | 1 | Video had a clear input and output which is required also the response contained clear funtion/purpose. | . Data Abstraction | 0 | 0 | A list was made but data storage wasnt used | . Managing Complexity | 0 | 0 | it doesent talk about managing complexity as it only talks about using a list | . Procedural Abstraction | 0 | 0 | No parameters were used with left there no procedures | . Algorithm Implementation | 0 | 0 | They use update screen however no other algorthms were used leaving the code to be pointless | . Testing | 0 | 0 | The app was tested very well and it included all parts of testing for the app the point | . Reporting Category Student Score College Board Score Comments . Program Purpose and Function | 1 | 1 | Purpose and fucntion were defined correclty and inputs and outputs were shown with the use of moving keys to fish | . Data Abstraction | 1 | 1 | uses a list called fish types which show how data is stored leaving to be kept in one area with distinct characteristics | . Managing Complexity | 1 | 1 | the data and code used a list of lists to keep everthing simple rather than using multiple lists and procedures | . Procedural Abstraction | 1 | 1 | had clone movement parameter which kept everything runnig and with procedures | . Algorithm Implementation | 1 | 1 | An algorithm for height and movement for set keeping game moving which met all criteria | . Testing | 1 | 1 | explanation differs from the code and parameters set which doesent meet criteria | .",
            "url": "https://cubnavarro.github.io/Firstproject/week%2017/2022/01/22/PerformanceTaskScoring3.html",
            "relUrl": "/week%2017/2022/01/22/PerformanceTaskScoring3.html",
            "date": " • Jan 22, 2022"
        }
        
    
  
    
        ,"post48": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://cubnavarro.github.io/Firstproject/2020/02/20/test.html",
            "relUrl": "/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post49": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://cubnavarro.github.io/Firstproject/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  

  
      ,"page2": {
          "title": "Review Page",
          "content": "Write a Review . Name: . Email: . Rating: Select a rating 5 stars 4 stars 3 stars 2 stars 1 star . Review: . Recent Reviews . John Doe . Rating: 5 stars . &quot;This website is amazing! I love the design and the content.&quot; . | Theo . Rating: 4 stars . &quot;Hello I had an amzing time and love the vacation&quot; . | . &lt;/main&gt; &lt;/html&gt; &copy; 2023 Website Review Page. All rights reserved. . &lt;/body&gt; &lt;/html&gt; .",
          "url": "https://cubnavarro.github.io/Firstproject/_pages/Review.html",
          "relUrl": "/_pages/Review.html",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "Vocabulary",
          "content": "Vocab Page . Markdown - A coding language for text . HTML - Hyper Text Markup Language . def - indicates the terms being defined with the next sentence . Function - A block of code and when it is ran it is called a function . if statement - if is a conditional statement . Conditional - a set of code that is used if a requirment is met . Jekyll - A language used for some part of fastpages . Liquid - A language used to build the tags page .",
          "url": "https://cubnavarro.github.io/Firstproject/vocab/",
          "relUrl": "/vocab/",
          "date": ""
      }
      
  

  
      ,"page4": {
          "title": "About Me",
          "content": "Hello my name is Caleb Navarro this is my about me page and has cool information yeaaaaaaaa . I am in 11 grade at Del Norte High School and I am on the Varsity waterpolo team and in the robotics club. I love to hangout with my friends and enjoy playing videogames. .",
          "url": "https://cubnavarro.github.io/Firstproject/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
      ,"page10": {
          "title": "Theme Changer",
          "content": "Theme Changer . . Toggle Theme &lt;/html&gt; .",
          "url": "https://cubnavarro.github.io/Firstproject/_pages/themechanger.html",
          "relUrl": "/_pages/themechanger.html",
          "date": ""
      }
      
  

  
  

  
  

  
  

  

  

  

  
  

  
      ,"page18": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://cubnavarro.github.io/Firstproject/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}